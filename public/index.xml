<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on 悠创</title>
    <link>http://localhost:1313/Yocreative.github.io/</link>
    <description>Recent content in Home on 悠创</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jan 2024 10:39:03 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Yocreative.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WIFI基础知识汇总</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/wifi/wifi%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 20 Jan 2024 10:14:21 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/wifi/wifi%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;h1 id=&#34;wifi基础知识汇总&#34;&gt;&#xA;  WIFI基础知识汇总&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#wifi%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e6%b1%87%e6%80%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1-wi-fi起源&#34;&gt;&#xA;  1. Wi-Fi起源&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-wi-fi%e8%b5%b7%e6%ba%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;现在我们大家对&lt;code&gt;Wi-Fi&lt;/code&gt;肯定都不陌生，无论是笔记本，手机，智能电视，都离不开&lt;code&gt;Wi-Fi&lt;/code&gt;。现在我们一般用的都是&lt;code&gt;Wi-Fi5&lt;/code&gt;,&lt;code&gt;Wi-Fi6&lt;/code&gt;也正在快速普及。&lt;/p&gt;&#xA;&lt;p&gt;在90年代，&lt;code&gt;IEEE&lt;/code&gt;成立著名的&lt;code&gt;802.11&lt;/code&gt;工作组，同时也定义了&lt;code&gt;802.11&lt;/code&gt;的标准（&lt;code&gt;Wi-Fi&lt;/code&gt;的核心技术标准）。最终形成了&lt;code&gt;IEEE802.11&lt;/code&gt;标准版本：&lt;code&gt;802.11b&lt;/code&gt; 工作于&lt;code&gt;2.4G&lt;/code&gt;频段，&lt;code&gt;802.11a&lt;/code&gt;工作于&lt;code&gt;5.8G&lt;/code&gt;频段。&lt;/p&gt;&#xA;&lt;p&gt;于此同时，intersil、3Com、诺基亚&amp;hellip;六家公司，也成立了&lt;code&gt;WECA：Wireless Ethernet Compatibility Alliance&lt;/code&gt;无线以太网相容性联盟，最终将该技术正式更名为了&lt;code&gt;Wi-Fi&lt;/code&gt;，该组织也改名为&lt;code&gt;Wi-Fi联盟（Wi-Fi Alliance）&lt;/code&gt;，并且&lt;code&gt;Wi-Fi联盟&lt;/code&gt;不承认&lt;code&gt;wifi&lt;/code&gt;、&lt;code&gt;WiFi&lt;/code&gt;等其他字眼。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/UNIONDONG/Get_Pic_Url/Media202203191611703.png&#34; alt=&#34;image-20220319161123571&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-wi-fi定义&#34;&gt;&#xA;  2. Wi-Fi定义&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-wi-fi%e5%ae%9a%e4%b9%89&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Wi-Fi&lt;/code&gt;是&lt;code&gt;Wi-Fi联盟&lt;/code&gt;制造商的商标做为产品的品牌认证，是一个基于&lt;code&gt;IEEE 802.11&lt;/code&gt;标准的&lt;strong&gt;无线局域网技术&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;无线网络上网可以简单的理解为无线上网，几乎所有智能手机、平板电脑和笔记本电脑都支持Wi-Fi上网，是当今使用最广的一种&lt;strong&gt;无线网络传输技术&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;从宏观来说，也可以理解为&lt;code&gt;Wi-Fi=IEEE802.11标准&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3-wlan&#34;&gt;&#xA;  3. WLAN&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-wlan&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;wlan：wireless local area network&lt;/code&gt;，无线局域网络的全称，它利用射频技术&lt;code&gt;Radio Frequency； RF&lt;/code&gt;，使用电磁波构成局域网络，在空中实现通信。&lt;/p&gt;&#xA;&lt;p&gt;该技术的出现绝不是用来取代有线局域网络，而是用来弥补有线局域网络之不足。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;其实很多时候，人们将二者混用，其实&lt;strong&gt;实现wlan的方式有很多，wifi只是实现方式之一&lt;/strong&gt;；&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4-80211协议标准&#34;&gt;&#xA;  4. 802.11协议标准&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-80211%e5%8d%8f%e8%ae%ae%e6%a0%87%e5%87%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;802.11&lt;/code&gt;：&lt;code&gt;802.11工作组&lt;/code&gt;所制定的一种无线局域网标准。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;IEEE802&lt;/code&gt;家族是由&lt;strong&gt;一系列局域网络(&lt;code&gt;Local Area Network,LAN&lt;/code&gt;)技术标准&lt;/strong&gt;所组成，&lt;code&gt;802.11&lt;/code&gt;属于其中一员。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;WI-FI&lt;/code&gt;使用了&lt;code&gt;802.11&lt;/code&gt;的媒体访问控制层（MAC）和物理层（PHY），其内部也包含了不同的协议。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;IEEE802.11协议族成员如下&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/UNIONDONG/Get_Pic_Url/Media202203160959460.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;802.11 a/b/g/n/ac&lt;/code&gt;：都是由&lt;code&gt;802.11&lt;/code&gt;发展而来。不同的后缀代表着&lt;strong&gt;不同的物理层标准工作频段&lt;/strong&gt;和&lt;strong&gt;不同的传输速率&lt;/strong&gt;，也就是说它们的物理层和传输速度不同。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;5.0GHz&lt;/code&gt;和&lt;code&gt;2.4GHz&lt;/code&gt;指的是无线路由器的工作频段。双频无线路由器是同时工作在&lt;code&gt;5.0GHz&lt;/code&gt;和&lt;code&gt;2.4GHz&lt;/code&gt;的模式下，而单频无线路由器只能工作在&lt;code&gt;2.4GHz&lt;/code&gt;模式下。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/b28c0342998925041c5a8abac2959fa8.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;1、&lt;code&gt;802.11b&lt;/code&gt;和&lt;code&gt;802.11g&lt;/code&gt;工作在同一频段上，g能够兼容b，也就是说支持g的网卡都能支持b。&lt;/p&gt;&#xA;&lt;p&gt;2、&lt;code&gt;802.11n&lt;/code&gt;协议为双频工作模式（包含2.4GHz和5GHz两个工作频段）。这样11n保障了与以往的802.11a b, g标准兼容。&lt;/p&gt;&#xA;&lt;p&gt;3、新一代wifi标准&lt;code&gt;802.11 ac&lt;/code&gt;是从&lt;code&gt;802.11 n&lt;/code&gt;上发展而来的，有着比802.11 n更高的速度。现在市面是说的双频路由器即支持2.4G和5G的路由器。&lt;/p&gt;&#xA;&lt;p&gt;4、&lt;code&gt;802.11n&lt;/code&gt; 和&lt;code&gt;802.11ac&lt;/code&gt;是WiFi的技术标准，就像手机3G网络一样，移动、联通、电信zhi都有自己不同的3G技术标准，WiFi也有不同的标准，，WiFi标准历经了&lt;code&gt;802.11a/g/b/n/ac&lt;/code&gt;五代标准，其中&lt;code&gt;802.11n&lt;/code&gt;是目前主流的应用，&lt;code&gt;802.11ac&lt;/code&gt;是最新一代标准，也就是第五代标准。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;由于802.11ac标准可以达到千兆的无线速度，所以已经大有取代802.11n标准的趋势，估计为了一两年内，大部分无线产品报告手机、笔记本、平板、无线路由器都采用802.11ac标准，&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;5-wi-fi所采用的技术&#34;&gt;&#xA;  5. Wi-Fi所采用的技术&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-wi-fi%e6%89%80%e9%87%87%e7%94%a8%e7%9a%84%e6%8a%80%e6%9c%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Wi-Fi&lt;/code&gt;使用的是&lt;strong&gt;无线电波技术&lt;/strong&gt;，&lt;strong&gt;无线电波是电磁辐射的一种&lt;/strong&gt;，而电磁辐射包括从伽玛射线到可见光到无线电波的种种。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux字符设备驱动</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Fri, 19 Jan 2024 21:40:08 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux字符设备驱动&#34;&gt;&#xA;  【一文秒懂】Linux字符设备驱动&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%ad%97%e7%ac%a6%e8%ae%be%e5%a4%87%e9%a9%b1%e5%8a%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231123091238538.png&#34; alt=&#34;image-20231123091238538&#34; /&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;众所周知，&lt;code&gt;Linux&lt;/code&gt;内核主要包括三种驱动模型，字符设备驱动，块设备驱动以及网络设备驱动。&lt;/p&gt;&#xA;&lt;p&gt;其中，&lt;code&gt;Linux&lt;/code&gt;字符设备驱动，可以说是&lt;code&gt;Linux&lt;/code&gt;驱动开发中最常见的一种驱动模型。&lt;/p&gt;&#xA;&lt;p&gt;我们该系列文章，主要为了帮助大家快速入门&lt;code&gt;Linux&lt;/code&gt;驱动开发，该篇主要来了解一些字符设备驱动的框架和机制。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;系列文章基于&lt;code&gt;Kernel 4.19&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h1 id=&#34;2关键数据结构&#34;&gt;&#xA;  2、关键数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%85%b3%e9%94%ae%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;21-cdev&#34;&gt;&#xA;  2.1 cdev&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-cdev&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; cdev {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kobject kobj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; module &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_operations &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;ops;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; list_head list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;dev_t&lt;/span&gt; dev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} __randomize_layout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;cdev&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;文件位置&lt;/strong&gt;：&lt;code&gt;include/linux/cdev.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要作用&lt;/strong&gt;：&lt;code&gt;cdev&lt;/code&gt;可以理解为&lt;code&gt;char device&lt;/code&gt;，用来抽象一个字符设备。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;核心成员及含义&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;kobj&lt;/code&gt;：表示一个内核对象。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;owner&lt;/code&gt;：指向该模块的指针&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ops&lt;/code&gt;：指向文件操作的指针，包括&lt;code&gt;open&lt;/code&gt;、&lt;code&gt;read&lt;/code&gt;、&lt;code&gt;write&lt;/code&gt;等操作接口&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list&lt;/code&gt;：用于将该设备加入到内核模块链表中&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;dev&lt;/code&gt;：设备号，由主设备号和次设备号构成&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;count&lt;/code&gt;：表示有多少个同类型设备，也间接表示设备号的范围&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;__randomize_layout&lt;/code&gt;：一个编译器指令，用于随机化结构体的布局，以增加安全性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;22-file_operations&#34;&gt;&#xA;  2.2 file_operations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-file_operations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_operations {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; module &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;llseek) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;read) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; __user &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;write) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; __user &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;read_iter) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kiocb &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; iov_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;write_iter) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kiocb &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; iov_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;iterate) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dir_context &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;iterate_shared) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dir_context &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;__poll_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;poll) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; poll_table_struct &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;unlocked_ioctl) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;compat_ioctl) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;mmap) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; vm_area_struct &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; mmap_supported_flags;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;open) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; inode &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;flush) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;fl_owner_t&lt;/span&gt; id);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;release) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; inode &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fsync) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; datasync);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fasync) (&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;lock) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_lock &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;sendpage) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; page &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;get_unmapped_area)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;check_flags)(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;flock) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_lock &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;splice_write)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; pipe_inode_info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;splice_read)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; pipe_inode_info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;setlease)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_lock &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fallocate)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;file, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; mode, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; offset,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;show_fdinfo)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; seq_file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;m, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifndef CONFIG_MMU&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;mmap_capabilities)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;copy_file_range)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;clone_file_range)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u64);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dedupe_file_range)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u64);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fadvise)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} __randomize_layout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;file_operations&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核调试工具——devmem</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7devmem/</link>
      <pubDate>Fri, 19 Jan 2024 21:23:10 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7devmem/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核调试工具devmem&#34;&gt;&#xA;  【一文秒懂】Linux内核调试工具——devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7devmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;962&#34; height=&#34;176&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/93fe500adc7d40c6bf134e9d9af12b0f.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们在底层开发过程中，经常需要&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;在终端查看或者修改设备寄存器的值&lt;/strong&gt;&lt;/span&gt;，有这样一个工具&amp;mdash;-&lt;code&gt;devmem&lt;/code&gt;，可用于读取或者修改物理寄存器的值，非常方便！&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;devmem&lt;/code&gt;就是在&lt;code&gt;Linux&lt;/code&gt;命令行模式下，直接操作我们设备寄存器的值！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用&#34;&gt;&#xA;  2、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-配置devmem&#34;&gt;&#xA;  2.1 配置devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e9%85%8d%e7%bd%aedevmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220811174204310.png&#34; alt=&#34;image-20220811174204310&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;进入&lt;code&gt;menuconfig&lt;/code&gt;选项中，按下&lt;code&gt;/&lt;/code&gt;搜索关键词即可！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;22使用devmem&#34;&gt;&#xA;  2.2、使用devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22%e4%bd%bf%e7%94%a8devmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;进入&lt;code&gt;Linux&lt;/code&gt;后，输入&lt;code&gt;devmem -h&lt;/code&gt;查看帮助信息即可！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: devmem ADDRESS &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;WIDTH &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;VALUE&lt;span style=&#34;color:#ff79c6&#34;&gt;]]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Read/write from physical address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ADDRESS Address to act upon&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WIDTH   Width &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;8/16/...&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VALUE   Data to be written&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;内部为可选内容，比较简单，这里直接上使用代码！&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;读物理内存&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#读指定的物理内存值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 16&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#读16bit物理内存的值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写物理内存&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt; 0x00000000&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#以32bit写入给定的值到指定物理内存&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt; 0x010&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#以8bit写入给定的值到指定物理内存&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】一、MMC_SD_SDIO介绍</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%80mmc_sd_sdio%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 19 Jan 2024 21:16:36 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%80mmc_sd_sdio%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;mmc子系统-一mmcsdsdio介绍&#34;&gt;&#xA;  【MMC子系统】 一、MMC/SD/SDIO介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f-%e4%b8%80mmcsdsdio%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该节学习&lt;code&gt;Linux Kernel&lt;/code&gt;的&lt;code&gt;MMC&lt;/code&gt;子系统，也称为块设备驱动，正如其名，与字符驱动相比，&lt;code&gt;MMC&lt;/code&gt;子系统以块为单位进行操作。&lt;/p&gt;&#xA;&lt;p&gt;同时，由于&lt;code&gt;MMC Card&lt;/code&gt;、&lt;code&gt;SD Card&lt;/code&gt;、&lt;code&gt;SDIO Card&lt;/code&gt;等设备协议基本大同小异，所以在&lt;code&gt;Linux Kernel&lt;/code&gt;中使用&lt;code&gt;MMC&lt;/code&gt;子系统来统一管理！&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2mmcsdsdio介绍&#34;&gt;&#xA;  2、MMC/SD/SDIO介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2mmcsdsdio%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;上面我们了解到，&lt;code&gt;Linux Kernel&lt;/code&gt;使用统一的子系统模型来管理&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;等设备，那么为什么要这样设计呢？&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;答案当然是：三者协议有一定的共通性。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC（MultiMediaCard）&lt;/code&gt;多媒体卡设备，从本质上看，&lt;strong&gt;它是一种用于固态非易失性存储的内存卡（memory card）规范，定义了诸如卡的形态、尺寸、容量、电气信号、和主机之间的通信协议等方方面面的内容。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;1997年，&lt;code&gt;MMC&lt;/code&gt;规范正式发布，至今已经进化出了&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;MicroSD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;、&lt;code&gt;EMMC&lt;/code&gt;等多种不同的规范，虽然眼花缭乱，但是追其根源，都源于&lt;code&gt;MMC&lt;/code&gt;规范，所以&lt;code&gt;Linux Kernel&lt;/code&gt;可以将其统一管理！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/95d6d6a51a757c21cdc3108e12d16d0320161225135202.gif&#34; alt=&#34;mmc_sd_sdio_history&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;：强调的是多媒体存储（MM：MultiMedia）&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SD&lt;/code&gt;：强调的是安全数据（SD：Secure Digital）&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SDIO&lt;/code&gt;：强调的是IO接口(IO：Input/Output)&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;更多干货可见：&lt;a href=&#34;https://t.zsxq.com/0eUcTOhdO&#34;&gt;高级工程师聚集地&lt;/a&gt;，助力大家更上一层楼！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3总线接口&#34;&gt;&#xA;  3、总线接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%80%bb%e7%ba%bf%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;其物理接口也十分相似，我们以&lt;code&gt;MMC&lt;/code&gt;为例进行分析。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/4ca87abb20c96c2362ed22855c0fb89a20161225135205.gif&#34; alt=&#34;Card Concept(eMMC)&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们的&lt;code&gt;MMC&lt;/code&gt;卡如上图所示，内部我们不展开分析，直接将其作为一个完整的设备来分析。&lt;/p&gt;&#xA;&lt;p&gt;其通过&lt;code&gt;CLK&lt;/code&gt;、&lt;code&gt;CMD&lt;/code&gt;、&lt;code&gt;DATA&lt;/code&gt;等管脚与我们的&lt;code&gt;SOC&lt;/code&gt;通信，两者之间当然少不了&lt;code&gt;Controller&lt;/code&gt;了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/fbcc70f4593e41a6f96a28c4667a9c3420161225135203.gif&#34; alt=&#34;mmc_sd_sdio_hw_block&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;把通信总线部分，拿出来看&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20240103073934443.png&#34; alt=&#34;image-20240103073934443&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;CLK&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的通信时钟，常用的通信频率为&lt;code&gt;400KHz&lt;/code&gt;（识卡）、&lt;code&gt;25MHz&lt;/code&gt;，&lt;code&gt;50MHz&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的通信命令，标识不同的命令编号，类型多达50多种。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DATA&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的数据通信，其通信总线有8根，可自定义设置，一般默认的是1-bit (默认)模式、4-bit模式和8-bit模式。当然数据线越多，传输越快嘛，但是处理起来也稍微繁琐。&lt;/p&gt;&#xA;&lt;p&gt;除了上面的一些管脚，当然还少不了&lt;code&gt;VCC&lt;/code&gt;、&lt;code&gt;GND&lt;/code&gt;等管脚喽，与其它外设不同的是，&lt;code&gt;MMC&lt;/code&gt;类的设备，还会有一个检测引脚&lt;code&gt;DET&lt;/code&gt;，用于检测是否存在卡设备（热插拔）。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;好啦，上面我们对&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;进行简单了解，也知道了通信的常用方式与物理接口，当然其最核心在于通信的协议啦！由于协议过于复杂，我们放到后面了解。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4参考文章&#34;&gt;&#xA;  4、参考文章&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[1]：&lt;a href=&#34;http://www.wowotech.net/basic_tech/mmc_sd_sdio_intro.html&#34;&gt;http://www.wowotech.net/basic_tech/mmc_sd_sdio_intro.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】一、打造全网最详细的Bluetooth开发教程</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%B8%80%E6%89%93%E9%80%A0%E5%85%A8%E7%BD%91%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84bluetooth%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/</link>
      <pubDate>Fri, 19 Jan 2024 20:59:43 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%B8%80%E6%89%93%E9%80%A0%E5%85%A8%E7%BD%91%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84bluetooth%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;bluetooth蓝牙开发一开篇词--打造全网最详细的bluetooth开发教程&#34;&gt;&#xA;  【Bluetooth|蓝牙开发】一、开篇词 | 打造全网最详细的Bluetooth开发教程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bluetooth%e8%93%9d%e7%89%99%e5%bc%80%e5%8f%91%e4%b8%80%e5%bc%80%e7%af%87%e8%af%8d--%e6%89%93%e9%80%a0%e5%85%a8%e7%bd%91%e6%9c%80%e8%af%a6%e7%bb%86%e7%9a%84bluetooth%e5%bc%80%e5%8f%91%e6%95%99%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;大家好，我是董哥！&lt;/p&gt;&#xA;&lt;p&gt;随着物联网技术的快速发展，&lt;code&gt;WiFi&lt;/code&gt;、蓝牙成了物联网通信主力军，但是不得不说，这两个技术的门槛还是比较高的，尤其是蓝牙，单单其官方文档，就有将近&lt;code&gt;3000Page&lt;/code&gt;，让人望而生畏！&lt;/p&gt;&#xA;&lt;p&gt;纵观全网，蓝牙技术的学习有三大难点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;其一：学习资料之杂&lt;/li&gt;&#xA;&lt;li&gt;其二：极少有系统学习蓝牙的文章&lt;/li&gt;&#xA;&lt;li&gt;其三：蓝牙协议晦涩难懂&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这样就导致了蓝牙学习成本之高，劝退人数之多。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;因此，为了让初学者快速上手并且掌握蓝牙开发相关技术，我也根据自己的开发经验，精心打造了这一期专栏，主要目的是可以帮助大家零基础入门蓝牙开发，并且可以创建一个交流平台，以供大家交流！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;本专栏从四个大方面来学习蓝牙技术：蓝牙基础知识，蓝牙协议栈，蓝牙调试方法，蓝牙应用。我也一定会尽最大努力，帮助大家快速敲开蓝牙开发的大门。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2蓝牙综合介绍&#34;&gt;&#xA;  2、蓝牙综合介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e8%93%9d%e7%89%99%e7%bb%bc%e5%90%88%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;下面我们看一下零基础入门蓝牙开发的学习步骤，希望能够帮助到大家！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202209252116124.png&#34; alt=&#34;Bluetooth协议及配网应用&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3精华文章汇总&#34;&gt;&#xA;  3、精华文章汇总&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e7%b2%be%e5%8d%8e%e6%96%87%e7%ab%a0%e6%b1%87%e6%80%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;==&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;为了方便大家快速找到文章，这里按照学习流程进行汇总，点击即可访问！&lt;/strong&gt;&lt;/span&gt;==&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;章节&lt;/th&gt;&#xA;          &lt;th&gt;内容&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1、开篇词&lt;/td&gt;&#xA;          &lt;td&gt;1. 文章总览&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/124679579&#34;&gt;2、蓝牙开发入门&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.1 蓝牙基本概念&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.2 蓝牙发展历程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.3 常见蓝牙架构&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/125276394&#34;&gt;3. 蓝牙协议栈总览&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.1 从两个视角，了解蓝牙协议栈&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/125545973&#34;&gt;4. 蓝牙协议栈——物理层&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.1 物理层的划分&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/125546196&#34;&gt;5. 蓝牙协议栈——链路层&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.1 链路层状态、角色定义&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.2 空中接口数据包格式，字段分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/126026608&#34;&gt;6. 蓝牙协议栈——传输层&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.1 HCI接口功能介绍&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.2 HCI层包的格式，字段分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/126697667&#34;&gt;7. 蓝牙协议栈——L2CAP协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.1 L2CAP协议作用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.2 L2CAP协议包的格式，字段分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/126775901&#34;&gt;8. 蓝牙协议栈——ATT协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.1 ATT协议作用及由来&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.2 ATT数据结构&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.3 ATT协议的数据包格式，字段分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/126840421&#34;&gt;9. 蓝牙协议栈——GATT协议&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.1 GATT的作用&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.2 GATT协议框架&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/126660977&#34;&gt;10. 蓝牙通信流程分析&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9.1 蓝牙初始化流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9.2 蓝牙广播流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9.3 蓝牙扫描流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9.4 蓝牙建立连接流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9.5 蓝牙数据交互流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9.6 蓝牙断开流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;11. 蓝牙协议栈——Bluez交叉编译&lt;/td&gt;&#xA;          &lt;td&gt;10.1 Glib、Zlib、D-Bus、ncurses、readline、bluez&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/125071198&#34;&gt;12. 蓝牙调试工具汇总&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;11.1 hciconfig&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;11.2 hcitool&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;11.3 hcidump&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;11.4 hciattach&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;11.5 btmon&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;11.6 bluetoothd&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;11.7 bluetoothctl&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;4结语&#34;&gt;&#xA;  4、结语&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e7%bb%93%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;以上，为目前&lt;code&gt;Bluetooth&lt;/code&gt;所汇总的文章，每一篇都是精心打磨的文章，并且后续会继续补充蓝牙开发相关内容，期待大家关注！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】一、开篇词|Linux驱动开发新手必读</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%80linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%96%B0%E6%89%8B%E5%BF%85%E8%AF%BB/</link>
      <pubDate>Fri, 19 Jan 2024 20:26:20 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%80linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%96%B0%E6%89%8B%E5%BF%85%E8%AF%BB/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析一开篇词linux驱动开发新手必读&#34;&gt;&#xA;  【LED子系统深度剖析】一、开篇词|Linux驱动开发新手必读&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e4%b8%80%e5%bc%80%e7%af%87%e8%af%8dlinux%e9%a9%b1%e5%8a%a8%e5%bc%80%e5%8f%91%e6%96%b0%e6%89%8b%e5%bf%85%e8%af%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;大家好，我是董哥！&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;俗话说：“万丈高楼平地起”，对于我们刚学习&lt;code&gt;Linux驱动开发&lt;/code&gt;的小伙伴，&lt;code&gt;Linux驱动开发&lt;/code&gt;的基础至关重要，无论我们是学习&lt;code&gt;51单片机&lt;/code&gt;、&lt;code&gt;STM32&lt;/code&gt;还是&lt;code&gt;ARM&lt;/code&gt;，点灯的地位还是毋庸置疑的&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;驱动开发的学习过程中，点灯对于大多数人来说，对着教程照葫芦画瓢，还是能快速点亮一颗&lt;code&gt;LED&lt;/code&gt;灯的，但是你真的明白，一颗小小&lt;code&gt;LED&lt;/code&gt;灯的背后，到底执行了哪些动作吗，&lt;code&gt;Linux&lt;/code&gt;内核是如何管理的呢？&lt;/p&gt;&#xA;&lt;p&gt;今天，作为在芯片原厂工作的我，有义务带着大家，深入扒一扒&lt;code&gt;LED子系统&lt;/code&gt;的工作原理！&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;总结系列文章，花费时间较长，希望大家尊重原创！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;2led子系统开发详细介绍&#34;&gt;&#xA;  2、LED子系统开发详细介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2led%e5%ad%90%e7%b3%bb%e7%bb%9f%e5%bc%80%e5%8f%91%e8%af%a6%e7%bb%86%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;该系列文章整体预览如下&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230510203433338.png&#34; alt=&#34;image-20230510203433338&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3led子系统开发文章汇总&#34;&gt;&#xA;  3、LED子系统开发文章汇总&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3led%e5%ad%90%e7%b3%bb%e7%bb%9f%e5%bc%80%e5%8f%91%e6%96%87%e7%ab%a0%e6%b1%87%e6%80%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;为了方便大家快速找到文章，这里按照学习流程进行汇总，点击即可访问！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;章节&lt;/th&gt;&#xA;          &lt;th&gt;内容&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1、开篇词&lt;/td&gt;&#xA;          &lt;td&gt;1. 文章总览&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/129829082&#34;&gt;2、LED子系统框架分析&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.1 裸机处理&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.2 LED子系统框架&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.3 目录结构及核心文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130313894&#34;&gt;3、硬件驱动层详解&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.1 gpio_led_probe分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.2 gpio_leds_create分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.3 create_gpio_led分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.4 数据结构之间的关系，以及实现流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130614003&#34;&gt;4、核心层——led-class.c详解&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.1 leds_init分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.2 leds_class_dev_pm_ops分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.3 led_groups分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.4 led class的注册注销分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130676685&#34;&gt;5、核心层——led-core.c详解&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.1 led_init_core分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.2 led_timer_function分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.3 set_brightness_delayed分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.4 代码实现流程分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130758864&#34;&gt;6、核心层——led-triggers.c详解&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.1 触发器设置相关函数分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.2 触发器注册注销函数分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.3 闪烁功能相关函数分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.4 调用流程分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130819157&#34;&gt;7、触发器的实现&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.1 触发器介绍&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.2 heartbeat触发器的注册注销流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.3 heartbeat触发器相关定义和实现&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130895232&#34;&gt;8、LED子系统——小试牛刀&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.1 硬件管脚确定&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.2 设备树配置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.3 子系统配置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.4 编译烧录&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.5 验证&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130920920&#34;&gt;9、数据结构详解（番外篇）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9.1 核心数据结构图&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130942729&#34;&gt;10、详细实现流程汇总（番外篇）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;10.1 LED驱动匹配&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;10.2 读写流程详解&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;4结语&#34;&gt;&#xA;  4、结语&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e7%bb%93%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;以上，为&lt;code&gt;LED&lt;/code&gt;子系统深入探究的所有文章，每一篇都是精心打磨的文章，以此奉给那些刚开始学习&lt;code&gt;Linux&lt;/code&gt;驱动开发的入门者，同时也期待大家多多关注，支持！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】一、内核锁的由来</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%80%E5%86%85%E6%A0%B8%E9%94%81%E7%9A%84%E7%94%B1%E6%9D%A5/</link>
      <pubDate>Thu, 18 Jan 2024 23:01:55 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%80%E5%86%85%E6%A0%B8%E9%94%81%E7%9A%84%E7%94%B1%E6%9D%A5/</guid>
      <description>&lt;h1 id=&#34;深入理解linux锁机制一内核锁的由来&#34;&gt;&#xA;  【深入理解Linux锁机制】一、内核锁的由来&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3linux%e9%94%81%e6%9c%ba%e5%88%b6%e4%b8%80%e5%86%85%e6%a0%b8%e9%94%81%e7%9a%84%e7%94%b1%e6%9d%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/11385343fbf2b2115357580754c47b340dd78ecb.jpeg@f_auto&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;设备驱动中，我们必须要解决的一个问题是：&lt;strong&gt;多个进程对共享资源的并发访问，并发的访问会导致竞态。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1并发和竞态&#34;&gt;&#xA;  1、并发和竞态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%b9%b6%e5%8f%91%e5%92%8c%e7%ab%9e%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;并发&lt;code&gt;（Concurrency）&lt;/code&gt;：指的是多个执行单元同时、并行的被执行。&lt;/p&gt;&#xA;&lt;p&gt;竞态&lt;code&gt;（RaceConditions）&lt;/code&gt;：并发执行的单元对共享资源的访问，容易导致竞态。&lt;/p&gt;&#xA;&lt;p&gt;共享资源：硬件资源和软件上的全局变量、静态变量等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;解决竞态的途径是：保证对共享资源的互斥访问。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;互斥访问：一个执行单元在访问共享资源的时候，其他执行单元被禁止访问。&lt;/p&gt;&#xA;&lt;p&gt;临界区&lt;code&gt;（Critical Sections）&lt;/code&gt;：访问共享资源的代码区域成为临界区。临界区需要以某种互斥机制加以保护。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见的互斥机制包括&lt;/strong&gt;：中断屏蔽，原子操作，自旋锁，信号量，互斥体等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230718074758776.png&#34; alt=&#34;image-20230718074758776&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2竞态发生的场合&#34;&gt;&#xA;  2、竞态发生的场合&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e7%ab%9e%e6%80%81%e5%8f%91%e7%94%9f%e7%9a%84%e5%9c%ba%e5%90%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230721075844712.png&#34; alt=&#34;image-20230721075844712&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-多对称处理器smp的多个cpu之间&#34;&gt;&#xA;  2.1 多对称处理器（SMP）的多个CPU之间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e5%a4%9a%e5%af%b9%e7%a7%b0%e5%a4%84%e7%90%86%e5%99%a8smp%e7%9a%84%e5%a4%9a%e4%b8%aacpu%e4%b9%8b%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;多个CPU使用共同的系统总线，可以访问共同的外设和存储器。在&lt;code&gt;SMP&lt;/code&gt;的情况下，多核&lt;code&gt;（CPU0、CPU1）&lt;/code&gt;的竞态可能发生于：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CPU0&lt;/code&gt;的进程和&lt;code&gt;CPU1&lt;/code&gt;的进程之间&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CPU0&lt;/code&gt;的进程和&lt;code&gt;CPU1&lt;/code&gt;的中断之间&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CPU0&lt;/code&gt;的中断和&lt;code&gt;CPU1&lt;/code&gt;的中断之间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-单cpu内该进程与抢占它的进程之间&#34;&gt;&#xA;  2.2 单CPU内，该进程与抢占它的进程之间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%8d%95cpu%e5%86%85%e8%af%a5%e8%bf%9b%e7%a8%8b%e4%b8%8e%e6%8a%a2%e5%8d%a0%e5%ae%83%e7%9a%84%e8%bf%9b%e7%a8%8b%e4%b9%8b%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在单CPU内，多个进程并发执行，当一个进程执行的时间片耗尽，也有可能被另一个高优先级进程打断，会发生竞态，即所谓的调度引发竞态。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;23-中断软中断硬中断tasklet底半部与进程之间&#34;&gt;&#xA;  2.3 中断（软中断、硬中断、Tasklet、底半部）与进程之间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e4%b8%ad%e6%96%ad%e8%bd%af%e4%b8%ad%e6%96%ad%e7%a1%ac%e4%b8%ad%e6%96%adtasklet%e5%ba%95%e5%8d%8a%e9%83%a8%e4%b8%8e%e8%bf%9b%e7%a8%8b%e4%b9%8b%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;当一个进程正在执行，一个外部/内部中断（软中断、硬中断、Tasklet等）将其打断，会导致竞态发生。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3编译乱序和执行乱序&#34;&gt;&#xA;  3、编译乱序和执行乱序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e7%bc%96%e8%af%91%e4%b9%b1%e5%ba%8f%e5%92%8c%e6%89%a7%e8%a1%8c%e4%b9%b1%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;除了并发访问导致的竞态外，还需要了解编译器和处理器的一些特点所引发的一些问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;31-编译乱序&#34;&gt;&#xA;  3.1 编译乱序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e7%bc%96%e8%af%91%e4%b9%b1%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;现代的高性能编译器，为了提高Cache命中率以及CPU的Load/Store工作效率，会对目标代码进行乱序优化，减少逻辑上不必要的访存！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;因此，在打开编译器优化后，生成的汇编码并没有严格按照代码的逻辑顺序执行，这是正常的。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;为了解决编译乱序的问题，可以加入&lt;code&gt;barrier()&lt;/code&gt;编译屏障&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;顾名思义，编译屏障，也就是为了阻挡编译器的编译优化，加入&lt;code&gt;barrier()&lt;/code&gt;编译屏障，即可保证正确的执行顺序。&lt;/p&gt;&#xA;&lt;p&gt;编译屏障代码实现如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define barrier() __asm__ __volatile__(&amp;#34;&amp;#34;: : :&amp;#34;memory&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里详细解释一下&lt;code&gt;barrier&lt;/code&gt;的汇编实现：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;__asm__&lt;/code&gt;：向编译器说明在此插入汇编代码&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;__volatile__&lt;/code&gt;：用于告诉编译器，严禁将此处的汇编语句与其它的语句重组合优化。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;(&amp;quot;&amp;quot;: : :&amp;quot;memory&amp;quot;)&lt;/code&gt;：一条汇编语句，第一个&lt;code&gt;:&lt;/code&gt;前为汇编指令，这里是空操作；第二个&lt;code&gt;:&lt;/code&gt;前表示输出操作数，为空；第三个冒号前为输入操作数，也是要修改的寄存器；最后&lt;code&gt;memory&lt;/code&gt;表示该指令对内存进行访问，该指令确保了命令之前的内存操作需要完全执行，不被优化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;使用案例&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【NVMEM子系统深入剖析】一、Efuse介绍及安全启动浅析</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_nvmem_subsystem/nvmem%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%B8%80efuse%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E5%85%A8%E5%90%AF%E5%8A%A8%E6%B5%85%E6%9E%90/</link>
      <pubDate>Thu, 18 Jan 2024 22:27:35 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_nvmem_subsystem/nvmem%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%B8%80efuse%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E5%85%A8%E5%90%AF%E5%8A%A8%E6%B5%85%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;nvmem子系统深入剖析一efuse介绍及安全启动浅析&#34;&gt;&#xA;  【NVMEM子系统深入剖析】一、Efuse介绍及安全启动浅析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nvmem%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%85%a5%e5%89%96%e6%9e%90%e4%b8%80efuse%e4%bb%8b%e7%bb%8d%e5%8f%8a%e5%ae%89%e5%85%a8%e5%90%af%e5%8a%a8%e6%b5%85%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1efuse是什么&#34;&gt;&#xA;  1、Efuse是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1efuse%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;eFuse(electronic fuse)&lt;/code&gt;：电子保险丝，熔丝性的一种器件，属于&lt;strong&gt;一次性可编程存储器&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;之所以成为&lt;code&gt;eFuse&lt;/code&gt;，因为其原理像电子保险丝一样，&lt;code&gt;CPU&lt;/code&gt;出厂后，这片&lt;code&gt;eFuse&lt;/code&gt;空间内所有比特全为1，如果向一位比特写入0，那么就彻底烧死这个比特了，再也无法改变它的值，也就是再也回不去 1 了。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;一般&lt;code&gt;OEM&lt;/code&gt;从&lt;code&gt;CPU&lt;/code&gt;厂商购买芯片后，一般都要烧写&lt;code&gt;eFuse&lt;/code&gt;，用于标识自己公司的版本信息，运行模式等相关信息。&lt;/p&gt;&#xA;&lt;p&gt;同时，由于其&lt;strong&gt;一次性编程&lt;/strong&gt;的特性，我们又将其用在&lt;code&gt;Secure Boot&lt;/code&gt;安全启动中。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2otp是什么&#34;&gt;&#xA;  2、OTP是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2otp%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;了解完&lt;code&gt;eFuse&lt;/code&gt;后，我们就顺便了解一下&lt;code&gt;OTP&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;OTP(One Time Programmable)&lt;/code&gt;是反熔丝的一种器件，就是说，当&lt;code&gt;OTP&lt;/code&gt;存储单元未击穿时，它的逻辑状态为&lt;code&gt;0&lt;/code&gt;；当击穿时，它的逻辑状态为&lt;code&gt;1&lt;/code&gt;，也属于&lt;strong&gt;一次性可编程存储器&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;它的物理状态和逻辑状态正好和&lt;code&gt;eFuse&lt;/code&gt;相反！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/abd0b273ba06e74bf7e75322b813dfe1.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;两者区别如下&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;从成本上讲，&lt;code&gt;eFuse&lt;/code&gt;器件基本上是各个&lt;code&gt;Foundry&lt;/code&gt;厂自己提供，因此通常意味着免费或者很少的费用，而&lt;code&gt;OTP&lt;/code&gt;器件则通常是第三方&lt;code&gt;IP&lt;/code&gt;厂家提供，这就要收费。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;从器件面积上讲，eFuse的cell的面积更大，所以仅仅有小容量的器件可以考虑。当然如果需要大容量的，也可以多个eFuse Macro拼接，但是这意味着芯片面积的增加，成本也会增加；OTP的cell面积很小，所有相对来讲，可以提供更大容量的Macro可供使用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;OTP&lt;/code&gt; 比 &lt;code&gt;eFuse&lt;/code&gt; 安全性更好，&lt;code&gt;eFuse&lt;/code&gt;的编程位可以通过电子显微镜看到，因此其存储的内容可以被轻易破解，但&lt;code&gt;OTP&lt;/code&gt;在显微镜下无法区分编程位和未编程位，因此无法读取数据。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;eFuse&lt;/code&gt;默认导通，存储的是&amp;quot;1&amp;quot;，而&lt;code&gt;OTP&lt;/code&gt;默认是断开，存储的是&amp;quot;0&amp;quot;，因此&lt;code&gt;OTP&lt;/code&gt;的功耗也较&lt;code&gt;eFuse&lt;/code&gt;小，面积也较&lt;code&gt;eFuse&lt;/code&gt;小。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3什么是secure-boot&#34;&gt;&#xA;  3、什么是Secure Boot&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e4%bb%80%e4%b9%88%e6%98%afsecure-boot&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上面我们也了解过了，&lt;code&gt;efuse&lt;/code&gt;主要用于记录一些&lt;code&gt;OEM&lt;/code&gt;的产品信息，并且也会用于安全启动，那么安全启动是什么，为什么要做安全启动？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;安全启动&lt;code&gt;Secure Boot&lt;/code&gt;，其主要目的是：&lt;strong&gt;以限制消费者能力，防止消费者从软硬件层面，对产品的部分关键系统进行读写，调试等高级权限，达到对产品的商业保密，知识产权的保护。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全启动的安全模型是建立在消费者是攻击者的假设之上&lt;/strong&gt;，一般常见的操作有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;刷机安装自定义的操作系统&lt;/li&gt;&#xA;&lt;li&gt;绕过厂家封闭的支付平台&lt;/li&gt;&#xA;&lt;li&gt;绕过系统保护，复制厂家保护的数字产品。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;除此之外呢，有的比较专业的消费者，还可以&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用数字示波器监听 &lt;code&gt;CPU&lt;/code&gt; 和 &lt;code&gt;RAM&lt;/code&gt; 、&lt;code&gt;eMMC&lt;/code&gt; 之间的数据传输来读取非常底层的数据传输&lt;/li&gt;&#xA;&lt;li&gt;而且像 &lt;code&gt;eMMC&lt;/code&gt; 这种芯片通常都是业界标准化的，攻击者甚至可以把芯片拆下来，然后用市面上现成的通用 &lt;code&gt;eMMC&lt;/code&gt; 编程工具来读写上面的内容。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-8f198e2693ecd4de2230f6b811c4dc52_720w.webp&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;安全启动等级也有一个上限：这个上限通常是认为攻击者不至于能够剥离芯片的封装，然后用电子显微镜等纳米级别精度的显像设备来逆向芯片的内部结构。&lt;/p&gt;&#xA;&lt;p&gt;简单来说：&lt;strong&gt;能成功攻破芯片安全机制的一次性投资成本至少需要在十万美元以上才可以认为是安全的。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4cpu内部安全机制&#34;&gt;&#xA;  4、CPU内部安全机制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4cpu%e5%86%85%e9%83%a8%e5%ae%89%e5%85%a8%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-d34291945629ea974d0254936616e541_720w.webp&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;41-bootrom&#34;&gt;&#xA;  4.1 bootROM&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-bootrom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;BootROM&lt;/code&gt;是集成在&lt;code&gt;CPU&lt;/code&gt;芯片的一个&lt;code&gt;ROM&lt;/code&gt;空间，其主要用于存放一小段可执行程序，出厂的时候被烧录进去写死，不可修改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一、内存管理的由来及思想</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E4%B8%80%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E7%94%B1%E6%9D%A5%E5%8F%8A%E6%80%9D%E6%83%B3/</link>
      <pubDate>Wed, 17 Jan 2024 21:09:41 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E4%B8%80%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E7%94%B1%E6%9D%A5%E5%8F%8A%E6%80%9D%E6%83%B3/</guid>
      <description>&lt;h1 id=&#34;linux内存管理--一内存管理的由来及思想&#34;&gt;&#xA;  Linux内存管理 | 一、内存管理的由来及思想&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86--%e4%b8%80%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86%e7%9a%84%e7%94%b1%e6%9d%a5%e5%8f%8a%e6%80%9d%e6%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;《中庸》有：“九层之台，起于垒土” 之说，那么对于我们搞技术的人，同样如此！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;对于&lt;code&gt;Linux&lt;/code&gt;内存管理，你可以说没有留意过，但是它存在于我们日常开发的方方面面，你所打开的文件，你所创建的变量，你所运行的程序，无不以此为基础，它可以说是操作系统的基石；只是底层被封装的太好了，以至于我们在做开发的过程中，不需要关心的太多，哪有什么岁月静好，只是有人在负重前行罢了。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;虽然日常开发中涉及的比较少，但是作为一个合格的&lt;code&gt;Linux&lt;/code&gt;开发者，搞懂内存管理，又显得至关重要，同时也会对嵌入式开发大有脾益，今天我们就来详细聊聊内存管理的那点事。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;该方面的文章，网上也有很多写的非常不错，但是100个人有100种理解方式，并且不同的人，基础不同，理解能力也不同，所以我写这系列的文章，也更有了意义。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2内存管理的由来&#34;&gt;&#xA;  2、内存管理的由来&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86%e7%9a%84%e7%94%b1%e6%9d%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;为什么要有这个概念呢？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;首先，内存管理，管理的是个什么东西？&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;管理的其实是我们的物理内存，也就是我们的&lt;code&gt;RAM&lt;/code&gt;空间，在电脑上，表现为我们安装的内存条，有的人装个&lt;code&gt;4G&lt;/code&gt;的、&lt;code&gt;8G&lt;/code&gt;的、甚至&lt;code&gt;64G&lt;/code&gt;的，这些就是实打实的物理空间大小，也就是我们的实际的硬件资源。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/u=3890072658,3990799507&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;为什么要进行管理？&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;做嵌入式的都知道，像我们刚开始玩的&lt;code&gt;C51&lt;/code&gt;单片机、&lt;code&gt;STM32&lt;/code&gt;单片机，我们将程序烧录到&lt;code&gt;Flash&lt;/code&gt;中后，开机启动后，然后&lt;code&gt;CPU&lt;/code&gt;会将&lt;code&gt;Flash&lt;/code&gt;程序加载到&lt;code&gt;RAM&lt;/code&gt;中，也就是我们的物理内存，随后我们的所有操作都是基于这一个物理内存所进行的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/019f1f0d2d30469cbda2b8fe2cf5e622.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;那么此时&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;我们想再次运行一个一模一样的程序怎么办？&lt;/li&gt;&#xA;&lt;li&gt;即使运行了，那两个程序同时操作了同一个变量，值被错误修改了怎么办？&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这些就是&lt;code&gt;Linux&lt;/code&gt;内存管理要做的事情。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;顺便介绍一下 我的圈子：&lt;a href=&#34;https://t.zsxq.com/0eUcTOhdO&#34;&gt;高级工程师聚集地&lt;/a&gt;，期待大家的加入。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;3linux内存管理思想&#34;&gt;&#xA;  3、Linux内存管理思想&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3linux%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86%e6%80%9d%e6%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;为了解决上面的一些问题，&lt;code&gt;Linux&lt;/code&gt;采用虚拟内存管理技术。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;Linux&lt;/code&gt;操作系统抽象出来一个&lt;strong&gt;虚拟地址空间&lt;/strong&gt;的概念，供上层用户使用，这么做的目的是为了让多个用户进程，都以为自己独享了内存空间。&lt;/li&gt;&#xA;&lt;li&gt;而虚拟地址空间与物理地址空间的对应关系，就交给了一个&lt;code&gt;MMU(Memory Managerment Unit)&lt;/code&gt;的家伙来管理，其主要负责将虚拟内存空间映射到真实的物理地址空间。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/72ab76ba697e470b8ceb14d5fc5688d9.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;这么做的主要目的在于：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;让每个进程都拥有相同大小的虚拟地址空间&lt;/li&gt;&#xA;&lt;li&gt;避免用户直接访问物理内存，导致系统崩溃&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这样，我们同时执行多个进程，虽然看起来虚拟地址操作都是相同的，但是通过&lt;code&gt;MMU&lt;/code&gt;之后，就被映射到了不同的物理地址空间，这样就解决了以上的问题。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4总结&#34;&gt;&#xA;  4、总结&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e6%80%bb%e7%bb%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;熟悉了内存管理由来以及其思想，我们可以看出，操作系统的内存管理，主要分为以下几个方面：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;虚拟内存空间管理&lt;/strong&gt;：我们抽象出来的虚拟地址空间，该怎么使用，该怎么管理？&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;物理内存空间管理&lt;/strong&gt;：虚拟地址映射到物理内存空间后，该如何管理，如何分配？&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;如何映射&lt;/strong&gt;：虚拟内存如何映射到物理内存，是怎么操作的，映射方法有哪些？&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;下面我们来一一详细探究。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Ftrace系统调试工具使用终极指南</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82ftrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 13 Dec 2023 21:56:32 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82ftrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h1 id=&#34;一文秒懂ftrace系统调试工具使用终极指南&#34;&gt;&#xA;  【一文秒懂】Ftrace系统调试工具使用终极指南&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82ftrace%e7%b3%bb%e7%bb%9f%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7%e4%bd%bf%e7%94%a8%e7%bb%88%e6%9e%81%e6%8c%87%e5%8d%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1ftrace是什么&#34;&gt;&#xA;  1、Ftrace是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1ftrace%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;是&lt;code&gt;Function Trace&lt;/code&gt;的简写，由 &lt;code&gt;Steven Rostedt&lt;/code&gt; 开发的，从 2008 年发布的内核 2.6.27 中开始就内置了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;是一个系统内部提供的追踪工具，旨在帮助内核设计和开发人员去追踪系统内部的函数调用流程。&lt;/p&gt;&#xA;&lt;p&gt;随着&lt;code&gt;Ftrace&lt;/code&gt;的不断完善，除了追踪函数调用流程外，还可以用来调试和分析系统的延迟和性能问题，并发展成为一个追踪类调试工具的框架。&lt;/p&gt;&#xA;&lt;p&gt;除了&lt;code&gt;Ftrace&lt;/code&gt;外，追踪类调试工具还包括：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://tinylab.org/wp-content/uploads/2016/10//tracing.jpg&#34; alt=&#34;Tracing overview&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2ftrace的实现原理&#34;&gt;&#xA;  2、Ftrace的实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2ftrace%e7%9a%84%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;为了帮助我们更好的使用&lt;code&gt;Ftrace&lt;/code&gt;，我们有必要简单了解&lt;code&gt;Ftrace&lt;/code&gt;的实现原理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-ftrace框架图&#34;&gt;&#xA;  2.1 Ftrace框架图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-ftrace%e6%a1%86%e6%9e%b6%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;的框架图如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/eb77832145c246c99848330e16448451.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;由框架图我们可以知道：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ftrace&lt;/code&gt;包括多种类型的&lt;code&gt;tracers&lt;/code&gt;，每个&lt;code&gt;tracer&lt;/code&gt;完成不同的功能&lt;/li&gt;&#xA;&lt;li&gt;将这些不同类型的&lt;code&gt;tracers&lt;/code&gt;注册进入&lt;code&gt;ftrace framework&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;各类&lt;code&gt;tracers&lt;/code&gt;收集不同的信息，并放入到&lt;code&gt;Ring buffer&lt;/code&gt;缓冲区以供调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-ftrace是如何记录信息的&#34;&gt;&#xA;  2.2 Ftrace是如何记录信息的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-ftrace%e6%98%af%e5%a6%82%e4%bd%95%e8%ae%b0%e5%bd%95%e4%bf%a1%e6%81%af%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;采用了静态插桩和动态插桩两种方式来实现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;静态插桩&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;我们在&lt;code&gt;Kernel&lt;/code&gt;中打开了&lt;code&gt;CONFIG_FUNCTION_TRACER&lt;/code&gt;功能后，会增加一个&lt;code&gt;-pg&lt;/code&gt;的一个编译选项，这个编译选项的作用就是为每个函数入口处，都会插入&lt;code&gt;bl mcount&lt;/code&gt;跳转指令，使得每个函数运行时都会进入&lt;code&gt;mcount&lt;/code&gt;函数。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;一旦使能，对&lt;code&gt;kernel&lt;/code&gt;中所有的函数插桩，这带来的性能开销是惊人的，有可能导致人们弃用&lt;code&gt;Ftrace&lt;/code&gt;功能。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;为了解决这个问题，开发者推出了&lt;code&gt;Dynamic ftrace&lt;/code&gt;，以此来优化整体的性能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;动态插桩&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里的动态，是指的动态修改函数指令。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;编译时，记录所有被添加跳转指令的函数，这里表示所有支持追踪的函数。&lt;/li&gt;&#xA;&lt;li&gt;内核将所有跳转指令替换为&lt;code&gt;nop&lt;/code&gt;指令，以实现非调试状态性能零损失。&lt;/li&gt;&#xA;&lt;li&gt;根据 &lt;code&gt;function tracer&lt;/code&gt; 设置，动态将被调试函数的&lt;code&gt;nop&lt;/code&gt;指令，替换为跳转指令，以实现追踪。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;总而言之，&lt;code&gt;Ftrace&lt;/code&gt;记录数据可以总结为以下几个步骤&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;打开编译选项&lt;code&gt;-pg&lt;/code&gt;，为每个函数都增加跳转指令&lt;/li&gt;&#xA;&lt;li&gt;记录这些可追踪的函数，并为了减少性能消耗，将跳转函数替换为&lt;code&gt;nop&lt;/code&gt;指令&lt;/li&gt;&#xA;&lt;li&gt;通过&lt;code&gt;flag&lt;/code&gt;标志位来动态管理，将需要追踪的函数预留的&lt;code&gt;nop&lt;/code&gt;指令替换回追踪指令，记录调试信息。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3如何使用ftrace&#34;&gt;&#xA;  3、如何使用Ftrace&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8ftrace&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-配置详解&#34;&gt;&#xA;  3.1 配置详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e9%85%8d%e7%bd%ae%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用了 Ftrace&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用函数级别的追踪器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FUNCTION_GRAPH_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持图形显示&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_GRAPH_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 以图形的方式显示函数追踪过程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_STACK_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用堆栈追踪器，用于跟踪内核函数调用的堆栈信息。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_DYNAMIC_FTRACE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用动态 Ftrace，允许在运行时启用和禁用 Ftrace 功能。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FTRACE_NMI_ENTER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持非屏蔽中断（NMI）时进入 Ftrace 的功能&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FTRACE_MCOUNT_RECORD&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持通过 mcount 记录函数调用关系。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_NMI_ENTER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y                   &lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持通过 mcount 记录函数调用关系。   &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_SYSCALLS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 系统调用的追踪&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_MCOUNT_RECORD&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用 mcount 记录函数调用关系。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_SCHED_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 支持调度追踪&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_PROFILER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用函数分析器，主要用于记录函数的执行时间和调用次数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_DEBUG_FS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用 Debug 文件系统支持&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;上面只是介绍了部分配置，更多详细配置可自行了解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Linux API 揭秘】module_init与module_exit</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_api/linux-api-%E6%8F%AD%E7%A7%98module_init%E4%B8%8Emodule_exit/</link>
      <pubDate>Wed, 22 Nov 2023 22:52:44 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_api/linux-api-%E6%8F%AD%E7%A7%98module_init%E4%B8%8Emodule_exit/</guid>
      <description>&lt;h1 id=&#34;linux-api-揭秘module_init与module_exit&#34;&gt;&#xA;  【Linux API 揭秘】module_init与module_exit&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux-api-%e6%8f%ad%e7%a7%98module_init%e4%b8%8emodule_exit&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Linux Version：6.6&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Author：Donge&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Github：&lt;a href=&#34;https://github.com/UNIONDONG/linux-api-insides&#34;&gt;linux-api-insides&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1函数作用&#34;&gt;&#xA;  1、函数作用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%87%bd%e6%95%b0%e4%bd%9c%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;module_init&lt;/code&gt;和&lt;code&gt;module_exit&lt;/code&gt;是驱动中最常用的两个接口，主要用来注册、注销设备驱动程序。&lt;/p&gt;&#xA;&lt;p&gt;并且这两个接口的实现机制是一样的，我们先以&lt;code&gt;module_init&lt;/code&gt;为切入点分析。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2module_init函数解析&#34;&gt;&#xA;  2、module_init函数解析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2module_init%e5%87%bd%e6%95%b0%e8%a7%a3%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-module_init&#34;&gt;&#xA;  2.1 module_init&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-module_init&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifndef MODULE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * module_init() - driver initialization entry point&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @x: function to be run at kernel boot time or module insertion&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * module_init() will either be called during do_initcalls() (if&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * builtin) or at module insertion time (if a module).  There can only&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * be one per module.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define module_init(x)&#x9;__initcall(x);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#else &lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* MODULE */&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Each module must use one module_init(). */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define module_init(initfn)&#x9;&#x9;&#x9;&#x9;&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;    static inline initcall_t __maybe_unused __inittest(void)&#x9;&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;    { return initfn; }&#x9;&#x9;&#x9;&#x9;&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;    int init_module(void) __copy(initfn)&#x9;&#x9;&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;        __attribute__((alias(#initfn)));&#x9;&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;    ___ADDRESSABLE(init_module, __initdata);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;函数名称&lt;/strong&gt;：&lt;code&gt;module_init&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>一、uboot基础了解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/uboot/%E4%B8%80uboot%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/</link>
      <pubDate>Fri, 17 Nov 2023 20:50:32 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/uboot/%E4%B8%80uboot%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;一uboot基础了解&#34;&gt;&#xA;  一、uboot基础了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80uboot%e5%9f%ba%e7%a1%80%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/974ad967a6b74a27888c66746ba1d04a.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-u-boot是什么&#34;&gt;&#xA;  1. U-boot是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-u-boot%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;U-Boot&lt;/code&gt;，全称 &lt;code&gt;Universal Boot Loader&lt;/code&gt;，是遵循GPL条款的从FADSROM、8xxROM、PPCBOOT逐步发展演化而来的 &lt;strong&gt;开放源码项目&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;U-boot&lt;/code&gt;，是一个主要用于嵌入式系统的引导加载程序，可以支持多种不同的计算机系统结构，其主要作用为：==&lt;strong&gt;引导系统的启动！&lt;/strong&gt;==目前，U-Boot不仅支持Linux系统的引导，还支持NetBSD, VxWorks, QNX, RTEMS, ARTOS, LynxOS, android等多种嵌入式操作系统。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-u-boot主要特性及功能&#34;&gt;&#xA;  2. U-boot主要特性及功能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-u-boot%e4%b8%bb%e8%a6%81%e7%89%b9%e6%80%a7%e5%8f%8a%e5%8a%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;开放&lt;/strong&gt;：开放的源代码&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;多平台&lt;/strong&gt;：支持多种嵌入式操作系统，如Linux、NetBSD、android等&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;生态&lt;/strong&gt;：有丰富的设备驱动源码，如以太网、SDRAM、LCD等，同时也具有丰富的开发文档。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-u-boot下载地址&#34;&gt;&#xA;  3. U-boot下载地址&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-u-boot%e4%b8%8b%e8%bd%bd%e5%9c%b0%e5%9d%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Uboot开发源码：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://source.denx.de/u-boot/u-boot&#34;&gt;https://source.denx.de/u-boot/u-boot&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ftp.denx.de/pub/u-boot/&#34;&gt;https://ftp.denx.de/pub/u-boot/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;其他厂商定制的uboot源码：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Embedfire/ebf_products/tree/master/documentation&#34;&gt;野火&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4-u-boot目录结构&#34;&gt;&#xA;  4. U-boot目录结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-u-boot%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;目录&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;arch&lt;/td&gt;&#xA;          &lt;td&gt;各个厂商的硬件信息，目录下包括支持的处理器类型&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;arch/arm/cpu/xxx&lt;/td&gt;&#xA;          &lt;td&gt;**每一个子文件夹，包含一种cpu系列。**每个子文件夹下包含cpu.c（CPU初始化），interrupts.c（设置中断和异常），start.S（U-boot的启动文件，早期的初始化）。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;board&lt;/td&gt;&#xA;          &lt;td&gt;与开发板有关，&lt;strong&gt;每一个子文件夹代表一个芯片厂家&lt;/strong&gt;，芯片厂家下，每一个子文件夹，表示一个开发板&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;common&lt;/td&gt;&#xA;          &lt;td&gt;存放与处理器体系无关的通用代码，可以说为&lt;strong&gt;通用核心代码！&lt;/strong&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cmd&lt;/td&gt;&#xA;          &lt;td&gt;存放uboot的相关命令实现部分&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;drivers&lt;/td&gt;&#xA;          &lt;td&gt;存放外围芯片驱动，网卡，USB等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;disk&lt;/td&gt;&#xA;          &lt;td&gt;存放驱动磁盘的分区处理代码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;fs&lt;/td&gt;&#xA;          &lt;td&gt;本目录下存放文件系统相关代码，&lt;strong&gt;每一个子文件夹表示文件系统&lt;/strong&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;net&lt;/td&gt;&#xA;          &lt;td&gt;网络协议相关代码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;doc&lt;/td&gt;&#xA;          &lt;td&gt;uboot说明文档&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;include&lt;/td&gt;&#xA;          &lt;td&gt;各种头文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;post&lt;/td&gt;&#xA;          &lt;td&gt;上电自检代码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;api&lt;/td&gt;&#xA;          &lt;td&gt;外部扩展程序的API和示例&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;tools&lt;/td&gt;&#xA;          &lt;td&gt;编译S-Record或者U-boot镜像的相关工具&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;5-如何编译uboot&#34;&gt;&#xA;  5. 如何编译Uboot&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e5%a6%82%e4%bd%95%e7%bc%96%e8%af%91uboot&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make ARCH&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm CROSS_COMPILE&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;gnueabihf&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; distclean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make ARCH&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm CORSS_COMPILE&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;gnueabihf&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; colibri&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;imx6ull_defconfig&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make V&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; ARCH&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm CROSS_COMPILE&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;linux&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;gnueabihf&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;j8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ARCH=arm&lt;/code&gt;：arm架构&lt;/p&gt;</description>
    </item>
    <item>
      <title>Soc的Bring Up流程</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/embeded_tech/embeded_interview/soc%E7%9A%84bringup%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/embeded_tech/embeded_interview/soc%E7%9A%84bringup%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;h2 id=&#34;1bring-up流程&#34;&gt;&#xA;  1、Bring Up流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1bring-up%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img2.baidu.com/it/u=1228692277,1647023594&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=PNG?w=681&amp;amp;h=294&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SOC (System on a Chip) bring-up&lt;/code&gt;是一个复杂的过程，涉及到硬件、固件和软件的集成和验证，以下是一个基于&lt;code&gt;BROM&lt;/code&gt;，&lt;code&gt;SPL&lt;/code&gt;，&lt;code&gt;UBOOT&lt;/code&gt;和&lt;code&gt;Linux&lt;/code&gt;的启动流程的概述：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;BROM (Boot Read-Only Memory)&lt;/code&gt;启动&lt;/strong&gt;：启动的最初阶段，在这个阶段，系统会执行芯片&lt;code&gt;ROM&lt;/code&gt;里面的代码，这部分代码主要用来检查启动模式，包括&lt;code&gt;NOR&lt;/code&gt;、&lt;code&gt;Nand&lt;/code&gt;、&lt;code&gt;Emmc&lt;/code&gt;等，然后从对应的存储介质中加载&lt;code&gt;SPL(Secondary Program Loader)&lt;/code&gt;代码。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;SPL (Secondary Program Loader)&lt;/code&gt;启动&lt;/strong&gt;：&lt;code&gt;SPL&lt;/code&gt;属于&lt;code&gt;Uboot&lt;/code&gt;的一部分，它的主要作用就是：&lt;strong&gt;初始化硬件并加载完整的&lt;code&gt;U-boot&lt;/code&gt;&lt;/strong&gt;，主要体现在初始化时钟、看门狗、&lt;code&gt;DDR&lt;/code&gt;、&lt;code&gt;GPIO&lt;/code&gt;以及存储外设，最后将&lt;code&gt;U-boot&lt;/code&gt;代码加载到&lt;code&gt;DDR&lt;/code&gt;中执行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;U-Boot&lt;/code&gt;启动&lt;/strong&gt;：&lt;code&gt;U-boot&lt;/code&gt;的主要作用是：引导加载&lt;code&gt;Kernel&lt;/code&gt;和&lt;code&gt;DTS&lt;/code&gt;。&lt;code&gt;U-boot&lt;/code&gt;在启动之后，同样初始化&lt;code&gt;Soc&lt;/code&gt;硬件资源，然后会计时等待，并执行默认的启动命令，将&lt;code&gt;Kernel&lt;/code&gt;和&lt;code&gt;DTS&lt;/code&gt;信息从存储介质中读取出来并加载到内存中执行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;Kernel&lt;/code&gt;启动&lt;/strong&gt;：在&lt;code&gt;U-Boot&lt;/code&gt;加载了内核映像和设备树之后，系统会启动&lt;code&gt;Linux&lt;/code&gt;。在这个阶段，系统会初始化各种硬件设备，加载驱动程序并启动用户空间应用程序。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;更多干货可见：&lt;a href=&#34;https://t.zsxq.com/0eUcTOhdO&#34;&gt;高级工程师聚集地&lt;/a&gt;，助力大家更上一层楼！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2常见问题&#34;&gt;&#xA;  2、常见问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img1.baidu.com/it/u=1356081243,31945078&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=852&amp;amp;h=500&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Q&lt;/code&gt;：为什么上一个阶段已经初始化了硬件资源，下一个阶段为何重复初始化？&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;A&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;每个阶段的硬件初始化，其目标和需求都不同，硬件配置也会不一样，因此在不同阶段进行不同的初始化。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;硬件状态可能会改变，在&lt;code&gt;SOC&lt;/code&gt;启动过程中，硬件状态可能会因为电源管理、时钟管理等原因而改变，这可能需要在每个阶段都重新初始化以确保其正确工作&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为了保证硬件资源的可靠性，最好每个阶段都重新初始化一次&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Q&lt;/code&gt;：&lt;code&gt;U-boot&lt;/code&gt;加载内核时，会进行重定位的操作，这一操作有何意义？&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;A&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;U-boot&lt;/code&gt;的重定位，主要作用是为了 &lt;strong&gt;给内核提供一个连续的、大的内存空间，供内核和其他应用程序使用&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;U-boot&lt;/code&gt;的加载过程分两个阶段，即：&lt;code&gt;SPL&lt;/code&gt;和&lt;code&gt;U-boot&lt;/code&gt;，&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在&lt;code&gt;SPL&lt;/code&gt;阶段，主要将&lt;code&gt;U-boot&lt;/code&gt;代码从&lt;code&gt;Flash&lt;/code&gt;中加载到&lt;code&gt;RAM&lt;/code&gt;指定位置&lt;/li&gt;&#xA;&lt;li&gt;在&lt;code&gt;U-boot&lt;/code&gt;阶段，&lt;code&gt;U-boot&lt;/code&gt;会将自身从&lt;code&gt;RAM&lt;/code&gt;的开始部分移动到&lt;code&gt;RAM&lt;/code&gt;的末尾，占用高地址空间，从而让低地址空间可以作为一个连续的，大的内存空间供内核和其他应用程序使用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Q&lt;/code&gt;：在&lt;code&gt;Bring Up&lt;/code&gt;中，为了保证启动时间，如何裁剪？&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;A&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;启动时间的裁剪是一个重要的步骤，其主要目标是缩短从电源打开到操作系统完全启动的时间。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;优化&lt;code&gt;Bootloader&lt;/code&gt;：减小&lt;code&gt;Bootloader&lt;/code&gt;的代码大小，减少硬件初始化（只初始化必要硬件设备）等&lt;/li&gt;&#xA;&lt;li&gt;优化&lt;code&gt;Kernel&lt;/code&gt;：减少启动服务数量，优化服务的启动顺序，使用预加载技术等方法来实现。&lt;/li&gt;&#xA;&lt;li&gt;使用快速启动模式：一些&lt;code&gt;SOC&lt;/code&gt;支持快速启动模式，这种模式下，&lt;code&gt;SOC&lt;/code&gt;会跳过一些不必要的硬件初始化和自检过程，从而更快地启动。&lt;/li&gt;&#xA;&lt;li&gt;使用休眠和唤醒技术：一些&lt;code&gt;SOC&lt;/code&gt;还支持休眠和唤醒技术，这种技术可以将系统的状态保存到非易失性存储器中，然后关闭系统。当系统再次启动时，可以直接从非易失性存储器中恢复系统的状态，从而更快地启动。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&amp;nbsp;</description>
    </item>
    <item>
      <title>一文详解路由器配置信息</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/wifi/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Sat, 20 Jan 2024 10:21:19 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/wifi/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;h1 id=&#34;一文详解路由器配置信息&#34;&gt;&#xA;  一文详解路由器配置信息&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e8%af%a6%e8%a7%a3%e8%b7%af%e7%94%b1%e5%99%a8%e9%85%8d%e7%bd%ae%e4%bf%a1%e6%81%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;上一篇文章，&lt;a href=&#34;http://t.csdn.cn/vKh96&#34;&gt;WIFI基础知识汇总&lt;/a&gt;，讲述了&lt;code&gt;Wi-Fi&lt;/code&gt;的基础知识，这篇文章，我们以路由器视角，来更加详细的分析&lt;code&gt;Wi-Fi&lt;/code&gt;的相关设置。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1-路由器铭牌&#34;&gt;&#xA;  1. 路由器铭牌&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e8%b7%af%e7%94%b1%e5%99%a8%e9%93%ad%e7%89%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们买到的路由器，仔细观察背后的铭牌，都会看到路由器的设置网址及登录的账户名以及密码。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220708140132539.png&#34; alt=&#34;image-20220708140132539&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;按照铭牌的提示信息，用电脑连接该路由器，&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;确保电脑和路由器在同一局域网下&lt;/strong&gt;&lt;/font&gt;，然后登录该网址，进行路由器配置！&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2登录路由器主页&#34;&gt;&#xA;  2、登录路由器主页&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e7%99%bb%e5%bd%95%e8%b7%af%e7%94%b1%e5%99%a8%e4%b8%bb%e9%a1%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;登录后的路由器主页如下&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;不同路由器，信息会略有不同，但是大同小异，该有的功能都有的！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220708103916679.png&#34; alt=&#34;image-20220708103916679&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3路由设置&#34;&gt;&#xA;  3、路由设置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e8%b7%af%e7%94%b1%e8%ae%be%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;找到【路由设置】选项，然后进行&lt;code&gt;WiFi&lt;/code&gt;配置，并且打开&lt;code&gt;2.4G&lt;/code&gt;或&lt;code&gt;5G&lt;/code&gt;的WiFi。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220708134040838.png&#34; alt=&#34;image-20220708134040838&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;2.4G&lt;/code&gt;和&lt;code&gt;5G&lt;/code&gt;模式中，有不同的网络协议进行选择，具体差别可以看上节文章：【&lt;a href=&#34;http://t.csdn.cn/vKh96&#34;&gt;WIFI基础知识汇总&lt;/a&gt;】&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;2.4G&lt;/code&gt;wifi有b/g/n模设置；5Gwifi有&lt;code&gt;ac&lt;/code&gt; &lt;code&gt;a/n/ac&lt;/code&gt;混合模式设置。&lt;/li&gt;&#xA;&lt;li&gt;无线频宽代表每个通道的信道宽度。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220708140858857.png&#34; alt=&#34;image-20220708140858857&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;找到【无线账号和密码】，进行设置&lt;code&gt;WiFi&lt;/code&gt;的模式以及名称，密码！&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4路由信息&#34;&gt;&#xA;  4、路由信息&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e8%b7%af%e7%94%b1%e4%bf%a1%e6%81%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;找到【系统状态】，查看路由信息&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220708110044871.png&#34; alt=&#34;image-20220708110044871&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这个页面，我们能够看到路由器的详细信息，包括：IP地址、MAC地址、WiFi名称等信息。&lt;/p&gt;&#xA;&lt;p&gt;根据路由器的详细信息，我们也再详细了解一下路由器的一些特性。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;41-路由器的wan口&#34;&gt;&#xA;  4.1 路由器的WAN口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e8%b7%af%e7%94%b1%e5%99%a8%e7%9a%84wan%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;WAN&lt;/code&gt;口就是路由器的外网接口，相当于外面的进线接口，它有自己的IP，MAC地址，和获取IP的多种方式。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;如下配置&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220708110412409.png&#34; alt=&#34;image-20220708110412409&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;可以选择动态IP，也可以选择静态IP，分配静态IP时，需要手动进行配置。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220708110433564.png&#34; alt=&#34;image-20220708110433564&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;同时，可以设置WAN口的通信速率，最大通信包，以及MAC地址等。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;42-路由器的lan口&#34;&gt;&#xA;  4.2 路由器的LAN口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#42-%e8%b7%af%e7%94%b1%e5%99%a8%e7%9a%84lan%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;LAN的MAC就是路由器上LAN口一端的端口物理地址，一般我们连接电脑或电视。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220708111156515.png&#34; alt=&#34;image-20220708111156515&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;路由器的每一个端口，都有一个默认的MAC地址。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;43-路由器的无线mac地址&#34;&gt;&#xA;  4.3 路由器的无线MAC地址&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#43-%e8%b7%af%e7%94%b1%e5%99%a8%e7%9a%84%e6%97%a0%e7%ba%bfmac%e5%9c%b0%e5%9d%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;该MAC地址，指的是路由器开启热点后的MAC地址信息，对应的还有IP地址。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/R-C.5ec2e1efe78256ef6f87bf69d1bfa096&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux设备树详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 19 Jan 2024 21:43:13 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux设备树详解&#34;&gt;&#xA;  【一文秒懂】Linux设备树详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e8%ae%be%e5%a4%87%e6%a0%91%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1linux设备树概念&#34;&gt;&#xA;  1、Linux设备树概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1linux%e8%ae%be%e5%a4%87%e6%a0%91%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Linux内核是从V2.6开始引入设备树的概念，其起源于&lt;code&gt;OF:OpenFirmware&lt;/code&gt;， 用于&lt;strong&gt;描述一个硬件平台的硬件资源信息&lt;/strong&gt;，这些信息包括：CPU的数量和类别、内存基地址和大小、总线和桥、外设连接、中断控制器和中断使用情况、GPIO控制器和GPIO使用情况、Clock控制器和Clock使用情况等等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;官方说明&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The &amp;ldquo;Open Firmware Device Tree&amp;rdquo;, or simply Device Tree (DT), is a data structure and language for describing hardware.&lt;/p&gt;&#xA;&lt;p&gt;设备树是一种数据结构和一种用于描述硬件信息的语言。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;设备树的特点&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;实现驱动代码与设备硬件信息相分离&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;通过被&lt;code&gt;bootloader(uboot)&lt;/code&gt;和&lt;code&gt;Linux&lt;/code&gt;传递到内核， 内核可以从设备树中获取对应的硬件信息。&lt;/li&gt;&#xA;&lt;li&gt;对于同一SOC的不同主板，只需更换设备树文件即可实现不同主板的无差异支持，而无需更换内核文件，实现了&lt;strong&gt;内核和不同板级硬件数据的拆分&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://doc.embedfire.com/linux/imx6/quick_start/zh/latest/_images/device_tree001.png&#34; alt=&#34;设备树&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2设备树的由来&#34;&gt;&#xA;  2、设备树的由来&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e8%ae%be%e5%a4%87%e6%a0%91%e7%9a%84%e7%94%b1%e6%9d%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;明白了设备树的概念，不妨思考一下：&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;为什么要引入设备树？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核v2.6版本以前，&lt;code&gt;ARM&lt;/code&gt;架构用于描述不同的硬件信息的文件都存放在&lt;code&gt;arch/arm/plat-xxx&lt;/code&gt;和&lt;code&gt;arch/arm/mach-xxx&lt;/code&gt;文件夹下，如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220802090504275.png&#34; alt=&#34;image-20220802090504275&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这些文件内，都是通过手动定义不同的硬件设备，步骤非常繁琐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220802091036378.png&#34; alt=&#34;image-20220802091036378&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;这样就导致了&lt;code&gt;Linux&lt;/code&gt;内核代码中充斥着大量的垃圾代码，因为不同的板级他们的硬件信息都不相同，这些都是硬件特有的信息，对内核而言没有任何的意义，但是往往这部分代码特别的多，造成内核的冗余。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;设备树的引入就是为了解决这个问题&lt;/strong&gt;&lt;/span&gt;，通过引入设备树，我们可以直接通过它来传递给&lt;code&gt;Linux&lt;/code&gt;，而不再需要内核中大量的垃圾代码。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3设备树组成&#34;&gt;&#xA;  3、设备树组成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e8%ae%be%e5%a4%87%e6%a0%91%e7%bb%84%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;整个设备树牵涉面比较广，即增加了新的用于描述设备硬件信息的文本格式，又增加了编译这个文本的工具，同时还得支持&lt;code&gt;Bootloader&lt;/code&gt;解析设备树，并将信息传递给内核。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;整个设备树包含&lt;code&gt;DTC（device tree compiler）&lt;/code&gt;，&lt;code&gt;DTS（device tree source）&lt;/code&gt;和&lt;code&gt;DTB（device tree blob）&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220802091430298.png&#34; alt=&#34;image-20220802091430298&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;DTS（device tree source）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;DTS&lt;/code&gt;是一种&lt;code&gt;ASCII&lt;/code&gt;文本格式的设备树描述，在&lt;code&gt;ARM Linux&lt;/code&gt;中，一个&lt;code&gt;dts&lt;/code&gt;文件对应一个&lt;code&gt;ARM&lt;/code&gt;的设备，该文件一般放在&lt;code&gt;arch/arm/boot/dts/&lt;/code&gt;目录中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】二、EMMC协议</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%8Cemmc%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 19 Jan 2024 21:14:30 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%8Cemmc%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h1 id=&#34;mmc子系统-二emmc协议&#34;&gt;&#xA;  【MMC子系统】 二、EMMC协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f-%e4%ba%8cemmc%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在上一节，我们知道&lt;code&gt;EMMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;三种规范都是在&lt;code&gt;MMC&lt;/code&gt;规范之上发展而来，协议相差不大，所以&lt;code&gt;Linux Kernel&lt;/code&gt;才能使用&lt;code&gt;MMC&lt;/code&gt;子系统来统一管理！&lt;/p&gt;&#xA;&lt;p&gt;下面，我们以&lt;code&gt;MMC&lt;/code&gt;协议为例，来了解一下相关协议!&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2emmc基本了解&#34;&gt;&#xA;  2、EMMC基本了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2emmc%e5%9f%ba%e6%9c%ac%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-物理线路&#34;&gt;&#xA;  2.1 物理线路&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%89%a9%e7%90%86%e7%ba%bf%e8%b7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202210312033341.gif&#34; alt=&#34;Card Concept(eMMC)&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231025163714473.png&#34; alt=&#34;image-20231025163714473&#34; /&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;物理接口&lt;/th&gt;&#xA;          &lt;th&gt;接口含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CLK&lt;/td&gt;&#xA;          &lt;td&gt;时钟线，此信号的每一周期控制&lt;strong&gt;命令线&lt;/strong&gt;上的 1 bit 传输，以及所有&lt;strong&gt;数据线&lt;/strong&gt;上 1 bit（1x） 或 2 bit（2x）传输。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CMD&lt;/td&gt;&#xA;          &lt;td&gt;命令线，此信号是双向命令通道，用于设备初始化和命令传输。CMD信号有两种工 作模式：用于初始化模式&lt;strong&gt;开漏模式&lt;/strong&gt;和快速命令传输&lt;strong&gt;推拉模式&lt;/strong&gt;。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DAT0-7&lt;/td&gt;&#xA;          &lt;td&gt;这些是双向的数据通道。DAT 信号以&lt;strong&gt;推拉模式&lt;/strong&gt;工作。缺省状态，只有DAT0处于推拉模式，DAT1-7处于上拉（内含上拉），进入4bit后，DAT0-3处于推拉&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-emmc相关寄存器了解&#34;&gt;&#xA;  2.2 EMMC相关寄存器了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-emmc%e7%9b%b8%e5%85%b3%e5%af%84%e5%ad%98%e5%99%a8%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202210312033046.png&#34; alt=&#34;image-20220215111031546&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;23-其他特性了解&#34;&gt;&#xA;  2.3 其他特性了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e5%85%b6%e4%bb%96%e7%89%b9%e6%80%a7%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;读写模式&lt;/strong&gt;：单块读写，多块读写&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;寻址方式&lt;/strong&gt;：字节寻址和扇区寻址，字节寻址允许最大2GB，容量超过2GB的，使用扇区（512B）寻址&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;电压模式&lt;/strong&gt;：支持高电压和双电压模式&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;支持增强分区模式等&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3总线协议&#34;&gt;&#xA;  3、总线协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%80%bb%e7%ba%bf%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-基础了解&#34;&gt;&#xA;  3.1 基础了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%9f%ba%e7%a1%80%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;命令&lt;/strong&gt;：启动一种操作的Token，命令从主机发往设备，在CMD线路上串行传输。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应答&lt;/strong&gt;：从设备发往主机作为对上一命令的回答的Token，在CMD线路上串行传输。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt;：在主从机之间双向传输，总线宽度可以是1-bit（缺省）、4-bit 和 8-bit&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;32-命令格式&#34;&gt;&#xA;  3.2 命令格式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%91%bd%e4%bb%a4%e6%a0%bc%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/e4f540b09494fc3b1f185ab8d34d09a1.png&#34; alt=&#34;image-20220215112109330&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】二、蓝牙开发入门</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%BA%8C%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 19 Jan 2024 20:59:56 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%BA%8C%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h1 id=&#34;bluetooth蓝牙开发二蓝牙开发入门&#34;&gt;&#xA;  【Bluetooth|蓝牙开发】二、蓝牙开发入门&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bluetooth%e8%93%9d%e7%89%99%e5%bc%80%e5%8f%91%e4%ba%8c%e8%93%9d%e7%89%99%e5%bc%80%e5%8f%91%e5%85%a5%e9%97%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206071855795.png&#34; alt=&#34;1、BLE开发入门基础&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1蓝牙基础概念&#34;&gt;&#xA;  1、蓝牙基础概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e8%93%9d%e7%89%99%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;蓝牙&lt;/strong&gt;，是一种&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;利用低功率无线电，支持设备短距离通信的无线电技术&lt;/strong&gt;&lt;/span&gt;，能在包括移动电话、PDA、无线耳机、笔记本电脑、相关外设等众多设备之间进行无线信息交换，&lt;font color = &#34;blue&#34;&gt;&lt;strong&gt;蓝牙工作在全球通用的&lt;code&gt;2.4GHz ISM&lt;/code&gt;（即工业、科学、医学）频段，使用&lt;code&gt;IEEE802.11&lt;/code&gt;协议。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2蓝牙发展历程&#34;&gt;&#xA;  2、蓝牙发展历程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e8%93%9d%e7%89%99%e5%8f%91%e5%b1%95%e5%8e%86%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;自1994年由&lt;strong&gt;爱立信推出&lt;/strong&gt;至今，蓝牙技术已经走过了20个岁月。从最初的&lt;code&gt;Bluetooth V1.0&lt;/code&gt;，到&lt;code&gt;Bluetooth V5.2&lt;/code&gt;，经历了近9个版本的修订后，发展为当前的状况。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;blue&#34;&gt;&lt;strong&gt;“蓝牙”的形成背景是这样的&lt;/strong&gt;：&lt;/font&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;1998 年 5 月，爱立信、诺基亚、东芝、 IBM和英特尔公司等五家著名厂商， 在联合开展短程无线通信技术的标准化活动时提出了蓝牙技术，&lt;strong&gt;其宗旨是提供一种短距离、 低成本的无线传输应用技术&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;芯片霸主 Intel 公司负责半导体芯片和传输软件的开发，爱立信负责无线射频和移动电话软件的开发， IBM 和东芝负责笔记本电脑接口规格的开发。&lt;/p&gt;&#xA;&lt;p&gt;1999 年下半年，著名的业界巨头微软、摩托罗拉、三星、朗讯与蓝牙特别小组的五家公司共同发起成立了&lt;strong&gt;蓝牙技术推广组织&lt;/strong&gt;，从而在全球范围内掀起了一股“蓝牙”热潮。&lt;/p&gt;&#xA;&lt;p&gt;全球业界即将开发一大批蓝牙技术的应用产品， 使蓝牙技术呈现出极其广阔的市场前景，并预示着 21 世纪初将迎来波澜壮阔的全球无线通信浪潮。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;第一代蓝牙&lt;/strong&gt;：关于短距离通讯早期的探索，使用的是BR技术，此时蓝牙的理论传输速率，只能达到721.2Kbps。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;第二代蓝牙&lt;/strong&gt;：新增的 EDR（Enhanced Data Rate）技术，使得蓝牙设备的传输率可达 3Mbps。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;第三代蓝牙&lt;/strong&gt;：核心是 AMP（Generic Alternate MAC/PHY），这是一种全新的交替射频技术，支持动态地选择正确射频，传输速率高达 24Mbps&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;第四代蓝牙&lt;/strong&gt;：主推” Low Energy”低功耗， &lt;code&gt;BLE（Bluetooth Low Energy）&lt;/code&gt;低功耗功能&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;第五代蓝牙&lt;/strong&gt;：开启「物联网」时代大门，在低功耗模式下具备更快更远的传输能力&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3蓝牙技术概述&#34;&gt;&#xA;  3、蓝牙技术概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e8%93%9d%e7%89%99%e6%8a%80%e6%9c%af%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;蓝牙协议包括两种技术：&lt;code&gt;BR：Basic Rate&lt;/code&gt;和&lt;code&gt;LE：Low Energy&lt;/code&gt;。这两种技术都包括搜索&lt;code&gt;（discovery）&lt;/code&gt;管理、连接&lt;code&gt;（connection）&lt;/code&gt;管理等机制，但&lt;strong&gt;它们是相互独立的，不能互通的技术！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;厂商如果只实现了一种，那么只能与同样实现该技术的设备互通。&lt;/p&gt;&#xA;&lt;p&gt;如果厂商要确保能和所有的蓝牙设备互通，那么就只能同时实现两种技术，而不去管是否真的需要。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】二、LED子系统框架分析</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%BA%8Cled%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 19 Jan 2024 20:27:15 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%BA%8Cled%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析二led子系统框架分析&#34;&gt;&#xA;  【LED子系统深度剖析】二、LED子系统框架分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e4%ba%8cled%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们学习嵌入式，无论是&lt;code&gt;C51&lt;/code&gt;、&lt;code&gt;STM32&lt;/code&gt;或者是&lt;code&gt;ARM&lt;/code&gt;，都是从点灯开始的，点灯在嵌入式中的地位等同于&lt;code&gt;Hello World&lt;/code&gt;在各大语言中的地位！&lt;/p&gt;&#xA;&lt;p&gt;虽然&lt;code&gt;LED&lt;/code&gt;功能简单，但是其&lt;strong&gt;麻雀虽小，五脏俱全&lt;/strong&gt;，在学习&lt;code&gt;Linux驱动开发&lt;/code&gt;的过程中，学习&lt;code&gt;LED&lt;/code&gt;子系统，往往也能够起到&lt;strong&gt;牵一发而动全身&lt;/strong&gt;的作用，也更有益于大家熟悉驱动开发的框架！&lt;/p&gt;&#xA;&lt;h2 id=&#34;2led裸机处理&#34;&gt;&#xA;  2、LED裸机处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2led%e8%a3%b8%e6%9c%ba%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们在学习&lt;code&gt;Linux驱动框架&lt;/code&gt;的时候，第一步要做的就是去掉子系统的面纱，先弄明白裸机处理的流程！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230328063034205.png&#34; alt=&#34;image-20230328063034205&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;有嵌入式经验的朋友，对&lt;code&gt;LED&lt;/code&gt;的裸机在清楚不过了，上面是&lt;code&gt;LED&lt;/code&gt;的硬件电路，通常一端接到&lt;code&gt;VCC&lt;/code&gt;，一端接到&lt;code&gt;GPIO&lt;/code&gt;，当&lt;code&gt;GPIO&lt;/code&gt;拉低时，&lt;code&gt;LED&lt;/code&gt;亮；当&lt;code&gt;GPIO&lt;/code&gt;拉高时，&lt;code&gt;LED&lt;/code&gt;灭。&lt;/p&gt;&#xA;&lt;p&gt;在这里裸机我们不过多了解了，目的在于窥探&lt;code&gt;LED子系统&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3led子系统框架&#34;&gt;&#xA;  3、LED子系统框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;框架是什么？&lt;/p&gt;&#xA;&lt;p&gt;框架是一个规范，为我们开发者增加限制的同时，也是为了更好的开发新的程序，新的功能，其目的主要是：&lt;strong&gt;将不变的成分剥离开来，固化进框架，让开发者做最少的事情!&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230417084033734.png&#34; alt=&#34;image-20230417084033734&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;框架所处的位置，正如上图所示，由下往上看：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hardware&lt;/strong&gt;：我们的硬件设备，指的是&lt;code&gt;LED&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;硬件驱动层&lt;/strong&gt;：是直接操作硬件的实现，用于驱动硬件，实现相应的功能，并且将硬件设备注册进框架之中。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心层&lt;/strong&gt;：将&lt;code&gt;LED&lt;/code&gt;进行统一管理，提供注册，注销，管理&lt;code&gt;LED&lt;/code&gt;等相关接口，起到呈上启下的作用，方便上层调用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;用户层&lt;/strong&gt;：用户通过&lt;code&gt;sysfs&lt;/code&gt;文件系统中对应的文件节点，能够直接控制&lt;code&gt;LED&lt;/code&gt;的亮灭。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4led子系统目录结构及核心文件&#34;&gt;&#xA;  4、LED子系统目录结构及核心文件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4led%e5%ad%90%e7%b3%bb%e7%bb%9f%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84%e5%8f%8a%e6%a0%b8%e5%bf%83%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;了解完&lt;code&gt;LED&lt;/code&gt;子系统框架之后，我们来分析一下其相关的目录结构！&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ketnel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── driver&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── leds&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;Makefile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;led-core.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;led-gpio.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;led-class.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;led-triggers.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   └── trigger&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   │   ├── ledtrig-cpu.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   │   ├── ledtrig-heartbeat.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   │   ├── .......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面即为&lt;code&gt;LED&lt;/code&gt;子系统的目录结构，其主要核心文件有：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】二、中断屏蔽</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%B1%8F%E8%94%BD/</link>
      <pubDate>Thu, 18 Jan 2024 23:02:05 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%B1%8F%E8%94%BD/</guid>
      <description>&lt;h1 id=&#34;深入理解linux内核锁二中断屏蔽&#34;&gt;&#xA;  【深入理解Linux内核锁】二、中断屏蔽&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3linux%e5%86%85%e6%a0%b8%e9%94%81%e4%ba%8c%e4%b8%ad%e6%96%ad%e5%b1%8f%e8%94%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上一篇了解了内核锁的由来，本篇文章主要来讲一下中断屏蔽的底层实现以及原理。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://d00.paixin.com/thumbs/1152339/17466927/staff_1024.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1中断屏蔽思想&#34;&gt;&#xA;  1、中断屏蔽思想&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%b8%ad%e6%96%ad%e5%b1%8f%e8%94%bd%e6%80%9d%e6%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;中断屏蔽，正如其名，屏蔽掉&lt;code&gt;CPU&lt;/code&gt;的中断响应功能，解决并发引起的竞态问题。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在进入临界区前屏蔽中断，这么做有什么好处，以及有什么弊端？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;好处在于&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决了进程与中断之间的并发&lt;/strong&gt;：保证在执行临界区代码时，不被中断所打断。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决了进程与进程之间调度的并发&lt;/strong&gt;：系统的进程调度与中断息息相关，同时也限制了系统进程的并发，解决了系统进程并发带来的竞态问题。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;弊端在于&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;各类中断类型较多，一棒子打死影响大&lt;/strong&gt;：&lt;code&gt;Linux&lt;/code&gt;内核中，除了系统进程调度依赖中断，还有一些异步&lt;code&gt;I/O&lt;/code&gt;等众多操作都依赖中断，因此长时间屏蔽中断是很危险的，会对系统造成严重影响，因此也要求临界区代码要简短。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决的不够完善&lt;/strong&gt;：关闭中断能够解决进程调度、中断引发的竞态，但是这些都是单&lt;code&gt;CPU&lt;/code&gt;内部的，对于&lt;code&gt;SMP&lt;/code&gt;对称多处理器，仍然不可避免的会收到其他&lt;code&gt;CPU&lt;/code&gt;的中断。因此，并不能解决&lt;code&gt;SMP&lt;/code&gt;多&lt;code&gt;CPU&lt;/code&gt;引发的竞态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;因此，单独使用中断屏蔽通常不是一种值得推荐的避免竞态的方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2linux内核中断屏蔽的实现&#34;&gt;&#xA;  2、Linux内核中断屏蔽的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2linux%e5%86%85%e6%a0%b8%e4%b8%ad%e6%96%ad%e5%b1%8f%e8%94%bd%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-linux内核提供的api接口&#34;&gt;&#xA;  2.1 Linux内核提供的API接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-linux%e5%86%85%e6%a0%b8%e6%8f%90%e4%be%9b%e7%9a%84api%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;关于中断屏蔽，&lt;code&gt;Linux&lt;/code&gt;内核所提供的接口如下：&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_enable&lt;/span&gt;()&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;使能本CPU的中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_disable&lt;/span&gt;()&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;禁止本CPU的中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_save&lt;/span&gt;(flags)&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;禁止本CPU的中断，并保存CPU中断位的信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_restore&lt;/span&gt;(flags)&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;使能本CPU的中断，并恢复CPU中断位的信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_bh_disable&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;禁止本CPU底半部中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_bh_enable&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)    &#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;使能本CPU底半部中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件位置：&lt;code&gt;kernel/include/linux/irqflags.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;local_irq_enable&lt;/code&gt;与&lt;code&gt;local_irq_disable&lt;/code&gt;：直接打开/关闭本&lt;code&gt;CPU&lt;/code&gt;内的中断，包括了顶半部和底半部中断的打开和关闭。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;local_irq_save&lt;/code&gt;与&lt;code&gt;local_irq_restore&lt;/code&gt;：直接打开/关闭本&lt;code&gt;CPU&lt;/code&gt;中断，并且保存中断屏蔽前的状态，便于后续恢复&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;local_bh_enable&lt;/code&gt;与&lt;code&gt;local_bh_disable&lt;/code&gt;：直接打开/关闭本&lt;code&gt;CPU&lt;/code&gt;内的底半部中断&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-api接口实现分析&#34;&gt;&#xA;  2.2 API接口实现分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-api%e6%8e%a5%e5%8f%a3%e5%ae%9e%e7%8e%b0%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;因为中断屏蔽与底层芯片架构有关，不同架构处理方式不同，我们以&lt;code&gt;ARM&lt;/code&gt;为例&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;221-local_irq_enable&#34;&gt;&#xA;  2.2.1 local_irq_enable&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#221-local_irq_enable&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define local_irq_enable()&#x9;do { raw_local_irq_enable(); } while (0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define raw_local_irq_enable()&#x9;&#x9;arch_local_irq_enable()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define arch_local_irq_enable arch_local_irq_enable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;arch_local_irq_enable&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;asm&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;volatile&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&#x9;cpsie i&#x9;&#x9;&#x9;@ arch_local_irq_enable&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cc&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;函数介绍&lt;/strong&gt;：&lt;code&gt;local_irq_enable&lt;/code&gt;函数用于将&lt;code&gt;CPSR&lt;/code&gt;寄存器中的中断使能位设为1，从而使得&lt;code&gt;CPU&lt;/code&gt;能够响应中断。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【NVMEM子系统深入剖析】二、NVMEM驱动框架</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_nvmem_subsystem/nvmem%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%BA%8Cnvmem%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Thu, 18 Jan 2024 22:27:58 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_nvmem_subsystem/nvmem%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%BA%8Cnvmem%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h1 id=&#34;nvmem子系统深入剖析二nvmem驱动框架&#34;&gt;&#xA;  【NVMEM子系统深入剖析】二、NVMEM驱动框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nvmem%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%85%a5%e5%89%96%e6%9e%90%e4%ba%8cnvmem%e9%a9%b1%e5%8a%a8%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;NVMEM SUBSYSTEM&lt;/code&gt;，该子系统整体架构不算太大，还是比较容易去理解的，下面我们一起去一探究竟！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;NVMEM（Non Volatile Memory）&lt;/code&gt;，该子系统主要用于实现&lt;code&gt;EEPROM&lt;/code&gt;、&lt;code&gt;Efuse&lt;/code&gt;等非易失存储器的统一管理。&lt;/p&gt;&#xA;&lt;p&gt;在早期，像&lt;code&gt;EEPROM&lt;/code&gt;驱动是存放于&lt;code&gt;/drivers/misc&lt;/code&gt;目录下，由于没有做到好的抽象，每次需要去访问相应内存空间，都需要去复制几乎一样的代码，去注册&lt;code&gt;sysfs&lt;/code&gt;，这是一个相当大的抽象泄露。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;NVMEM&lt;/code&gt;子系统就是为了解决以往的抽象泄露问题。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2驱动框架&#34;&gt;&#xA;  2、驱动框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e9%a9%b1%e5%8a%a8%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;该驱动框架较为简单，也适合初学者去熟悉基本的驱动框架。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230210071204144.png&#34; alt=&#34;image-20230210071204144&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;应用层&lt;/strong&gt;：可以通过用户空间所提供的文件节点，来读取或者修改&lt;code&gt;nvmem&lt;/code&gt;存储器的数据。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;NVMEM 核心层&lt;/strong&gt;：统一管理&lt;code&gt;NVMEM&lt;/code&gt;设备，向上实现文件系统接口数据的传递，向下提供统一的注册，注销&lt;code&gt;nvmem&lt;/code&gt;设备接口。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;NVMEM 总线驱动&lt;/strong&gt;：注册&lt;code&gt;NVMEM&lt;/code&gt;总线，实现&lt;code&gt;NVMEM&lt;/code&gt;控制器的底层代码实现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;nvmem&lt;/code&gt;子系统提供读写存储器的接口有两种，一种是通过文件系统读写，一种是在内核驱动直接读写。&lt;/p&gt;&#xA;&lt;p&gt;对于&lt;code&gt;EEPROM&lt;/code&gt;，其可以进行读写操作，而对于&lt;code&gt;efuse&lt;/code&gt;，更多用于读取密钥信息，进而判断镜像是否被篡改，在用户空间是不允许被更改的。&lt;/p&gt;&#xA;&lt;p&gt;这种是通过驱动提供的开放接口，直接获取指定位置的数据，详细的后面展开来说。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3源码目录结构&#34;&gt;&#xA;  3、源码目录结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%ba%90%e7%a0%81%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ketnel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── driver&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── nvmem&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;core.c&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# NVMEM核心层&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;rockchip-efuse.c&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# NVMEM总线驱动&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4用户空间下的目录结构&#34;&gt;&#xA;  4、用户空间下的目录结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e7%94%a8%e6%88%b7%e7%a9%ba%e9%97%b4%e4%b8%8b%e7%9a%84%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们可以在用户空间去读取/写入数据，其所在的目录：&lt;code&gt;/sys/bus/nvmem/devices/dev-name/nvmem&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hexdump /sys/bus/nvmem/devices/qfprom0/nvmem&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0000000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000a0 db10 &lt;span style=&#34;color:#bd93f9&#34;&gt;2240&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; e000 0c00 0c00 &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; 0c00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0000000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0001000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>CPU体系架构</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/embeded_tech/embeded_interview/cpu%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Wed, 17 Jan 2024 21:39:15 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/embeded_tech/embeded_interview/cpu%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;cpu体系架构&#34;&gt;&#xA;  CPU体系架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cpu%e4%bd%93%e7%b3%bb%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img2.baidu.com/it/u=1963592699,3653391242&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=853&amp;amp;h=363&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;21-cpu体系架构有哪些&#34;&gt;&#xA;  2.1 CPU体系架构有哪些？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-cpu%e4%bd%93%e7%b3%bb%e6%9e%b6%e6%9e%84%e6%9c%89%e5%93%aa%e4%ba%9b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我们常见的&lt;code&gt;CPU&lt;/code&gt;架构有哪些呢？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果我们熟悉&lt;code&gt;Linux&lt;/code&gt;，那么这个问题肯定不难回答！&lt;/p&gt;&#xA;&lt;p&gt;我们查看内核目录下的&lt;code&gt;arch&lt;/code&gt;子目录，就可以看到&lt;code&gt;Linux&lt;/code&gt;所支持的处理器架构，基本属于我们常见的类型了。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ls ./arch&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alpha  arc  arm  arm64  c6x  h8300  hexagon  ia64  Kconfig  m68k  microblaze  mips  nds32  nios2  openrisc  parisc  powerpc  riscv  s390  sh  sparc  um  unicore32  x86  xtensa&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;准确来说，&lt;code&gt;CPU&lt;/code&gt;处理器架构主要有以下几种类型&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CISC（复杂指令集计算机）&lt;/strong&gt;：&lt;code&gt;CISC&lt;/code&gt;架构的&lt;code&gt;CPU&lt;/code&gt;设计理念是尽可能减少程序指令的数量，以降低&lt;code&gt;CPU&lt;/code&gt;和内存之间的通信频率。这种架构的一个显著特点是拥有大量的寄存器和复杂的指令集。&lt;code&gt;Intel&lt;/code&gt;的&lt;code&gt;x86&lt;/code&gt;架构就是一个典型的&lt;code&gt;CISC&lt;/code&gt;架构&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RISC（精简指令集计算机）&lt;/strong&gt;：&lt;code&gt;RISC&lt;/code&gt;架构的&lt;code&gt;CPU&lt;/code&gt;设计理念是通过简化指令集来提高&lt;code&gt;CPU&lt;/code&gt;的运行效率。这种架构的一个显著特点是拥有较少的寄存器和简单的指令集。&lt;code&gt;ARM&lt;/code&gt;架构就是一个典型的&lt;code&gt;RISC&lt;/code&gt;架构&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;MISC（中间指令集计算机）&lt;/strong&gt;：&lt;code&gt;MISC&lt;/code&gt;架构的&lt;code&gt;CPU&lt;/code&gt;设计理念是在&lt;code&gt;CISC&lt;/code&gt;和&lt;code&gt;RISC&lt;/code&gt;之间寻找一个平衡点，既不过于复杂也不过于简单。这种架构的一个显著特点是指令集的复杂度介于&lt;code&gt;CISC&lt;/code&gt;和&lt;code&gt;RISC&lt;/code&gt;之间&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;VLIW（超长指令字计算机）&lt;/strong&gt;：&lt;code&gt;VLIW&lt;/code&gt;架构的&lt;code&gt;CPU&lt;/code&gt;设计理念是通过增大指令长度来提高并行执行的可能性。这种架构的一个显著特点是指令长度远大于其他架构的&lt;code&gt;CPU&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;EPIC（显式并行指令计算）&lt;/strong&gt;：&lt;code&gt;EPIC&lt;/code&gt;架构的&lt;code&gt;CPU&lt;/code&gt;设计理念是通过显式标记并行指令来提高&lt;code&gt;CPU&lt;/code&gt;的运行效率。这种架构的一个显著特点是指令集中包含了并行执行的信息。&lt;code&gt;Intel&lt;/code&gt;的&lt;code&gt;Itanium&lt;/code&gt;架构就是一个典型的&lt;code&gt;EPIC&lt;/code&gt;架构&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;超标量架构&lt;/strong&gt;：超标量架构的&lt;code&gt;CPU&lt;/code&gt;设计理念是通过在一个时钟周期内执行多条指令来提高&lt;code&gt;CPU&lt;/code&gt;的运行效率。这种架构的一个显著特点是&lt;code&gt;CPU&lt;/code&gt;内部包含了多个执行单元，可以同时执行多条指令&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;超线程技术&lt;/strong&gt;：超线程技术是&lt;code&gt;Intel&lt;/code&gt;公司为其部分&lt;code&gt;CPU&lt;/code&gt;所采用的一种使单一处理器像多个逻辑处理器那样并行处理多个线程的技术&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;多核心架构&lt;/strong&gt;：多核心架构的&lt;code&gt;CPU&lt;/code&gt;设计理念是在一个&lt;code&gt;CPU&lt;/code&gt;芯片内集成多个处理器核心，以提高并行处理能力。这种架构的一个显著特点是&lt;code&gt;CPU&lt;/code&gt;内部包含了多个独立的处理器核心，每个核心可以独立执行指令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img2.baidu.com/it/u=3770652576,1376693706&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=120&amp;amp;f=JPEG?w=909&amp;amp;h=500&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;这里就有一个疑问，我们什么时候说&lt;code&gt;RISC&lt;/code&gt;架构，什么时候说&lt;code&gt;ARM&lt;/code&gt;架构，这两个有什么区别呢？&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;以&lt;code&gt;ARM&lt;/code&gt;和&lt;code&gt;RISC&lt;/code&gt;为例：&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;ARM&lt;/code&gt;架构和&lt;code&gt;RISC&lt;/code&gt;架构的主要区别在于&lt;code&gt;ARM&lt;/code&gt;实际上是&lt;code&gt;RISC&lt;/code&gt;的一个具体实现，而&lt;code&gt;RISC&lt;/code&gt;则是一个更广泛的处理器&lt;strong&gt;设计理念&lt;/strong&gt;。换句话说，&lt;code&gt;ARM&lt;/code&gt;是&lt;code&gt;RISC&lt;/code&gt;的一个子集。&lt;/p&gt;&#xA;&lt;p&gt;同理，&lt;code&gt;X86&lt;/code&gt;架构是&lt;code&gt;CISC&lt;/code&gt;的一个子集。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;22-常见的问题&#34;&gt;&#xA;  2.2 常见的问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%b8%b8%e8%a7%81%e7%9a%84%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Q1&lt;/code&gt;：你所熟知的处理器架构有哪些？&lt;/p&gt;&#xA;&lt;p&gt;我们常见的处理器架构有&lt;code&gt;ARM&lt;/code&gt;、&lt;code&gt;X86&lt;/code&gt;、&lt;code&gt;mips&lt;/code&gt;架构等；&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Q2&lt;/code&gt;：&lt;code&gt;STM32&lt;/code&gt;属于什么架构的？&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;STM32&lt;/code&gt;是&lt;code&gt;ST&lt;/code&gt;公司开发的32位微控制器集成电路，基于 &lt;code&gt;ARM&lt;/code&gt; 的 &lt;code&gt;Cortex-M&lt;/code&gt; 系列内核。因此，&lt;code&gt;STM32&lt;/code&gt; 属于 &lt;code&gt;ARM&lt;/code&gt; 架构的微控制器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】TOP命令详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 17 Jan 2024 21:37:13 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;一文秒懂top命令详解&#34;&gt;&#xA;  【一文秒懂】TOP命令详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82top%e5%91%bd%e4%bb%a4%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1top命令介绍&#34;&gt;&#xA;  1、Top命令介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1top%e5%91%bd%e4%bb%a4%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;系统中，&lt;code&gt;Top&lt;/code&gt;命令主要用于&lt;strong&gt;实时运行系统的监控&lt;/strong&gt;，包括&lt;code&gt;Linux&lt;/code&gt;内核管理的进程或者线程的资源占用情况。&lt;/p&gt;&#xA;&lt;p&gt;这个命令对所有正在运行的进程和系统负荷提供不断更新的概览信息，包括系统负载、CPU利用分布情况、内存使用、每个进程的内容使用情况等信息。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2top命令使用&#34;&gt;&#xA;  2、Top命令使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2top%e5%91%bd%e4%bb%a4%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Top&lt;/code&gt;的命令介绍如下&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -hv|-bcHiOSs -d secs -n max -u|U user -p pid -o fld -w &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;cols&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;常用的&lt;code&gt;Top&lt;/code&gt;指令有&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top：启动top命令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -c：显示完整的命令行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -b：以批处理模式显示程序信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -S：以累积模式显示程序信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -n 2：表示更新两次后终止更新显示&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -d 3：设置信息更新周期为3秒&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -p 139：显示进程号为139的进程信息，CPU、内存占用率等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -n 10：显示更新十次后退出&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除此之外，在&lt;code&gt;top&lt;/code&gt;进程运行过程中，两个最重要的功能是查看帮助（&lt;code&gt;h&lt;/code&gt; 或 &lt;code&gt;？&lt;/code&gt;）和退出（&lt;code&gt;q&lt;/code&gt; 或 &lt;code&gt;Ctrl+C&lt;/code&gt;）。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3top信息详解&#34;&gt;&#xA;  3、Top信息详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3top%e4%bf%a1%e6%81%af%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;top&lt;/code&gt;展示界面由从上到下3部分组成&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;概览区域&lt;/li&gt;&#xA;&lt;li&gt;表头&lt;/li&gt;&#xA;&lt;li&gt;任务区域&lt;/li&gt;&#xA;&lt;li&gt;还有一个输入/消息行，位于概览区域和表头之间。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230811143742616.png&#34; alt=&#34;image-20230811143742616&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;31-概览区详解&#34;&gt;&#xA;  3.1 概览区详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e6%a6%82%e8%a7%88%e5%8c%ba%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top - 14:46:08 up  5:46,  &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; user,  load average: 0.00, 0.00, 0.00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;程序或者窗口的名称：&lt;code&gt;top&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;当前时间和系统的启动时间：&lt;code&gt;14:46:08 up 5:46&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;总共的用户数量：&lt;code&gt;1 user&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;过去1、5和15分钟的系统平均负载：&lt;code&gt;load average: 0.00, 0.00, 0.00&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Tasks: &lt;span style=&#34;color:#bd93f9&#34;&gt;290&lt;/span&gt; total,   &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; running, &lt;span style=&#34;color:#bd93f9&#34;&gt;212&lt;/span&gt; sleeping,   &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; stopped,   &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; zombie&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%Cpu&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;:  0.0 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两行显示了任务数量和&lt;code&gt;CPU&lt;/code&gt;状态&lt;/p&gt;</description>
    </item>
    <item>
      <title>二、虚拟地址空间布局</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E4%BA%8C%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 17 Jan 2024 21:13:17 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E4%BA%8C%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;h1 id=&#34;linux内存管理--二虚拟地址空间布局&#34;&gt;&#xA;  Linux内存管理 | 二、虚拟地址空间布局&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86--%e4%ba%8c%e8%99%9a%e6%8b%9f%e5%9c%b0%e5%9d%80%e7%a9%ba%e9%97%b4%e5%b8%83%e5%b1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;上一章，我们了解了内存管理的由来以及核心思想，下面我们按照顺序，先来介绍一下&lt;code&gt;Linux&lt;/code&gt;虚拟内存空间的管理。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;同样，我们知道&lt;code&gt;Linux&lt;/code&gt;内核抽象出来虚拟内存空间，主要是为了让每个进程都独享该空间，那虚拟内存空间是如何布局的呢？&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;：针对于不同位数的&lt;code&gt;CPU&lt;/code&gt;，寻址能力不同，抽象出来的虚拟内存空间大小也不同，我们以常见的&lt;code&gt;32&lt;/code&gt;位的&lt;code&gt;CPU&lt;/code&gt;为例。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1虚拟内存空间布局&#34;&gt;&#xA;  1、虚拟内存空间布局&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e8%99%9a%e6%8b%9f%e5%86%85%e5%ad%98%e7%a9%ba%e9%97%b4%e5%b8%83%e5%b1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;对于&lt;code&gt;32&lt;/code&gt;位的&lt;code&gt;CPU&lt;/code&gt;，寻址范围为&lt;code&gt;0~2^32&lt;/code&gt;，也就是&lt;code&gt;0x00000000-0xFFFFFFFF&lt;/code&gt;，即最多抽象出来&lt;code&gt;4G&lt;/code&gt;的虚拟内存空间。&lt;/p&gt;&#xA;&lt;p&gt;这&lt;code&gt;4GB&lt;/code&gt;的内存空间，在&lt;code&gt;Linux&lt;/code&gt;中，又分为&lt;strong&gt;用户空间和内核空间&lt;/strong&gt;，其中&lt;code&gt;0x0000000-0xBFFFFFFF&lt;/code&gt;，共&lt;code&gt;3G&lt;/code&gt;为用户空间，&lt;code&gt;0xC00000000-0xFFFFFFFF&lt;/code&gt;，共&lt;code&gt;1G&lt;/code&gt;为内核空间，如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230924173124939.png&#34; alt=&#34;image-20230924173124939&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;无论内核空间还是用户空间，其仍然是在虚拟内存空间基础之上进行划分的，其直接访问的依旧都是虚拟地址，而非物理地址！&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们编写代码后，所生成的可执行程序，运行之后就成为一个系统进程，我们在&amp;quot;虚&amp;quot;的角度来看，每个进程都是独享这&lt;code&gt;4G&lt;/code&gt;虚拟地址空间的，&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2用户态空间布局&#34;&gt;&#xA;  2、用户态空间布局&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e7%94%a8%e6%88%b7%e6%80%81%e7%a9%ba%e9%97%b4%e5%b8%83%e5%b1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如上所述，用户空间在虚拟内存中分布在&lt;code&gt;0x0000000-0xBFFFFFFF&lt;/code&gt;，大小为&lt;code&gt;3G&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;每一个用户进程，按照&lt;strong&gt;访问属性一致的地址空间存放在一起&lt;/strong&gt;的原则，划分成5个不同的内存区域（访问属性一致指的是：可读，可写，可执行）：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;代码段&lt;/strong&gt;：&lt;code&gt;Text Segment&lt;/code&gt;，也就是我们的二进制程序，代码段需要防止在运行时被非法修改，&lt;strong&gt;所以该段为只读&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据段&lt;/strong&gt;：&lt;code&gt;Data Segment&lt;/code&gt;，主要存放初始化了的变量，主要包括：静态变量和全局变量，&lt;strong&gt;该段为读写&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;BSS&lt;/code&gt;段&lt;/strong&gt;：&lt;code&gt;BSS Segment&lt;/code&gt;，主要存放未初始化的全局变量，在内存中 &lt;code&gt;bss&lt;/code&gt; 段全部置零，&lt;strong&gt;该段为读写&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;堆段&lt;/strong&gt;：&lt;code&gt;Heap Segment&lt;/code&gt;，主要存放进程运行过程中动态分配的内存段，大小不固定，可动态扩张和缩减，通常使用&lt;code&gt;malloc&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;来分配释放，并且堆的增长方向是向上的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;文件映射和匿名映射段&lt;/strong&gt;：&lt;code&gt;Memory Mapping Segment&lt;/code&gt;，主要存放进程使用到的文件或者依赖的动态库，从低地址向上增长。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;栈段&lt;/strong&gt;：&lt;code&gt;Stack Segment&lt;/code&gt;，主要存放进程临时创建的局部变量，函数调用上下文信息等，栈向下增长。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231005160139650.png&#34; alt=&#34;image-20231005160139650&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;一个可执行程序，可以通过&lt;code&gt;size&lt;/code&gt;命令，查看编译出来的可执行文件大小，其中包括了代码段，数据段等数据信息，如下:&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;donge@Donge:$ size Donge-Demo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   text    data     bss     dec     hex filename&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#bd93f9&#34;&gt;12538&lt;/span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;1916&lt;/span&gt;   &lt;span style=&#34;color:#bd93f9&#34;&gt;43632&lt;/span&gt;   &lt;span style=&#34;color:#bd93f9&#34;&gt;58086&lt;/span&gt;    e2e6 Donge-Demo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;text&lt;/code&gt;：代码段大小&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;data&lt;/code&gt;：数据段大小&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bss&lt;/code&gt;：&lt;code&gt;bss&lt;/code&gt;段大小&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;dec&lt;/code&gt;：十进制表示的可执行文件大小&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;hex&lt;/code&gt;：十六进制表示的可执行文件大小&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;运行该程序后，可以通过&lt;code&gt;cat /proc/PID/maps&lt;/code&gt;命令，或者&lt;code&gt;pmap PID&lt;/code&gt;命令，来查看该进程在虚拟内存空间中的分配情况，其中PID为进程的PID号，如下:&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Linux API 揭秘】container_of函数详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_api/linux-api-%E6%8F%AD%E7%A7%98container_of%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 13 Dec 2023 21:56:32 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_api/linux-api-%E6%8F%AD%E7%A7%98container_of%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;linux-api-揭秘container_of函数详解&#34;&gt;&#xA;  【Linux API 揭秘】container_of函数详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux-api-%e6%8f%ad%e7%a7%98container_of%e5%87%bd%e6%95%b0%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Linux Version：6.6&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Author：Donge&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Github：&lt;a href=&#34;https://github.com/UNIONDONG/linux-api-insides&#34;&gt;linux-api-insides&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1container_of函数介绍&#34;&gt;&#xA;  1、container_of函数介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1container_of%e5%87%bd%e6%95%b0%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;container_of&lt;/code&gt;可以说是内核中使用最为频繁的一个函数了，简单来说，它的主要作用就是根据我们结构体中的已知的成员变量的地址，来寻求该结构体的首地址，直接看图，更容易理解。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231212195328080.png&#34; alt=&#34;image-20231212195328080&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;下面我们看看&lt;code&gt;linux&lt;/code&gt;是如何实现的吧&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;2container_of函数实现&#34;&gt;&#xA;  2、container_of函数实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2container_of%e5%87%bd%e6%95%b0%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * container_of - cast a member of a structure out to the containing structure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @ptr:&#x9;the pointer to the member.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @type:&#x9;the type of the container struct this is embedded in.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @member:&#x9;the name of the member within the struct.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * WARNING: any const qualifier of @ptr is lost.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define container_of(ptr, type, member) ({&#x9;&#x9;&#x9;&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#x9;void *__mptr = (void *)(ptr);&#x9;&#x9;&#x9;&#x9;&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#x9;static_assert(__same_type(*(ptr), ((type *)0)-&amp;gt;member) ||&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#x9;&#x9;      __same_type(*(ptr), void),&#x9;&#x9;&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#x9;&#x9;      &amp;#34;pointer type mismatch in container_of()&amp;#34;);&#x9;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#x9;((type *)(__mptr - offsetof(type, member))); })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;函数名称&lt;/strong&gt;：&lt;code&gt;container_of&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>二、uboot启动流程分析</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/uboot/%E4%BA%8Cuboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 17 Nov 2023 22:11:57 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/uboot/%E4%BA%8Cuboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;二uboot启动流程分析&#34;&gt;&#xA;  二、uboot启动流程分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%ba%8cuboot%e5%90%af%e5%8a%a8%e6%b5%81%e7%a8%8b%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/UNIONDONG/Get_Pic_Url/Media202203071811279.png&#34; alt=&#34;Uboot启动流程&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上一篇文章：&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/122199992&#34;&gt;（一）uboot基础了解&lt;/a&gt; 下一篇文章：&lt;a href=&#34;https://blog.csdn.net/dong__ge/article/details/122637220&#34;&gt;（三）Uboot驱动模型&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;同大多数的Bootloader一样，uboot的启动过程也分为BL1、BL2两个阶段，分别对应着&lt;code&gt;SPL&lt;/code&gt;和&lt;code&gt;Uboot&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;SPL（BL1阶段）&lt;/strong&gt;：负责开发板的基础配置和设备初始化，并且搬运Uboot到内存中，由汇编代码和少量的C语言实现&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Uboot（BL2阶段）&lt;/strong&gt;：主要负责初始化外部设备，引导Kernel启动，由纯C语言实现。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我们这篇文章，主要介绍Uboot（BL2阶段）的启动流程，BL1阶段启动流程的详细分析，可以见我的后续文章。想要深入了解的，可以好好研究下！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/02/dXOn3fe91FZQWzq.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;21程序执行流程图&#34;&gt;&#xA;  2.1、程序执行流程图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21%e7%a8%8b%e5%ba%8f%e6%89%a7%e8%a1%8c%e6%b5%81%e7%a8%8b%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们先总体来看一下Uboot的执行步骤，这里以EMMC作为启动介质，进行分析！&lt;/p&gt;&#xA;&lt;p&gt;无论是哪种启动介质，基本流程都相似，我们这就往下看！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/UNIONDONG/Get_Pic_Url/Media202202101913627.png&#34; alt=&#34;image-20220210191302537&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;==打开图片，结合文档、图片、代码进行理解！==&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;22u-bootldsuboot的入口函数&#34;&gt;&#xA;  2.2、u-boot.lds——Uboot的入口函数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22u-bootldsuboot%e7%9a%84%e5%85%a5%e5%8f%a3%e5%87%bd%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;u-boot.lds&lt;/code&gt;：是uboot工程的链接脚本文件，对于工程的编译和链接有非常重要的作用，决定了uboot的组装，并且&lt;code&gt;u-boot.lds&lt;/code&gt;链接文件中的&lt;code&gt;ENTRY(_start)&lt;/code&gt;指定了uboot程序的入口地址。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果不知道&lt;code&gt;u-boot.lds&lt;/code&gt;放到在哪里，可以通过&lt;code&gt;find -name u-boot.lds&lt;/code&gt;查找，根目录要进入到uboot的源码的位置哦！&lt;/p&gt;&#xA;&lt;p&gt;如果查找结果有很多，结合自己的板子信息，确定自己使用的&lt;code&gt;u-boot.lds&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;当然，准确的方法是查看Makefile文件，分析出来&lt;code&gt;u-boot.lds&lt;/code&gt;所生成的位置。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;在&lt;code&gt;u-boot.lds&lt;/code&gt;的文件中，可以看到&lt;code&gt;.text&lt;/code&gt;段，存放的就是执行的文本段。截取部分代码段如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;OUTPUT_FORMAT&lt;/span&gt;(&amp;#34;elf32-littlearm&amp;#34;, &amp;#34;elf32-littlearm&amp;#34;, &amp;#34;elf32-littlearm&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;OUTPUT_ARCH&lt;/span&gt;(arm)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;ENTRY&lt;/span&gt;(_start)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;SECTIONS&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; . = 0&lt;span style=&#34;color:#50fa7b&#34;&gt;x00000000&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;;&#x9;&#x9;&#x9;&#x9;@起始地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt; . = &lt;span style=&#34;color:#50fa7b&#34;&gt;ALIGN&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#6272a4&#34;&gt;;&#x9;&#x9;&#x9;&#x9;&#x9;@四字节对齐&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.text&lt;/span&gt; :&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; {&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *(.__image_copy_start)&#x9;&#x9;@映像文件复制起始地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  *(&lt;span style=&#34;color:#50fa7b&#34;&gt;.vectors&lt;/span&gt;)&#x9;&#x9;&#x9;&#x9;&#x9;@异常向量表&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;arch&lt;/span&gt;/arm/cpu/armv7/start.o (.text*)&#x9;@启动函数&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;......&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;ENTRY(_start)&lt;/code&gt;：程序的入口函数，&lt;code&gt;_start&lt;/code&gt;在&lt;code&gt;arch/arm/lib/vectors.S&lt;/code&gt;中定义&lt;code&gt;.globl _start&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WiFi无缝漫游详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/wifi/wifi%E6%97%A0%E7%BC%9D%E6%BC%AB%E6%B8%B8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 20 Jan 2024 10:23:36 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/wifi/wifi%E6%97%A0%E7%BC%9D%E6%BC%AB%E6%B8%B8%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;wifi无缝漫游详解&#34;&gt;&#xA;  WiFi无缝漫游详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#wifi%e6%97%a0%e7%bc%9d%e6%bc%ab%e6%b8%b8%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1wlan漫游简介&#34;&gt;&#xA;  1、WLAN漫游简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1wlan%e6%bc%ab%e6%b8%b8%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;百度百科&lt;/strong&gt;：：当网络环境存在多个相同SSID的AP，且它们的覆盖范围的重合时，无线用户可以在整个WLAN覆盖区内移动，无线网卡能够自动发现附近信号强度最大的AP，并通过这个AP收发数据，保持不间断的网络连接，这就称为无线漫游。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;简单来说&lt;/strong&gt;：&lt;code&gt;WLAN&lt;/code&gt;漫游是指&lt;code&gt;STA&lt;/code&gt;在不同的&lt;code&gt;AP&lt;/code&gt;覆盖范围之间移动，且保持用户业务不中断的行为。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;AP&lt;/strong&gt;：也就是无线接入点，是一个无线网络的创建者，是&lt;strong&gt;网络的中心节点&lt;/strong&gt;。一般家庭或办公室使用的无线路由器就一个AP。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;STA&lt;/strong&gt;：每一个连接到无线网络中的&lt;strong&gt;终端&lt;/strong&gt;(如笔记本电脑、PDA及其它可以联网的用户设备)都可称为一个站点。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如下图所示，&lt;code&gt;STA1&lt;/code&gt;从&lt;code&gt;AP1&lt;/code&gt;的覆盖范围移动到&lt;code&gt;AP2&lt;/code&gt;的覆盖范围时保持业务不中断。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/1161761-20190808105029933-1487137636.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2wifi漫游由来&#34;&gt;&#xA;  2、WiFi漫游由来&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2wifi%e6%bc%ab%e6%b8%b8%e7%94%b1%e6%9d%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;当家庭面积超过一定面积后，为了保证全家范围的wifi网络覆盖，我们就需要引入2个以上的WiFi接入点了。在多个WiFi接入点下，为了优化网络使用体验，免去手动切换wifi接入的麻烦，就需要引入WiFi漫游。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;伪漫游&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;一般&lt;strong&gt;最常见的伪漫游方法&lt;/strong&gt;就是将2个以上的wifi接入点的SSID名称及密码设置相同，虽然起到了一定的切换作用，不过用过的朋友都知道效果非常的不好，先不说能否自动切换的问题，就算切换成功了，也会造成IP地址的改变，游戏掉网、断连接是必须的！因此在多AP情况下就必须引入一个新的名词：&lt;strong&gt;Wifi快速漫游&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;WiFi漫游&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;上文提到的设置SSID名称及密码相同的方案是最低能的做法，稍微懂一点网络知识的朋友都不会采用的；&lt;/p&gt;&#xA;&lt;p&gt;最次的方案也是要&lt;strong&gt;保证DHCP服务器的统一，保证切换Wifi时候IP地址不变。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;更进一阶，引入AC控制器，利用AC+AP的组合形式实现wifi漫游。目前市面上主流的TPlink、爱快、Mesh等产品的方案多是如此。&lt;/p&gt;&#xA;&lt;p&gt;其根本的原理是通过AC设定AP的RSSI阈值，将信号不稳定的设备T下线，迫使终端设备重新连接信号最强的AP，实现AP的自动切换。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;实话实说这种方案对于绝大多数的用户是完全够用的，AP切换过程中网络中断时间一般在200ms-500ms左右，影响不大，确实优化了网络体验。对于网络要求不高的朋友推荐选择。不过在该方案下游戏会有一段明显的卡顿，但不会掉线。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;WiFi快速漫游&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果你是一个追求完美网络体验的朋友，而且想一次到位部署网络，不再折腾了，那么你就需要&lt;strong&gt;Wifi快速漫游&lt;/strong&gt;了。上面介绍的第二种方案，虽然效果说得过去，但仍然无法保证切换过程尽可能的少丢包及进一步缩短网络中断时间。这个时候就必须引入&lt;strong&gt;Wifi快速漫游&lt;/strong&gt;方案了，通过&lt;strong&gt;Wifi快速漫游进一步缩短网络中断时间&lt;/strong&gt;，提高网络使用体验，真正实现游戏中不卡顿&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;对于有AC控制器的Wifi网络系统中，漫游过程可以简单分为3个阶段：&lt;strong&gt;漫游触发→选择新AP→重新认证&lt;/strong&gt;。这时候就需要802.11k/v/r协议登场了。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于Wifi网络密码的存在，在重新认证阶段终端在切换AP的时候需要出示其缓存的密钥，AP检查密钥并进行四次握手，产生数据加密密钥，漫游完成。802.11r协议可以在以上基础上省略4次握手，进一步缩减了断网的时间。&lt;/li&gt;&#xA;&lt;li&gt;802.11k能告诉终端，如何快速选择漫游AP。&lt;/li&gt;&#xA;&lt;li&gt;802.11v能优化漫游触发。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;能够应用802.11k/v/r协议的Wifi漫游都可以称之为快速漫游&lt;/strong&gt;，不过这需要AP和终端都支持哦，实际上目前能够支持802.11k/v/r协议的终端并不多，苹果算是一个例外吧，新产品全都支持802.11k/v/r，所以Wifi快速漫游更适合使用苹果的土豪们&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;综上，WLAN漫游策略主要解决以下问题：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;避免漫游过程中的认证时间过长导致丢包甚至业务中断&lt;/strong&gt;：802.1x认证、Portal认证等认证过程报文交互次数和时间，大于WLAN连接过程，所以漫游需要避免重新认证授权及密钥协商过程。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;保证用户授权信息不变&lt;/strong&gt;：用户的认证和授权信息，是用户访问网络的通行证，如果需要漫游后业务不中断，必须确保用户在AC上的认证和授权信息不变&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;保证用户IP地址不变&lt;/strong&gt;：应用层协议均以IP地址和TCP/UDP Session为用户业务承载，漫游后的用户必须能够保持原IP地址不变，对应的TCP/UDP Session才能不中断，应用层数据才能够保持正常转发&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3漫游基础知识&#34;&gt;&#xA;  3、漫游基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%bc%ab%e6%b8%b8%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;WLAN漫游的网络架构&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/1161761-20190808113243125-2091597894.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;AC控制器&lt;/strong&gt;：可用来集中化控制和管理无线AP，是一个无线网络的核心，负责管理无线网络中的所有无线AP，对AP管理包括：下发配置、修改相关配置参数、射频智能管理、接入安全控制等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;漫游组&lt;/strong&gt;：在WLAN网络中，可以对不同的AC进行分组，&lt;strong&gt;STA可以在同一个组的AC间进行漫游&lt;/strong&gt;，这个组就叫漫游组。如图，AC1和AC2组成一个漫游组。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;AC间隧道&lt;/strong&gt;：为了支持AC间漫游，漫游组内的所有AC需要同步每个AC管理的STA和AP设备信息，因此在AC间建立一条隧道作为数据同步和报文转发的通道。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Master Controller&lt;/strong&gt;：STA在同一个漫游组内的AC间进行漫游，需要漫游组内的AC能够试别组内其他AC。通过选定一个AC作为Master Controller，在该AC上维护漫游组成员表，并下发到漫游组内AC，使各AC之间相互试别并建立AC间隧道，如图，选的AC1作为Master Controller.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Master Controller既可以是漫游组外的AC，也可以在漫游组内选择一个AC&lt;/li&gt;&#xA;&lt;li&gt;Master Controlle管理其他AC的同时，不能被其他Master Controlle管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;AC内漫游：如果漫游过程中关联的是同一个AC，则是AC内漫游，如图STA从AP1漫游到AP2即是AC内漫游&lt;/li&gt;&#xA;&lt;li&gt;AC间漫游：如果漫游过程中关联的不是同一个AC，则是AC间漫游，如图STA在从Ap1漫游到AP3的过程即为AC间漫游&lt;/li&gt;&#xA;&lt;li&gt;HAC （Home AC）：STA首次与漫游组内某个AC进行关联，则该AC为它的HAC&lt;/li&gt;&#xA;&lt;li&gt;HAP （Home AP）：STA首次与漫游组内某个AP进行关联，则该AP为它的HAP&lt;/li&gt;&#xA;&lt;li&gt;FAC（Foreign AC）：STA漫游后关联的AC即为它的FAC&lt;/li&gt;&#xA;&lt;li&gt;FAP（Foreign AP）：STA漫游后关联的AP即为它的FAP&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】为什么Linux内核中不经常使用typedef</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E4%B8%BA%E4%BB%80%E4%B9%88linux%E5%86%85%E6%A0%B8%E4%B8%AD%E4%B8%8D%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8typedef/</link>
      <pubDate>Fri, 19 Jan 2024 21:45:04 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E4%B8%BA%E4%BB%80%E4%B9%88linux%E5%86%85%E6%A0%B8%E4%B8%AD%E4%B8%8D%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8typedef/</guid>
      <description>&lt;h1 id=&#34;为什么-linux-内核中不经常使用-typedef&#34;&gt;&#xA;  为什么 Linux 内核中不经常使用 typedef？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88-linux-%e5%86%85%e6%a0%b8%e4%b8%ad%e4%b8%8d%e7%bb%8f%e5%b8%b8%e4%bd%bf%e7%94%a8-typedef&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/%E4%B8%BA%E4%BB%80%E4%B9%88%20Linux%20%E5%86%85%E6%A0%B8%E4%B8%AD%E4%B8%8D%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%20typedef_new.png&#34; alt=&#34;为什么 Linux 内核中不经常使用 typedef_new&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;我们在进行&lt;code&gt;Linux&lt;/code&gt;驱动开发过程中，有没有出现过这样的报错？&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WARNING: &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; not add new typedefs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不允许使用&lt;code&gt;typedef&lt;/code&gt;！&lt;/p&gt;&#xA;&lt;p&gt;虽然只是一个警告，但是如果你想往开源仓库提交代码，这就是一个必优化项。&lt;/p&gt;&#xA;&lt;p&gt;那么，为什么&lt;code&gt;Linux&lt;/code&gt;内核不建议使用&lt;code&gt;typedef&lt;/code&gt;呢？&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1linus-torvalds-的态度&#34;&gt;&#xA;  1、Linus Torvalds 的态度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1linus-torvalds-%e7%9a%84%e6%80%81%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://e0.ifengimg.com/04/2019/0601/1395346C9EA500C3E71BFAE601E0940B868EF5BB_size63_w1080_h663.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&amp;gt; On Mon, 10 Jun 2002, Linus Torvalds wrote:&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt;&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt; &amp;ndash;snip/snip&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt; &amp;gt; But in the end, maintainership matters. I personally don&amp;rsquo;t want the&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt; &amp;gt; typedef culture to get the upper hand, but I don&amp;rsquo;t mind a few of them, and&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt; &amp;gt; people who maintain their own code usually get the last word.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核调试工具——Debugfs</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7debugfs/</link>
      <pubDate>Fri, 19 Jan 2024 21:23:44 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7debugfs/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核调试工具debugfs&#34;&gt;&#xA;  【一文秒懂】Linux内核调试工具——Debugfs&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7debugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;962&#34; height=&#34;176&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/93fe500adc7d40c6bf134e9d9af12b0f.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Debugfs&lt;/code&gt;其存在的主要意义是&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;为了内核开发者向用户空间传递更多有用的信息&lt;/strong&gt;&lt;/span&gt;，与&lt;code&gt;proc&lt;/code&gt;不同，&lt;code&gt;proc&lt;/code&gt;只提供进程相关的信息；同时也与&lt;code&gt;sysfs&lt;/code&gt;不同，&lt;code&gt;sysfs&lt;/code&gt;对每个文件都要求一定的规则，而&lt;code&gt;Debugfs&lt;/code&gt;没有任何的规则。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;Debugfs&lt;/code&gt;是一种用于内核调试的虚拟文件系统。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何调试&#34;&gt;&#xA;  2、如何调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-配置debugfs&#34;&gt;&#xA;  2.1 配置&lt;code&gt;Debugfs&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e9%85%8d%e7%bd%aedebugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220813152331070.png&#34; alt=&#34;image-20220813152331070&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;进去&lt;code&gt;menuconfig&lt;/code&gt;选项中，按下&lt;code&gt;/&lt;/code&gt;搜索&lt;code&gt;CONFIG_DEBUG_FS&lt;/code&gt;关键词即可！&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;当然，可以看&lt;code&gt;Location&lt;/code&gt;在内核中的位置。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;22-挂载debugfs&#34;&gt;&#xA;  2.2 挂载&lt;code&gt;Debugfs&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e6%8c%82%e8%bd%bddebugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t debugfs none /sys/kernel/debug&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#挂载&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#查看挂载情况&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;___&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;none on /sys/kernel/debug &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; debugfs &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;rw,relatime&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;23-gpio调试&#34;&gt;&#xA;  2.3 GPIO调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-gpio%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat gpio&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; gpio-43  &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;                    |wakeup              &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; in  lo IRQ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; gpio-64  &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;                    |&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt;                  &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; in  lo IRQ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;上述只是简单的调试&lt;code&gt;GPIO&lt;/code&gt;的方法，而&lt;code&gt;Debugfs&lt;/code&gt;功能远不止于此，其提供了一些API接口，方便我们在内核中&lt;code&gt;Debug&lt;/code&gt;使用。&lt;/p&gt;&#xA;&lt;p&gt;而我们要做的，就是在我们想要进行&lt;code&gt;Debug&lt;/code&gt;的地方，注册&lt;code&gt;debugfs&lt;/code&gt;接口，然后查看我们要调试的信息。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;24-gpio的实现&#34;&gt;&#xA;  2.4 GPIO的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-gpio%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;文件&lt;code&gt;kernel\drivers\gpio\gpiolib.c&lt;/code&gt;中&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;`&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_operations gpiolib_operations &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .owner&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; THIS_MODULE,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .open&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gpiolib_open,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .read&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_read,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .llseek&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_lseek,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .release&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_release,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; __init &lt;span style=&#34;color:#50fa7b&#34;&gt;gpiolib_debugfs_init&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/* /sys/kernel/debug/gpio */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;) &lt;span style=&#34;color:#50fa7b&#34;&gt;debugfs_create_file&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gpio&amp;#34;&lt;/span&gt;, S_IFREG &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; S_IRUGO,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;gpiolib_operations);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;subsys_initcall&lt;/span&gt;(gpiolib_debugfs_init);` &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3如何使用&#34;&gt;&#xA;  3、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-使用步骤&#34;&gt;&#xA;  3.1 使用步骤&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e4%bd%bf%e7%94%a8%e6%ad%a5%e9%aa%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;想要使用&lt;code&gt;Debugfs&lt;/code&gt;功能，首先要做的就是要包含 &lt;code&gt;&amp;lt;linux/debugfs.h&amp;gt;&lt;/code&gt;头文件&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;debugfs_create_dir&lt;/code&gt;接口，创建一个文件夹，用于保存&lt;code&gt;debugfs&lt;/code&gt;所操作的文件&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;debugfs_create_file&lt;/code&gt;接口，创建多个文件进行操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;32-接口介绍&#34;&gt;&#xA;  3.2 接口介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e6%8e%a5%e5%8f%a3%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;debugfs_create_dir&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dentry &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;debugfs_create_dir&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;name, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dentry &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;parent);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;name&lt;/code&gt;：文件夹名称&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】三、MMC子系统框架</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%89mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Fri, 19 Jan 2024 21:14:38 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%89mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h1 id=&#34;mmc子系统三mmc子系统框架&#34;&gt;&#xA;  【MMC子系统】三、MMC子系统框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e4%b8%89mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;上章，我们简单了解了&lt;code&gt;EMMC&lt;/code&gt;协议，感兴趣的可以查阅一下&lt;code&gt;SD&lt;/code&gt;和&lt;code&gt;SDIO&lt;/code&gt;的协议，之所以&lt;code&gt;Linux&lt;/code&gt;内核能够对&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;、&lt;code&gt;EMMC&lt;/code&gt;进行统一管理，根本原因就是三者协议上的相似性，我们该系列文章均以&lt;code&gt;EMMC&lt;/code&gt;为剑，一层层划开包裹着的盔甲。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本系列文章，均以&lt;code&gt;Linux 4.19&lt;/code&gt;为参考&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1mmc子系统框架&#34;&gt;&#xA;  1、MMC子系统框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://hughesxu.github.io/assets/img/sample/mmc_subsystem.svg&#34; alt=&#34;MMC Subsystem&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;如上图所示，&lt;code&gt;MMC&lt;/code&gt;子系统的整体框架包括：&lt;code&gt;MMC Host&lt;/code&gt;、&lt;code&gt;MMC Core&lt;/code&gt;、&lt;code&gt;MMC Block&lt;/code&gt;。我们从下网上看：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC HOST&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;控制器驱动层，正如其名，该层主要是为了实现&lt;code&gt;MMC&lt;/code&gt;控制器的初始化，以及&lt;code&gt;MMC&lt;/code&gt;底层的数据收发操作，其直接控制的是底层寄存器，用以产生相应的通信时序。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC CORE&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;核心层，该层主要起到了承上启下的作用。对下，主要体现在注册&lt;code&gt;MMC&lt;/code&gt;总线，实现对&lt;code&gt;MMC device&lt;/code&gt;和&lt;code&gt;MMC driver&lt;/code&gt;的统一管理；对上，体现在实现&lt;code&gt;MMC&lt;/code&gt;通信协议，并向上提供相应的读写操作接口。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC BLOCK&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;块设备驱动层，其主要作用是屏蔽底层的实现逻辑，将底层抽象为卡设备，并且与虚拟文件系统关联，负责块设备请求的处理以及请求队列的管理，又称为&lt;code&gt;card&lt;/code&gt;卡驱动。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;哈哈，简单吧，我们刚开始对&lt;code&gt;MMC&lt;/code&gt;子系统框架就先了解这么多，不着急，慢慢来。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2mmc子系统文件结构&#34;&gt;&#xA;  2、MMC子系统文件结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;了解完&lt;code&gt;MMC&lt;/code&gt;子系统后，我们看一下&lt;code&gt;MMC&lt;/code&gt;驱动在&lt;code&gt;Linux&lt;/code&gt;下的目录结构，我们进入到&lt;code&gt;drivers/mmc&lt;/code&gt;目录&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drivers/mmc/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;├── core&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── block.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── bus.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── core.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── mmc.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── mmc_ops.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── ......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;├── host&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── sunxi-mmc.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── ......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;这里介绍一个方法&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果刚接触的朋友，不知道文件之间的关系是怎么样的，可以通过&lt;code&gt;Makefile&lt;/code&gt;和&lt;code&gt;Kconfig&lt;/code&gt;文件来大致看一下。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;obj-$(CONFIG_MMC)&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; mmc_core.o&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;mmc_core-y&lt;/span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; core.o bus.o host.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   mmc.o mmc_ops.o sd.o sd_ops.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   sdio.o sdio_ops.o sdio_bus.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   sdio_cis.o sdio_io.o sdio_irq.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   slot-gpio.o&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由上面可知，&lt;code&gt;MMC CORE&lt;/code&gt;核心层，包括的文件有：&lt;code&gt;core.c&lt;/code&gt;、&lt;code&gt;bus.c&lt;/code&gt;等等，&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】三、一篇文章，带你总览蓝牙协议</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%80%BB%E8%A7%88%E8%93%9D%E7%89%99%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 19 Jan 2024 21:00:08 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%80%BB%E8%A7%88%E8%93%9D%E7%89%99%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h1 id=&#34;bluetooth蓝牙开发三一篇文章带你总览蓝牙协议&#34;&gt;&#xA;  【Bluetooth|蓝牙开发】三、一篇文章，带你总览蓝牙协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bluetooth%e8%93%9d%e7%89%99%e5%bc%80%e5%8f%91%e4%b8%89%e4%b8%80%e7%af%87%e6%96%87%e7%ab%a0%e5%b8%a6%e4%bd%a0%e6%80%bb%e8%a7%88%e8%93%9d%e7%89%99%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在我们上一章节，学习了蓝牙的基础概念，发展历程，以及常见的蓝牙架构，相信大家对蓝牙也有了一定的了解！&lt;/p&gt;&#xA;&lt;p&gt;为了更好的去踏入蓝牙开发的大门，蓝牙协议栈是一个我们不得不去跨越的门槛！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220930070002304.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;蓝牙协议及其复杂，并非一文能够道尽，本篇文章主要在于对蓝牙整体的协议架构进行梳理，&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;文末官方协议附下载链接。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2蓝牙芯片架构&#34;&gt;&#xA;  2、蓝牙芯片架构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e8%93%9d%e7%89%99%e8%8a%af%e7%89%87%e6%9e%b6%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;蓝牙的核心架构，由一个&lt;code&gt;Host&lt;/code&gt;和一个或多个&lt;code&gt;Controller&lt;/code&gt;组成。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BT Host&lt;/code&gt;：一个逻辑实体，在&lt;code&gt;HCI（Host Controller Interface）&lt;/code&gt;的上层。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;BT Controller&lt;/code&gt;：一个逻辑实体，在&lt;code&gt;HCI（Host Controller Interface）&lt;/code&gt;的下层。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220927085245742.png&#34; alt=&#34;image-20220927085245742&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Bluetooth&lt;/code&gt;的主控制器，可能是以下几种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BR/EDR Controller&lt;/code&gt;：内部包含&lt;code&gt;Radio&lt;/code&gt;, &lt;code&gt;Baseband&lt;/code&gt;，&lt;code&gt;Link Manager&lt;/code&gt;，&lt;code&gt;可选的HCI&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;LE Controller&lt;/code&gt; ：内部包含&lt;code&gt;LE PHY&lt;/code&gt;，&lt;code&gt;Link Layer&lt;/code&gt; ，&lt;code&gt;可选的HCI&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;BR/EDR &amp;amp; LE Controller&lt;/code&gt; ：BR/EDR与LE的组合的控制器&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MAC/PHY (AMP) Controller&lt;/code&gt;：二级控制器，可替代的，内部包含 &lt;code&gt;802.11 PAL (Protocol Adaptation Layer)&lt;/code&gt;，&lt;code&gt;802.11 MAC&lt;/code&gt;，&lt;code&gt;PHY&lt;/code&gt;，&lt;code&gt;可选的HCI&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220927085439947.png&#34; alt=&#34;image-20220927085439947&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;根据&lt;code&gt;Host&lt;/code&gt;与&lt;code&gt;Controller&lt;/code&gt;的组成关系，常见的蓝牙芯片也分为以下几种架构：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;单模蓝牙芯片&lt;/strong&gt;：单一传统蓝牙的芯片，单一低功耗蓝牙的芯片。即（1个&lt;code&gt;Host&lt;/code&gt;结合1个&lt;code&gt;Controller&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;双模蓝牙芯片&lt;/strong&gt;：同时支持传统蓝牙和低功耗蓝牙的芯片。即（1个&lt;code&gt;Host&lt;/code&gt;结合多个&lt;code&gt;Controller&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;font color = &#34;blue&#34;&gt;&lt;strong&gt;如下图&lt;/strong&gt;：&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206072002059.png&#34; alt=&#34;image-20220607200203023&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3蓝牙协议架构视角1&#34;&gt;&#xA;  3、蓝牙协议架构——视角1&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e8%93%9d%e7%89%99%e5%8d%8f%e8%ae%ae%e6%9e%b6%e6%9e%84%e8%a7%86%e8%a7%921&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206072012045.png&#34; alt=&#34;image-20220607201228994&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;==&lt;strong&gt;上图为官方协议中所提及的图片，由全局到局部来看&lt;/strong&gt;==&lt;/p&gt;&#xA;&lt;h3 id=&#34;31-全局分析&#34;&gt;&#xA;  3.1 全局分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%85%a8%e5%b1%80%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;由下到上分析&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】三、硬件驱动层详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%89%E7%A1%AC%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 19 Jan 2024 20:27:37 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%89%E7%A1%AC%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析三硬件驱动层详解&#34;&gt;&#xA;  【LED子系统深度剖析】三、硬件驱动层详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e4%b8%89%e7%a1%ac%e4%bb%b6%e9%a9%b1%e5%8a%a8%e5%b1%82%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上篇文章我们了解了子系统的框架，下面我们来分析驱动框架中每层的实现以及作用。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230417084033734.png&#34; alt=&#34;image-20230417084033734&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;LED&lt;/code&gt;子系统中，硬件驱动层相关文件在包括：&lt;code&gt;kernel/drivers/leds/&lt;/code&gt; 目录下，其主要的函数有：&lt;code&gt;led-gpio.c&lt;/code&gt;、&lt;code&gt;led-xxx.c&lt;/code&gt;，其中&lt;code&gt;led-gpio.c&lt;/code&gt;为通用的平台驱动程序，&lt;code&gt;led-xxx.c&lt;/code&gt;为不同厂家提供的平台驱动程序。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我们在这里主要分析&lt;code&gt;led-gpio.c&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;1gpio_led_probe分析&#34;&gt;&#xA;  1、gpio_led_probe分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1gpio_led_probe%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;打开该文件，直接找到加载驱动的入口函数&lt;code&gt;gpio_led_probe&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-相关数据结构&#34;&gt;&#xA;  1.1 相关数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e7%9b%b8%e5%85%b3%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;111-gpio_led_platform_data&#34;&gt;&#xA;  1.1.1 gpio_led_platform_data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-gpio_led_platform_data&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; gpio_led_platform_data {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &#x9;&#x9;num_leds;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; gpio_led &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;leds;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define GPIO_LED_NO_BLINK_LOW&#x9;0&#x9;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* No blink GPIO state low */&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define GPIO_LED_NO_BLINK_HIGH&#x9;1&#x9;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* No blink GPIO state high */&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define GPIO_LED_BLINK&#x9;&#x9;2&#x9;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Please, blink */&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;gpio_blink_set_t&lt;/span&gt;&#x9;gpio_blink_set;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;gpio_led_platform_data&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;文件位置&lt;/strong&gt;：&lt;code&gt;include/linux/leds.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要作用&lt;/strong&gt;：&lt;code&gt;LED&lt;/code&gt;的平台数据，用于对&lt;code&gt;LED&lt;/code&gt;硬件设备的统一管理&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这个结构体用于父节点向子节点传递的数据时使用&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;112-gpio_leds_priv&#34;&gt;&#xA;  1.1.2 gpio_leds_priv&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#112-gpio_leds_priv&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; gpio_leds_priv {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; num_leds;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; gpio_led_data leds[];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;gpio_leds_priv&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】三、原子操作</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%89%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 18 Jan 2024 23:02:13 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%89%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;h1 id=&#34;深入理解linux内核锁三原子操作&#34;&gt;&#xA;  【深入理解Linux内核锁】三、原子操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3linux%e5%86%85%e6%a0%b8%e9%94%81%e4%b8%89%e5%8e%9f%e5%ad%90%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pics6.baidu.com/feed/a044ad345982b2b73288e884305a63e977099b5d.jpeg?token=534118da5c3201a68dadb33ea815373b&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1原子操作思想&#34;&gt;&#xA;  1、原子操作思想&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%8e%9f%e5%ad%90%e6%93%8d%e4%bd%9c%e6%80%9d%e6%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;原子操作&lt;code&gt;（atomic operation）&lt;/code&gt;，不可分割的操作。其通过原子变量来实现，以保证单个&lt;code&gt;CPU&lt;/code&gt;周期内，读写该变量不能被打断，进而判断该变量的值，来解决并发引起的互斥。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Atomic&lt;/code&gt;类型的变量可以在执行期间禁止中断，并保证在访问变量时的原子性。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;简单来说，我们可以把原子变量看作为一个标志位，然后再来检测该标志位的值。&lt;/p&gt;&#xA;&lt;p&gt;其原子性表现在：操作该标志位的值，不可被打断。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核中，提供了两类原子操作的接口，分别是针对&lt;strong&gt;位&lt;/strong&gt;和&lt;strong&gt;整型变量&lt;/strong&gt;的原子操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230730171728090.png&#34; alt=&#34;image-20230730171728090&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2整型变量原子操作&#34;&gt;&#xA;  2、整型变量原子操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e6%95%b4%e5%9e%8b%e5%8f%98%e9%87%8f%e5%8e%9f%e5%ad%90%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-api接口&#34;&gt;&#xA;  2.1 API接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-api%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;对于整形变量的原子操作，内核提供了一系列的 &lt;code&gt;API&lt;/code&gt;接口&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*设置原子变量的值*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ATOMIC_INIT&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);            &lt;span style=&#34;color:#6272a4&#34;&gt;/* 定义原子变量v并初始化为0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_set&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i);    &lt;span style=&#34;color:#6272a4&#34;&gt;/* 设置原子变量的值为i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*获取原子变量的值*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_read&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);        &#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 返回原子变量的值*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*原子变量的加减*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_add&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);      &lt;span style=&#34;color:#6272a4&#34;&gt;/* 原子变量增加i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_sub&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);      &lt;span style=&#34;color:#6272a4&#34;&gt;/* 原子变量减少i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*原子变量的自增，自减*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_inc&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 原子变量增加1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_dec&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);     &#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 原子变量减少1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*原子变量的操作并测试*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_inc_and_test&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/*进行对应操作后，测试原子变量值是否为0*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_dec_and_test&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_sub_and_test&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*原子变量的操作并返回*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_add_return&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/*进行对应操作后，返回新的值*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_sub_return&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_inc_return&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_dec_return&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;22-api实现&#34;&gt;&#xA;  2.2 API实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-api%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我们下面就介绍几个稍微有代表性的接口实现&lt;/p&gt;</description>
    </item>
    <item>
      <title>【NVMEM子系统深入剖析】三、核心数据结构及内在关联</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_nvmem_subsystem/nvmem%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%B8%89%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%86%85%E5%9C%A8%E5%85%B3%E8%81%94/</link>
      <pubDate>Thu, 18 Jan 2024 22:28:56 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_nvmem_subsystem/nvmem%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E4%B8%89%E6%A0%B8%E5%BF%83%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%86%85%E5%9C%A8%E5%85%B3%E8%81%94/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Linux用户态和内核态交互的几种方式</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/embeded_tech/embeded_interview/linux%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E5%86%85%E6%A0%B8%E6%80%81%E4%BA%A4%E4%BA%92%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 17 Jan 2024 21:41:10 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/embeded_tech/embeded_interview/linux%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E5%86%85%E6%A0%B8%E6%80%81%E4%BA%A4%E4%BA%92%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;linux用户态和内核态交互的几种方式&#34;&gt;&#xA;  Linux用户态和内核态交互的几种方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux%e7%94%a8%e6%88%b7%e6%80%81%e5%92%8c%e5%86%85%e6%a0%b8%e6%80%81%e4%ba%a4%e4%ba%92%e7%9a%84%e5%87%a0%e7%a7%8d%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img2.baidu.com/it/u=408265743,2883498083&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=PNG?w=522&amp;amp;h=500&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;分为内核态&lt;code&gt;Kernel Mode&lt;/code&gt;和用户态&lt;code&gt;User Mode&lt;/code&gt;，&lt;strong&gt;其通信方式主要有&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;系统调用&lt;code&gt;System Call&lt;/code&gt;&lt;/strong&gt;：最常见的用户态和内核态之间的通信方式。通过系统调用接口（&lt;code&gt;open&lt;/code&gt;、&lt;code&gt;read&lt;/code&gt;、&lt;code&gt;write&lt;/code&gt;、&lt;code&gt;fork&lt;/code&gt;等）请求内核执行特定的动作。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;中断&lt;code&gt;Interrupts&lt;/code&gt;&lt;/strong&gt;：中断包括软中断和硬中断，每当中断到来的时候，&lt;code&gt;CPU&lt;/code&gt;会暂停当前执行的用户态代码，切换到内核态来处理中断。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;信号&lt;code&gt;Signal&lt;/code&gt;&lt;/strong&gt;：内核通过&lt;code&gt;Signal&lt;/code&gt;通知用户态进程发生了某些事件，用户态注册信号处理函数，来响应特定的信号事件。如 &lt;code&gt;SIGTERM&lt;/code&gt;、&lt;code&gt;SIGINT&lt;/code&gt; 等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;共享内存&lt;code&gt;Share Memory&lt;/code&gt;&lt;/strong&gt;：允许多个进程在它们的地址空间中共享一块内存区域，从而实现用户态和内核态之间的高效通信。这种方式避免了用户态和内核态之间频繁切换的问题，但是也需要考虑到数据的同步问题，保证数据一致性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img0.baidu.com/it/u=4155245835,2490995974&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=PNG?w=598&amp;amp;h=327&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;用户态&lt;code&gt;User Mode&lt;/code&gt;访问内核态&lt;code&gt;Kernel Mode&lt;/code&gt;的&lt;strong&gt;数据交互的方式有&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;procfs&lt;/code&gt;进程文件系统&lt;/strong&gt;：一个伪文件系统，因为其不占用外部存储空间，只占有少量的内存，挂载在&lt;code&gt;/proc&lt;/code&gt;目录下&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;sysctl&lt;/code&gt;&lt;/strong&gt;：它也是一个&lt;code&gt;Linux&lt;/code&gt;命令，主要用来修改内核的运行时参数，也就是在内核运行时，动态修改内核参数。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;和 &lt;code&gt;procfs&lt;/code&gt; 的区别在于：&lt;code&gt;procfs&lt;/code&gt; 主要是输出只读数据，而 &lt;code&gt;sysctl&lt;/code&gt; 输出的大部分信息是可写的。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;sysfs&lt;/code&gt;虚拟文件系统&lt;/strong&gt;：通过&lt;code&gt;/sys&lt;/code&gt;来完成用户态和内核的通信，和 procfs 不同的是，sysfs 是将一些原本在 procfs 中的，关于设备和驱动的部分，独立出来，以 “设备树” 的形式呈现给用户。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;netlink &lt;/code&gt;接口&lt;/strong&gt;：也是最常用的一种方式，本质是&lt;code&gt;socket&lt;/code&gt;接口，使用&lt;code&gt;netlink&lt;/code&gt;用于网络相关的内核和用户进程之间的消息传递。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;共享内存&lt;code&gt;Share Memory&lt;/code&gt;&lt;/strong&gt;：允许多个进程在它们的地址空间中共享一块内存区域，从而实现用户态和内核态之间的高效数据传输。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>三、Uboot驱动模型</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/uboot/%E4%B8%89uboot%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 17 Jan 2024 21:28:52 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/uboot/%E4%B8%89uboot%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;三uboot驱动模型&#34;&gt;&#xA;  三、Uboot驱动模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%89uboot%e9%a9%b1%e5%8a%a8%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/UNIONDONG/Get_Pic_Url/Media202201221422561.jpg&#34; alt=&#34;Uboot驱动模型&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;全文耗时一周，精心汇总，希望对大家有所帮助，感觉可以的点赞，关注，不迷路，后续还有更多干货！&lt;/p&gt;&#xA;&lt;p&gt;看文章前，答应我，静下心来，慢慢品！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;31什么是uboot驱动模型&#34;&gt;&#xA;  3.1、什么是Uboot驱动模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31%e4%bb%80%e4%b9%88%e6%98%afuboot%e9%a9%b1%e5%8a%a8%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;学过Linux的朋友基本都知道Linux的设备驱动模型，Uboot根据Linux的驱动模型架构，也引入了Uboot的驱动模型（&lt;strong&gt;driver model ：DM&lt;/strong&gt;）。&lt;/p&gt;&#xA;&lt;p&gt;**这种驱动模型为驱动的定义和访问接口提供了统一的方法。**提高了驱动之间的兼容性以及访问的标准型，uboot驱动模型和kernel中的设备驱动模型类似。&lt;/p&gt;&#xA;&lt;h2 id=&#34;32为什么要有驱动模型呢&#34;&gt;&#xA;  3.2、为什么要有驱动模型呢&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e6%9c%89%e9%a9%b1%e5%8a%a8%e6%a8%a1%e5%9e%8b%e5%91%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;无论是Linux还是Uboot，一个新对象的产生必定有其要解决的问题，驱动模型也不例外！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;提高代码的可重用性&lt;/strong&gt;：为了能够使代码在不同硬件平台，不同体系架构下运行，必须要最大限度的提高代码的可重用性。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高内聚，低耦合&lt;/strong&gt;：分层的思想也是为了达到这一目标，低耦合体现在对外提供统一的抽象访问接口，高内聚将相关度紧密的集中抽象实现。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;便于管理&lt;/strong&gt;：在不断发展过程中，硬件设备越来越多，驱动程序也越来越多，为了更好的管理驱动，也需要一套优秀的驱动架构！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;33如何使用uboot的dm模型&#34;&gt;&#xA;  3.3、如何使用uboot的DM模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#33%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8uboot%e7%9a%84dm%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;DM模型的使用，可以通过menuconfig来配置。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;make menuconfig&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;menuconfig配置全局dm模型&#34;&gt;&#xA;  ①：menuconfig配置全局DM模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#menuconfig%e9%85%8d%e7%bd%ae%e5%85%a8%e5%b1%80dm%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device Drivers -&amp;gt;  Generic Driver Options -&amp;gt; Enable Driver Model  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过上面的路径来打开&lt;code&gt;Driver Model&lt;/code&gt;模型，最终配置在&lt;code&gt;.config&lt;/code&gt;文件中，&lt;code&gt;CONFIG_DM=y&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;指定某个驱动的dm模型&#34;&gt;&#xA;  ②：指定某个驱动的DM模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8c%87%e5%ae%9a%e6%9f%90%e4%b8%aa%e9%a9%b1%e5%8a%a8%e7%9a%84dm%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;全局的DM模型打开后，我们对于不通的驱动模块，使能或者失能DM功能。如MMC驱动为例：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Device Drivers -&amp;gt; MMC Host controller Support -&amp;gt; Enable MMC controllers using Driver Model&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终反映在&lt;code&gt;.config&lt;/code&gt;文件中的&lt;code&gt;CONFIG_DM_MMC=y&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;在对应的驱动中，可以看到判断&lt;code&gt;#if !CONFIG_IS_ENABLED(DM_MMC)&lt;/code&gt;，来判断是否打开DM驱动模型。&lt;/p&gt;&#xA;&lt;p&gt;在管理驱动的&lt;code&gt;Makefile&lt;/code&gt;文件中，也能看到&lt;code&gt;obj-$(CONFIG_$(SPL_)DM_MMC) += mmc-uclass.o&lt;/code&gt;，来判断是否将驱动模型加入到编译选项中。&lt;/p&gt;&#xA;&lt;p&gt;总之，我们要打开DM模型，最后反映在几个配置信息上：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DM=y&lt;/code&gt;，全局DM模型打开&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DM_XXX=y&lt;/code&gt;，某个驱动的DM模型的打开&lt;/li&gt;&#xA;&lt;li&gt;可以通过&lt;code&gt;Kconifg&lt;/code&gt;、&lt;code&gt;Makefile&lt;/code&gt;来查看对应宏的编译情况&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/12/02/dXOn3fe91FZQWzq.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>三、虚拟地址空间管理</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E4%B8%89%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 17 Jan 2024 21:15:35 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E4%B8%89%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;linux内存管理--三虚拟地址空间管理&#34;&gt;&#xA;  Linux内存管理 | 三、虚拟地址空间管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86--%e4%b8%89%e8%99%9a%e6%8b%9f%e5%9c%b0%e5%9d%80%e7%a9%ba%e9%97%b4%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;上一节，我们主要了解了虚拟内存空间的布局情况，趁热打铁，我们直接从源代码的视角，来看一下&lt;code&gt;Linux&lt;/code&gt;内核是如何管理虚拟内存空间的。&lt;/p&gt;&#xA;&lt;p&gt;废话不多说，直接开始！&lt;/p&gt;&#xA;&lt;h2 id=&#34;1用户态空间管理&#34;&gt;&#xA;  1、用户态空间管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e7%94%a8%e6%88%b7%e6%80%81%e7%a9%ba%e9%97%b4%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;读完上一节我们知道，用户态的布局情况如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231005160139650.png&#34; alt=&#34;image-20231005160139650&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们运行的可执行程序，被加载进内存后，会作为一个进程存在，这个进程&lt;code&gt;Linux&lt;/code&gt;内核会将其抽象成一个结构体。没错，它就是&lt;code&gt;task_struct&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-task_struct结构体&#34;&gt;&#xA;  1.1 task_struct结构体&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-task_struct%e7%bb%93%e6%9e%84%e4%bd%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;task_struct&lt;/code&gt;结构体是进程的抽象，进程所涉及到的内容非常多，下面只列举出一些重要的数据结构，方面理解。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// include/linux/sched.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; task_struct {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;pid_t&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;pid;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;进程PID&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;pid_t&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;tgid;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;线程PID&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; files_struct&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;files;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//  进程打开的文件信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; mm_struct&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;mm;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;进程虚拟内存空间的内存描述符&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;如上，进程抽象为&lt;code&gt;task_struct&lt;/code&gt;结构体，通过&lt;code&gt;mm_struct&lt;/code&gt;结构体来管理虚拟内存空间。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-mm_struct结构体&#34;&gt;&#xA;  1.2 mm_struct结构体&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-mm_struct%e7%bb%93%e6%9e%84%e4%bd%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;每个进程都有唯一的 &lt;code&gt;mm_struct&lt;/code&gt; 结构体，也就是前边提到的每个进程的虚拟地址空间都是独立，互不干扰的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;mm_struct&lt;/code&gt;的结构体如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;include/linux/mm_types.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; mm_struct {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; task_size;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* size of task vm space */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; mmap_base;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* base of mmap area */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; total_vm;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Total pages mapped */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; locked_vm;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Pages that have PG_mlocked set */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; pinned_vm;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Refcount permanently increased */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; data_vm;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* VM_WRITE &amp;amp; ~VM_SHARED &amp;amp; ~VM_STACK */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; exec_vm;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* VM_EXEC &amp;amp; ~VM_WRITE &amp;amp; ~VM_STACK */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; stack_vm;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* VM_STACK */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; start_code, end_code, start_data, end_data;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; start_brk, brk, start_stack;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; arg_start, arg_end, env_start, env_end;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; vm_area_struct &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;mmap;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* list of VMAs */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; rb_root mm_rb;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }__randomize_layout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】四、MMC控制器驱动层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%9B%9Bmmc%E6%8E%A7%E5%88%B6%E5%99%A8%E9%A9%B1%E5%8A%A8%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:18 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%9B%9Bmmc%E6%8E%A7%E5%88%B6%E5%99%A8%E9%A9%B1%E5%8A%A8%E5%B1%82/</guid>
      <description>&lt;h1 id=&#34;mmc子系统四mmc控制器驱动层&#34;&gt;&#xA;  【MMC子系统】四、MMC控制器驱动层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e5%9b%9bmmc%e6%8e%a7%e5%88%b6%e5%99%a8%e9%a9%b1%e5%8a%a8%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;控制器驱动层一般为&lt;code&gt;chip manufacturer&lt;/code&gt;做的事，不同的芯片实现方式不尽相同。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;内核源码，相当大的一部分都是由&lt;code&gt;Device Drivers&lt;/code&gt;程序代码组成，其次另一大部分就是那些你从来都没有听说过的&lt;code&gt;Filesystem Format&lt;/code&gt;组成，真正核心的代码非常短小精悍的。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;当然，设备驱动程序也有一套既定的框架，按照框架来编写，实现对应的接口就可以了，在这里，我们主要分析一下&lt;code&gt;MMC&lt;/code&gt;控制器驱动的实现框架，不拘泥于细节。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;下文以&lt;code&gt;sunxi-mmc.c&lt;/code&gt;为例来分析，基于&lt;code&gt;Linux4.19&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;41-通用驱动框架&#34;&gt;&#xA;  4.1 通用驱动框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e9%80%9a%e7%94%a8%e9%a9%b1%e5%8a%a8%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sunxi_mmc_probe&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; platform_device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pdev) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; of_device_id sunxi_mmc_of_match[] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun4i-a10-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun4i_a10_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun5i-a13-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun5i_a13_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun7i-a20-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun7i_a20_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun8i-a83t-emmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun8i_a83t_emmc_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun9i-a80-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun9i_a80_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun50i-a64-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun50i_a64_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun50i-a64-emmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun50i_a64_emmc_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#6272a4&#34;&gt;/* sentinel */&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_DEVICE_TABLE&lt;/span&gt;(of, sunxi_mmc_of_match);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dev_pm_ops sunxi_mmc_pm_ops &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;SET_RUNTIME_PM_OPS&lt;/span&gt;(sunxi_mmc_runtime_suspend,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               sunxi_mmc_runtime_resume,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; platform_driver sunxi_mmc_driver &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .driver &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .name&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sunxi-mmc&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .of_match_table &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;of_match_ptr&lt;/span&gt;(sunxi_mmc_of_match),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .pm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sunxi_mmc_pm_ops,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .probe&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sunxi_mmc_probe,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .remove&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sunxi_mmc_remove,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;module_platform_driver&lt;/span&gt;(sunxi_mmc_driver);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_DESCRIPTION&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Allwinner&amp;#39;s SD/MMC Card Controller Driver&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_LICENSE&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GPL v2&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_AUTHOR&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;David Lanzendörfer &amp;lt;david.lanzendoerfer@o2s.ch&amp;gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_ALIAS&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;platform:sunxi-mmc&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这套基本的框架，老生常谈，其主要功能就是：按照&lt;code&gt;of_match_table&lt;/code&gt;匹配表，来实现&lt;code&gt;platform_device&lt;/code&gt;和&lt;code&gt;platform_driver&lt;/code&gt;的匹配，然后执行&lt;code&gt;probe&lt;/code&gt;函数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】四、BLE协议之物理层浅析</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%9B%9Bble%E5%8D%8F%E8%AE%AE%E4%B9%8B%E7%89%A9%E7%90%86%E5%B1%82%E6%B5%85%E6%9E%90/</link>
      <pubDate>Fri, 19 Jan 2024 21:00:17 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%9B%9Bble%E5%8D%8F%E8%AE%AE%E4%B9%8B%E7%89%A9%E7%90%86%E5%B1%82%E6%B5%85%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;bluetooth蓝牙开发四ble协议之物理层浅析&#34;&gt;&#xA;  【Bluetooth|蓝牙开发】四、BLE协议之物理层浅析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bluetooth%e8%93%9d%e7%89%99%e5%bc%80%e5%8f%91%e5%9b%9bble%e5%8d%8f%e8%ae%ae%e4%b9%8b%e7%89%a9%e7%90%86%e5%b1%82%e6%b5%85%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;上文，通过对蓝牙协议框架进行整体了解，其包含&lt;code&gt;BR/EDR((Basic Rate / Enhanced Data Rate))&lt;/code&gt;、&lt;code&gt;AMP(Alternate MAC/PHYs)&lt;/code&gt;、&lt;code&gt;LE(Low Energy)&lt;/code&gt;三种技术，不同技术对应不同的协议栈，本专栏目前对于&lt;code&gt;BLE&lt;/code&gt;技术进行详解！&lt;/p&gt;&#xA;&lt;p&gt;==下面我们将&lt;code&gt;BLE&lt;/code&gt;部分单独抽离出来，单独对其进行研究。==&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;&lt;code&gt;BLE&lt;/code&gt;的协议可分为&lt;code&gt;Bluetooth Application&lt;/code&gt;和&lt;code&gt;Bluetooth Core&lt;/code&gt;两大部分，而&lt;code&gt;Bluetooth Core&lt;/code&gt;又包含&lt;code&gt;BLE Controller&lt;/code&gt;和&lt;code&gt;BLE Host&lt;/code&gt;两部分。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;快把小本本拿起来，一定要记住！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141522981.gif&#34; alt=&#34;ble_stack&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;blue&#34;&gt;我们先从&lt;strong&gt;Physical Layer&lt;/strong&gt;开始分析&lt;/font&gt;&lt;/p&gt;&#xA;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141046098.gif&#34; alt=&#34;img&#34; style=&#34;zoom:10%;&#34; /&gt;&#xA;&lt;h2 id=&#34;2physical-channel&#34;&gt;&#xA;  2、Physical Channel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2physical-channel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;任何一个通信系统，首先要确定的就是通信介质（物理通道，&lt;code&gt;Physical Channel&lt;/code&gt;），&lt;code&gt;BLE&lt;/code&gt;也不例外。在&lt;code&gt;BLE&lt;/code&gt;协议中，“通信介质”的定义是由&lt;code&gt;Physical Layer&lt;/code&gt;负责。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Physical Layer&lt;/code&gt;是这样描述&lt;code&gt;BLE&lt;/code&gt;的通信介质的：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;BLE&lt;/code&gt;属于无线通信，则其通信介质是一定频率范围下的频带资源&lt;code&gt;（Frequency Band）&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;BLE&lt;/code&gt;的市场定位是个体和民用，因此使用免费的&lt;code&gt;ISM&lt;/code&gt;频段&lt;code&gt;（频率范围是2.400-2.4835 GHz）&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为了同时支持多个设备，将整个频带分为40份，每份的带宽为&lt;code&gt;2MHz&lt;/code&gt;，称作&lt;code&gt;RF Channel&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;经过上面的定义之后，&lt;code&gt;BLE&lt;/code&gt;的物理通道划分已经明了了！&#xA;$$&#xA;频点(f)=2402(MHz)+k*2(MHz),k=(0&amp;hellip;39)&#xA;$$&#xA;每个&lt;code&gt;Channel&lt;/code&gt;的带宽为&lt;code&gt;2MHz&lt;/code&gt;，如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141550572.png&#34; alt=&#34;image-20220614155032530&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3physical-channel的细分&#34;&gt;&#xA;  3、Physical Channel的细分&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3physical-channel%e7%9a%84%e7%bb%86%e5%88%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;上面我们已经知道了，物理层被划分为了40个赛道，由于传输数据量的不同，为了更加充分利用好物理资源，进一步对通道进行了划分！&lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;40个&lt;code&gt;Physical Channel&lt;/code&gt;物理通道分别划分为3个广播通道&lt;code&gt;advertising channel&lt;/code&gt;，和37个&lt;code&gt;Data Channel&lt;/code&gt;数据通道。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;对于数据量少，发送不频繁，时延不敏感的场景，使用广播通道通信。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;例如一个传感器节点（如温度传感器），需要定时（如1s）向处理中心发送传感器数据（如温度）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】四、核心层详解（一）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%9B%9B%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%B8%80/</link>
      <pubDate>Fri, 19 Jan 2024 20:29:24 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%9B%9B%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析四核心层详解一&#34;&gt;&#xA;  【LED子系统深度剖析】四、核心层详解（一）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e5%9b%9b%e6%a0%b8%e5%bf%83%e5%b1%82%e8%af%a6%e8%a7%a3%e4%b8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上篇文章我们了解了子系统的硬件驱动层，下面我们来分析驱动框架中核心层的实现以及作用。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230417084033734.png&#34; alt=&#34;image-20230417084033734&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;LED&lt;/code&gt;子系统框架中，核心层包括几个部分：核心层的实现部分（&lt;code&gt;led-core.c&lt;/code&gt;）、&lt;code&gt;sysfs&lt;/code&gt;文件节点创建（&lt;code&gt;led-class.c&lt;/code&gt;）、触发功能实现(&lt;code&gt;led-triggers.c&lt;/code&gt;、&lt;code&gt;driver/leds/triggers/led-xxx.c&lt;/code&gt;)&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;其中，触发功能部分较为独立，我们暂且先不去分析。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;我们先从&lt;code&gt;led-class.c&lt;/code&gt;文件开始分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2leds_init分析&#34;&gt;&#xA;  2、leds_init分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2leds_init%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;该函数其主要是为了创建&lt;code&gt;LED&lt;/code&gt;设备文件节点，方便用户通过节点直接访问。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;该文件，我们直接拉下底部，我们直接看入口函数：&lt;code&gt;leds_init&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-相关数据结构&#34;&gt;&#xA;  2.1 相关数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%9b%b8%e5%85%b3%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;211-class&#34;&gt;&#xA;  2.1.1 class&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#211-class&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * struct class - device classes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @name:&#x9;Name of the class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @owner:&#x9;The module owner.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @class_groups: Default attributes of this class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @dev_groups:&#x9;Default attributes of the devices that belong to the class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @dev_kobj:&#x9;The kobject that represents this class and links it into the hierarchy.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @dev_uevent:&#x9;Called when a device is added, removed from this class, or a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;few other things that generate uevents to add the environment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;variables.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @devnode:&#x9;Callback to provide the devtmpfs.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @class_release: Called to release this class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @dev_release: Called to release the device.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @shutdown_pre: Called at shut-down time before driver shutdown.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @ns_type:&#x9;Callbacks so sysfs can detemine namespaces.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @namespace:&#x9;Namespace of the device belongs to this class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @get_ownership: Allows class to specify uid/gid of the sysfs directories&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;for the devices belonging to the class. Usually tied to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;device&amp;#39;s namespace.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @pm:&#x9;&#x9;The default device power management operations of this class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @p:&#x9;&#x9;The private data of the driver core, no one other than the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;driver core can touch this.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * A class is a higher-level view of a device that abstracts out low-level&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * implementation details. Drivers may see a SCSI disk or an ATA disk, but,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * at the class level, they are all simply disks. Classes allow user space&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * to work with devices based on what they do, rather than how they are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * connected or how they work.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; class {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; module&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; attribute_group&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;class_groups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; attribute_group&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;dev_groups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kobject&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev_kobj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev_uevent)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kobj_uevent_env &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;env);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;devnode)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#8be9fd&#34;&gt;umode_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;mode);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;class_release)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; class &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;class);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev_release)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;shutdown_pre)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kobj_ns_type_operations &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;ns_type;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;namespace)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;get_ownership)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#8be9fd&#34;&gt;kuid_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;uid, &lt;span style=&#34;color:#8be9fd&#34;&gt;kgid_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;gid);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dev_pm_ops &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; subsys_private &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;class&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】四、自旋锁</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%9B%9B%E8%87%AA%E6%97%8B%E9%94%81/</link>
      <pubDate>Thu, 18 Jan 2024 23:02:41 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%9B%9B%E8%87%AA%E6%97%8B%E9%94%81/</guid>
      <description>&lt;h1 id=&#34;深入理解linux内核锁四自旋锁&#34;&gt;&#xA;  【深入理解Linux内核锁】四、自旋锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3linux%e5%86%85%e6%a0%b8%e9%94%81%e5%9b%9b%e8%87%aa%e6%97%8b%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img1.baidu.com/it/u=2292345982,2860777693&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=640&amp;amp;h=427&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上两节主要讲解了中断屏蔽和原子操作，这两个作为最底层的操作，几乎在&lt;code&gt;Linux&lt;/code&gt;内核中都不单独使用，下面我们来带大家了解一下常用的自旋锁！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;1什么是自旋锁&#34;&gt;&#xA;  1、什么是自旋锁？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%80%e4%b9%88%e6%98%af%e8%87%aa%e6%97%8b%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;自旋锁是一种典型的对临界资源进行互斥访问的手段。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;它的底层实现逻辑是：原子变量+判断检测。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;原子变量我们可以理解为一把锁，通过操作原子变量（锁）的状态，并对其进行判断，如果锁未被锁定，我们就继续往下执行；如果锁已经被锁定，我们就原地自旋，直到等到锁被打开。&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;ARM&lt;/code&gt;平台下，自旋锁的实现使用了&lt;code&gt;ldrex&lt;/code&gt;、&lt;code&gt;strex&lt;/code&gt;、以及内存屏障指令&lt;code&gt;dmb&lt;/code&gt;、&lt;code&gt;dsb&lt;/code&gt;、&lt;code&gt;wfe&lt;/code&gt;、&lt;code&gt;sev&lt;/code&gt;等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2自旋锁思想&#34;&gt;&#xA;  2、自旋锁思想&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e8%87%aa%e6%97%8b%e9%94%81%e6%80%9d%e6%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;自旋锁主要针对于&lt;code&gt;SMP&lt;/code&gt;或者单&lt;code&gt;CPU&lt;/code&gt;但内核可抢占的情况&lt;/strong&gt;&lt;/span&gt;，对于单&lt;code&gt;CPU&lt;/code&gt;内核不可抢占的情况时，自旋锁退化为空操作。&lt;/li&gt;&#xA;&lt;li&gt;自旋锁实际为忙等锁，当锁不可用时，&lt;code&gt;CPU&lt;/code&gt;一直处于等待状态，直到该锁被释放。&lt;/li&gt;&#xA;&lt;li&gt;自旋锁可能会导致内核死锁，当递归使用自旋锁时，则将该&lt;code&gt;CPU&lt;/code&gt;锁死。&lt;/li&gt;&#xA;&lt;li&gt;在多核&lt;code&gt;SMP&lt;/code&gt;的情况下，任何一个核拿到了自旋锁，该核上的抢占调度也暂时禁止了，但是没有禁止另外一个核的抢占调度。&lt;/li&gt;&#xA;&lt;li&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;在自旋锁锁定期间，不能调用引起进程调度的函数&lt;/strong&gt;&lt;/span&gt;，如&lt;code&gt;copy_from_user()&lt;/code&gt;、&lt;code&gt;copy_to_user()&lt;/code&gt;、&lt;code&gt;kmalloc()&lt;/code&gt;和&lt;code&gt;msleep()&lt;/code&gt;，否则会导致内核崩溃&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3自旋锁的定义及实现&#34;&gt;&#xA;  3、自旋锁的定义及实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e8%87%aa%e6%97%8b%e9%94%81%e7%9a%84%e5%ae%9a%e4%b9%89%e5%8f%8a%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-api接口&#34;&gt;&#xA;  3.1 API接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-api%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;定义自旋锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;spinlock_t&lt;/span&gt; lock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;初始化自旋锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock_init&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;lock)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获得自旋锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;lock)&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获取自旋锁，如果立即获得锁，则直接返回，否则，自旋等待，直到锁被释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_trylock&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;lock)&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;尝试获取自旋锁，如果立即获得锁，返回true，否则直接返回false，不原地等待&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;释放自旋锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;lock)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自旋锁保证了不受其他&lt;code&gt;CPU&lt;/code&gt;或者单&lt;code&gt;CPU&lt;/code&gt;内的抢占进程的干扰，但是对于临界区代码，仍然有可能会受到中断和底半部的影响。&lt;/p&gt;&#xA;&lt;p&gt;为了解决这种问题，我们就要使用自旋锁的衍生。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock_irq&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_disable&lt;/span&gt;()&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获取自旋锁并关中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock_irq&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_enable&lt;/span&gt;()&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;释放自旋锁并开中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock_irqsave&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_save&lt;/span&gt;()&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获取自旋锁并关中断，保存中断状态&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock_irqrestore&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_restore&lt;/span&gt;()&lt;span style=&#34;color:#6272a4&#34;&gt;//释放自旋锁，开中断并恢复中断状态&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock_bh&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_bh_disable&lt;/span&gt;()&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获取自旋锁并关底半部中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock_bh&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_bh_enable&lt;/span&gt;()&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;释放自旋锁并发开底半部中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当我们的临界区代码，有可能被进程或者中断访问时，就需要在进程上下文中，调用&lt;code&gt;spin_lock_irqsave()&lt;/code&gt;、&lt;code&gt;spin_unlock_irqrestore()&lt;/code&gt;，在中断上下文中调用&lt;code&gt;spin_lock()&lt;/code&gt;、&lt;code&gt;spin_unlock()&lt;/code&gt;，如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230605140910971.png&#34; alt=&#34;image-20230605140910971&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;TODO：替换图片&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;32-api实现&#34;&gt;&#xA;  3.2 API实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-api%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;321-结构体spinlock_traw_spinlockarch_spinlock_t&#34;&gt;&#xA;  3.2.1 结构体spinlock_t、raw_spinlock、arch_spinlock_t&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#321-%e7%bb%93%e6%9e%84%e4%bd%93spinlock_traw_spinlockarch_spinlock_t&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; spinlock {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;union&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; raw_spinlock rlock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_DEBUG_LOCK_ALLOC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;# define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u6 __padding[LOCK_PADSIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; lockdep_map dep_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8be9fd&#34;&gt;spinlock_t&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; raw_spinlock {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;arch_spinlock_t&lt;/span&gt; raw_lock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_DEBUG_SPINLOCK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; magic, owner_cpu;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_DEBUG_LOCK_ALLOC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; lockdep_map dep_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#8be9fd&#34;&gt;raw_spinlock_t&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;union&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        u32 slock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; __raw_tickets {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef __ARMEB__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;            u16 next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u16 owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;            u16 owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u16 next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;        } tickets;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8be9fd&#34;&gt;arch_spinlock_t&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;spinlock_t&lt;/code&gt;、&lt;code&gt;raw_spinlock&lt;/code&gt;、&lt;code&gt;arch_spinlock_t&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【NVMEM子系统深入剖析】四、efuse驱动实现流程</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_nvmem_subsystem/nvmem%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%9B%9Befuse%E9%A9%B1%E5%8A%A8%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Thu, 18 Jan 2024 22:28:17 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_nvmem_subsystem/nvmem%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%9B%9Befuse%E9%A9%B1%E5%8A%A8%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>四、Uboot命令行模式分析</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/uboot/%E5%9B%9Buboot%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 17 Jan 2024 21:31:50 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/uboot/%E5%9B%9Buboot%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;四uboot命令行模式分析&#34;&gt;&#xA;  四、Uboot命令行模式分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9b%9buboot%e5%91%bd%e4%bb%a4%e8%a1%8c%e6%a8%a1%e5%bc%8f%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202205312213482.png&#34; alt=&#34;四、Uboot命令行模式分析&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;前几篇文章，我们也了解了&lt;code&gt;Uboot&lt;/code&gt;的启动流程，那么这节就主要讲讲&lt;code&gt;Uboot&lt;/code&gt;的命令行模式。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;另外，文章末尾还提供&lt;code&gt;eMMC5.1官方标准协议.pdf&lt;/code&gt;和&lt;code&gt;eMMC4.51官方标准协议-中文.pdf&lt;/code&gt;下载渠道，方便深入了解底层协议。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;正文如下&lt;/strong&gt;：&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;41-如何进入命令行模式&#34;&gt;&#xA;  4.1 如何进入命令行模式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e5%a6%82%e4%bd%95%e8%bf%9b%e5%85%a5%e5%91%bd%e4%bb%a4%e8%a1%8c%e6%a8%a1%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们正常启动流程，默认是直接跳过&lt;code&gt;Uboot&lt;/code&gt;命令行模式的，因为&lt;code&gt;Uboot&lt;/code&gt;主要的作用是引导&lt;code&gt;Kernel&lt;/code&gt;，一般我们不进行&lt;code&gt;uboot&lt;/code&gt;开发时，都默认跳过进入命令行模式。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;那么，我们要想进入Uboot命令行模式，需要进行哪些配置呢？&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;打开我们准备好一份Uboot源码，进入menuconfig配置菜单，主要设置下列几个配置信息！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_CMDLINE&lt;/code&gt;：命令行模式开关&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_SYS_PROMPT&lt;/code&gt;：命令行模式提示符&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_HUSH_PARSER&lt;/code&gt;：使用hush shell 来对命令进行解析&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;BOOTDELAY&lt;/code&gt;：设置启动延时&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;：&lt;code&gt;meneconfig&lt;/code&gt;中查找苦难？实时&lt;code&gt;/&lt;/code&gt;符号，输入&lt;code&gt;1或2或3&lt;/code&gt;，直接查找指定标识。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202205311655629.png&#34; alt=&#34;image-20220531165504571&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;打开之后，重新编译，并将&lt;code&gt;Uboot&lt;/code&gt;镜像烧录到开发板中，再次启动，我们就能够看到倒计时。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:47&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;U-Boot 2020.10-rc1-00043-ge62a6d17c6-dirty &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;Feb &lt;span style=&#34;color:#bd93f9&#34;&gt;08&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2022&lt;/span&gt; - 10:14:14 +0800&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:47&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:47&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;Model: xxxxxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:47&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;MMC:   mmc1@xxxxxx: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:47&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;In:    serial&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:47&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;Out:   serial&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:47&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;Err:   serial&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:47&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;Model: xxxxxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;2022-03-02:13:33:49&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;Hit any key to stop autoboot:  &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Hit any key to stop autoboot&lt;/code&gt;：我们在倒计时结束前，任意键入一个按键，即可进入！&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;42-uboot基本命令解析&#34;&gt;&#xA;  4.2 &lt;code&gt;Uboot&lt;/code&gt;基本命令解析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#42-uboot%e5%9f%ba%e6%9c%ac%e5%91%bd%e4%bb%a4%e8%a7%a3%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;进入&lt;code&gt;Uboot&lt;/code&gt;命令行模式后，键入&lt;code&gt;help&lt;/code&gt;或者&lt;code&gt;?&lt;/code&gt;，可以查看所有支持的&lt;code&gt;Uboot&lt;/code&gt;命令。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202205311702352.png&#34; alt=&#34;image-20220531170218298&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;code&gt;Uboot&lt;/code&gt;支持的命令大都远远超过显示的，还有好多没有打开，可以在&lt;code&gt;menuconfig&lt;/code&gt;中，打开相应的功能，如&lt;code&gt;mmc&lt;/code&gt;相关的，&lt;code&gt;md&lt;/code&gt;内存相关的。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;常用命令如下&lt;/strong&gt;&lt;/font&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>四、物理地址空间设计模型</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E5%9B%9B%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 17 Jan 2024 21:15:48 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E5%9B%9B%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;linux内存管理--四物理地址空间设计模型&#34;&gt;&#xA;  Linux内存管理 | 四、物理地址空间设计模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86--%e5%9b%9b%e7%89%a9%e7%90%86%e5%9c%b0%e5%9d%80%e7%a9%ba%e9%97%b4%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;前面几篇文章，主要讲解了虚拟内存空间的布局和管理，下面同步来聊聊物理内存空间的布局和管理。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1物理内存&#34;&gt;&#xA;  1、物理内存&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e7%89%a9%e7%90%86%e5%86%85%e5%ad%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;什么是物理内存？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;我们平时聊的内存，也叫随机访问存储器&lt;code&gt;（random-access memory）&lt;/code&gt;，也叫&lt;code&gt;RAM&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;RAM&lt;/code&gt;分为两类：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SRAM&lt;/code&gt;：静态&lt;code&gt;RAM&lt;/code&gt;，其主要用于&lt;code&gt;CPU&lt;/code&gt;高速缓存 &lt;code&gt;L1Cache&lt;/code&gt;，&lt;code&gt;L2Cache&lt;/code&gt;，&lt;code&gt;L3Cache&lt;/code&gt;，其特点是访问速度快，访问速度为 1 - 30 个时钟周期，但是容量小，造价高。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/560cee15346204f216f8b144a6c2a18c.png&#34; alt=&#34;CPU缓存结构.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;DRAM&lt;/code&gt;：动态&lt;code&gt;RAM&lt;/code&gt;，其主要用于我们常说的主存上，其特点的是访问速度慢（相对高速缓存），访问速度为 50 - 200 个时钟周期，但是容量大，造价便宜些（相对高速缓存）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/647cd97d53cb7d2a67067c90996fa4e8.png&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DRAM&lt;/code&gt;经过组合起来，就作为我们的计算机内存，也是物理内存。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2物理内存访问模型&#34;&gt;&#xA;  2、物理内存访问模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e7%89%a9%e7%90%86%e5%86%85%e5%ad%98%e8%ae%bf%e9%97%ae%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;上面介绍了物理内存的基本组成，那么&lt;code&gt;CPU&lt;/code&gt;是如何访问物理内存的呢？&lt;/p&gt;&#xA;&lt;p&gt;对于&lt;code&gt;CPU&lt;/code&gt;访问物理内存，&lt;code&gt;Linux&lt;/code&gt;提供了两种架构：&lt;code&gt;UMA(Uniform Memory Access)&lt;/code&gt;一致内存访问，&lt;code&gt;NUMA(Non-Uniform Memory Access)&lt;/code&gt;非一致内存访问。&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-uma&#34;&gt;&#xA;  2.1 UMA&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-uma&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在&lt;code&gt;UMA&lt;/code&gt;架构下，多核处理器中的多个&lt;code&gt;CPU&lt;/code&gt;，位于总线的一侧，所有的内存条组成的物理内存位于总线的另一侧。&lt;/p&gt;&#xA;&lt;p&gt;所有的&lt;code&gt;CPU&lt;/code&gt;访问内存都要经过总线，并且距离都是一样的，所以在&lt;code&gt;UMA&lt;/code&gt;架构下，&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;所有&lt;code&gt;CPU&lt;/code&gt;具有相同的访问特性，即对内存的访问具有相同的速度。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231013075142500.png&#34; alt=&#34;image-20231013075142500&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;22-numa&#34;&gt;&#xA;  2.2 NUMA&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-numa&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;这种架构，系统中的&lt;strong&gt;各个处理器都有本地内存&lt;/strong&gt;，处理器与处理器之间也通过总线连接，以便于其他处理器对本地内存的访问。&lt;/p&gt;&#xA;&lt;p&gt;&lt;font color = &#34;red&#34;&gt;&lt;strong&gt;与&lt;code&gt;UMA&lt;/code&gt;不同的是，处理器访问本地内存的速度要快于对其他处理器本地内存的访问。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231013074823586.png&#34; alt=&#34;image-20231013074823586&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3物理内存组织模型&#34;&gt;&#xA;  3、物理内存组织模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e7%89%a9%e7%90%86%e5%86%85%e5%ad%98%e7%bb%84%e7%bb%87%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;内存页是物理内存管理中最小单位，有时也成为页帧&lt;code&gt;（Page Frame）&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;内核对物理内存划分为一页一页的连续的内存块，每页大小&lt;code&gt;4KB&lt;/code&gt;，并且使用&lt;code&gt;struct page&lt;/code&gt;结构体来表示页结构，其中封装了每个页的状态信息，包括：组织结构，使用信息，统计信息等。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;page&lt;/code&gt;结构体较为复杂，我们后续再深入了解。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux网络性能测试工具——Iperf</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7iperf/</link>
      <pubDate>Sat, 20 Jan 2024 09:47:12 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7iperf/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux网络性能测试工具iperf&#34;&gt;&#xA;  【一文秒懂】Linux网络性能测试工具——Iperf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e7%bd%91%e7%bb%9c%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95%e5%b7%a5%e5%85%b7iperf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Iperf&lt;/strong&gt;是一个网络性能测试工具，可以测试最大&lt;code&gt;TCP&lt;/code&gt;和&lt;code&gt;UDP&lt;/code&gt;带宽性能，具有多种参数和UDP特性，可以根据需要调整，可以报告带宽、延迟抖动和数据包丢失。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Iperf3&lt;/strong&gt;在&lt;code&gt;NLNR/DAST&lt;/code&gt;开的的原始版本进行重新设计，其目标是更小、更简单的代码库，并且还提供&lt;code&gt;Iperf&lt;/code&gt;所不具备的新功能，如：&lt;code&gt;nuttcp&lt;/code&gt; 和&lt;code&gt;netperf&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;iperf&lt;/code&gt;有&lt;code&gt;Linux,Windows,android,Mac&lt;/code&gt;等版本，下面结合实际网络场景进行&lt;code&gt;iperf&lt;/code&gt;工具使用的介绍&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/ac6eddc451da81cbc6990e99775d2d110924312e.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;确保使用&lt;code&gt;Iperf&lt;/code&gt;测试的服务端和客户端都处于同一局域网内！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1iperf环境准备&#34;&gt;&#xA;  1、Iperf环境准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1iperf%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Iperf&lt;/code&gt;下载链接&lt;/strong&gt;：&lt;a href=&#34;https://iperf.fr/iperf-download.php#source&#34;&gt;推荐下载源码路径&lt;/a&gt;，&lt;a href=&#34;https://iperf.fr/iperf-download.php&#34;&gt;官网下载&lt;/a&gt;、&lt;a href=&#34;https://github.com/esnet/iperf/releases/tag/&#34;&gt;Github下载&lt;/a&gt;或者&lt;a href=&#34;https://downloads.es.net/pub/iperf/&#34;&gt;其他地址2&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-linux源码安装iperf&#34;&gt;&#xA;  1.1 Linux源码安装Iperf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-linux%e6%ba%90%e7%a0%81%e5%ae%89%e8%a3%85iperf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;以&lt;code&gt;Ubuntu20.04&lt;/code&gt;为例，下载压缩包&lt;code&gt;iperf-3.1.3.tar.gz&lt;/code&gt;，解压并进入目录。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -zxvf iperf-3.1.3.tar.gz&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#解压&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; iperf-3.1.3/&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#进入解压目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir linux_install_dir&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#创建安装目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure&#x9;--prefix&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/home/dong/WorkSpace/Program/iperf-3.1.3/linux_install_dir&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#--prefix设置安装目录，即iperf3生成路径，绝对路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make clean&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#清除掉之前编译的文件，确保不影响&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#编译&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入&lt;code&gt;linux_install_dir/bin&lt;/code&gt;安装目录，可以看到&lt;code&gt;iperf3&lt;/code&gt;可执行文件。我们可以通过&lt;code&gt;readelf -h iperf3 | grep Machine&lt;/code&gt;可以查看运行平台。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Machine:                           Advanced Micro Devices X86-64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;12-arm交叉编译iperf&#34;&gt;&#xA;  1.2 Arm交叉编译Iperf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-arm%e4%ba%a4%e5%8f%89%e7%bc%96%e8%af%91iperf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;以&lt;code&gt;Arm&lt;/code&gt;平台为例，解压&lt;code&gt;iperf-3.11.tar.gz&lt;/code&gt;，并进入目录。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -zxvf iperf-3.1.3.tar.gz&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#解压&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; iperf-3.1.3/&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#进入解压目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir arm_install_dir&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#创建安装目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure --host&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm-linux-gnueabihf --prefix&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/home/dong/WorkSpace/Program/iperf-3.1.3/arm_install_dir/ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CFLAGS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;-static# --host设置使用的编译器；&#x9;--prefix 安装目录； CFLAGS静态编译&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make clean&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#清除掉之前编译的文件，确保不影响&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#编译&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入&lt;code&gt;arm_install_dir/bin&lt;/code&gt;安装目录，可以看到&lt;code&gt;iperf3&lt;/code&gt;可执行文件。我们可以通过&lt;code&gt;readelf -h iperf3 | grep Machine&lt;/code&gt;可以查看运行平台。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】五、MMC核心层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%94mmc%E6%A0%B8%E5%BF%83%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:35 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%94mmc%E6%A0%B8%E5%BF%83%E5%B1%82/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】五、BLE协议之链路层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%BA%94ble%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%93%BE%E8%B7%AF%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:00:55 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%BA%94ble%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%93%BE%E8%B7%AF%E5%B1%82/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】五、核心层详解（二）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%BA%94%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%BA%8C/</link>
      <pubDate>Fri, 19 Jan 2024 20:29:33 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%BA%94%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%BA%8C/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析五核心层详解二&#34;&gt;&#xA;  【LED子系统深度剖析】五、核心层详解（二）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e4%ba%94%e6%a0%b8%e5%bf%83%e5%b1%82%e8%af%a6%e8%a7%a3%e4%ba%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上篇文章我们了解了子系统的核心层&lt;code&gt;led-class.c&lt;/code&gt;，下面我们来分析驱动框架中核心层的&lt;code&gt;led-core.c&lt;/code&gt;实现以及作用。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230417084033734.png&#34; alt=&#34;image-20230417084033734&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;我们接着从&lt;code&gt;led-core.c&lt;/code&gt;文件开始分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2led_init_core分析&#34;&gt;&#xA;  2、led_init_core分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2led_init_core%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上一篇文章，我们知道在将&lt;code&gt;leds_classdev&lt;/code&gt;注册进入子系统后，会调用&lt;code&gt;led_init_core&lt;/code&gt;函数，初始化核心层，下面我们以&lt;code&gt;led_init_core&lt;/code&gt;该函数为突破口分析。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;21-相关数据结构&#34;&gt;&#xA;  2.1 相关数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%9b%b8%e5%85%b3%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;211-work_struct&#34;&gt;&#xA;  2.1.1 work_struct&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#211-work_struct&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; work_struct {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_long_t&lt;/span&gt; data;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; list_head entry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;work_func_t&lt;/span&gt; func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_LOCKDEP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; lockdep_map lockdep_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;work_struct&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;文件位置&lt;/strong&gt;：&lt;code&gt;include/linux/workqueue.h.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要作用&lt;/strong&gt;：定义一个工作队列，包括了工作项的状态和数据，以及处理工作项的函数指针，用于实现&lt;strong&gt;异步执行任务的功能&lt;/strong&gt;。在工作队列中，每个工作项都是一个&lt;code&gt;work_struct&lt;/code&gt;结构体的实例，通过将工作项添加到工作队列中，可以实现后台执行任务的功能。&lt;/p&gt;&#xA;&lt;h4 id=&#34;212-timer_list&#34;&gt;&#xA;  2.1.2 timer_list&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#212-timer_list&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; timer_list {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * All fields that change during normal runtime grouped to the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * same cacheline&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; hlist_node&#x9;entry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;&#x9;&#x9;expires;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;&#x9;&#x9;&#x9;(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;function)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; timer_list &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u32&#x9;&#x9;&#x9;flags;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_LOCKDEP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; lockdep_map&#x9;lockdep_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;work_struct&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】五、衍生自旋锁</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%BA%94%E8%A1%8D%E7%94%9F%E8%87%AA%E6%97%8B%E9%94%81/</link>
      <pubDate>Thu, 18 Jan 2024 23:03:11 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%BA%94%E8%A1%8D%E7%94%9F%E8%87%AA%E6%97%8B%E9%94%81/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>五、物理内存空间布局及管理</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E4%BA%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80%E5%8F%8A%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 17 Jan 2024 21:16:00 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E4%BA%94%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%B8%83%E5%B1%80%E5%8F%8A%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;linux内存管理--五物理内存空间布局及管理&#34;&gt;&#xA;  Linux内存管理 | 五、物理内存空间布局及管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86--%e4%ba%94%e7%89%a9%e7%90%86%e5%86%85%e5%ad%98%e7%a9%ba%e9%97%b4%e5%b8%83%e5%b1%80%e5%8f%8a%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;上章，我们介绍了物理内存的访问内存模型和组织内存模型，我们再来回顾一下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;物理内存的访问内存模型分为&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;UMA&lt;/code&gt;：一致内存访问&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;NUMA&lt;/code&gt;：非一致内存访问&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;物理内存的组织模型&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;FLATMEM&lt;/code&gt;：平坦内存模型&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;DISCONTIGMEM&lt;/code&gt;：不连续内存模型&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SMARSEMEM&lt;/code&gt;：稀疏内存模型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;内核为了用统一的代码获取最大程度的兼容性，对物理内存的定义方面，引入了：内存结点&lt;code&gt;（node）&lt;/code&gt;、内存区域&lt;code&gt;（zone）&lt;/code&gt;，内存页&lt;code&gt;（page）&lt;/code&gt;的概念，下面我们来一一探究。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;更多干货可见：&lt;a href=&#34;https://t.zsxq.com/0eUcTOhdO&#34;&gt;高级工程师聚集地&lt;/a&gt;，助力大家更上一层楼！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1内存节点node&#34;&gt;&#xA;  1、内存节点node&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%86%85%e5%ad%98%e8%8a%82%e7%82%b9node&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;内存节点的引入，是&lt;code&gt;Linux&lt;/code&gt;为了最大程度的提高兼容性，将&lt;code&gt;UMA&lt;/code&gt;和&lt;code&gt;NUMA&lt;/code&gt;系统统一起来，对于&lt;code&gt;UMA&lt;/code&gt;而言是只有一个节点的系统&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;下面的代码部分，我们尽可能的只保留暂时用的到的部分，不涉及太多的体系架相关的细节。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核中，我们使用 &lt;code&gt;typedef struct pglist_data pg_data_t&lt;/code&gt;表示一个节点&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * On NUMA machines, each NUMA node would have a pg_data_t to describe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * it&amp;#39;s memory layout. On UMA machines there is a single pglist_data which&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * describes the whole memory.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * Memory statistics and page replacement data structures are maintained on a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * per-zone basis.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; pglist_data {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; node_id;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; page &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;node_mem_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; node_start_pfn;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; node_present_pages; &lt;span style=&#34;color:#6272a4&#34;&gt;/* total number of physical pages */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; node_spanned_pages; &lt;span style=&#34;color:#6272a4&#34;&gt;/* total size of physical page&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;                         range, including holes */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8be9fd&#34;&gt;pg_data_t&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;node_id&lt;/code&gt;：每个节点都有自己的&lt;code&gt;ID&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux调试工具——GDB介绍</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdb%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Jan 2024 10:32:28 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdb%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux调试工具gdb介绍&#34;&gt;&#xA;  【一文秒懂】Linux调试工具——GDB介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7gdb%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://c.biancheng.net/uploads/allimg/200212/1-2002122135363V.gif&#34; alt=&#34;GDB的吉祥物：弓箭鱼&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1gdb是什么&#34;&gt;&#xA;  1、GDB是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1gdb%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB：GNU Project Debugger&lt;/code&gt;是&lt;code&gt;GNU&lt;/code&gt;工程仿真器，允许开发者能够去看程序内部发生的情况，或者发生&lt;code&gt;crash&lt;/code&gt;时候， 知道程序正在做什么！它诞生于 GNU 计划（同时诞生的还有 GCC、Emacs 等），是 Linux 下常用的程序调试器。发展至今，GDB 已经迭代了诸多个版本，当下的 GDB 支持调试多种编程语言编写的程序，包括 C、C++、Go、Objective-C、OpenCL、Ada 等。实际场景中，GDB 更常用来调试 C 和 C++ 程序。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB&lt;/code&gt;主要功能有四个方面：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启动程序：指定任何可以影响其运行行为的动作&lt;/li&gt;&#xA;&lt;li&gt;停止程序：使程序在指定条件下停止&lt;/li&gt;&#xA;&lt;li&gt;检查错误：当程序停止时，检查发生了什么&lt;/li&gt;&#xA;&lt;li&gt;纠正错误：更改程序中的内容，纠正错误&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB&lt;/code&gt;可以在本地、远程、仿真器上执行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20221101152802333.png&#34; alt=&#34;image-20221101152802333&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2gdb如何使用&#34;&gt;&#xA;  2、GDB如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2gdb%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如何使用GDB？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;要想回答这个问题，从正统角度来分析，有两种方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;GDB官方手册&lt;/strong&gt;：https://sourceware.org/gdb/&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;GDB帮助信息&lt;/strong&gt;：&lt;code&gt;help all&lt;/code&gt;（命令行输入）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20221101153218534.png&#34; alt=&#34;image-20221101153218534&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;简单来说，&lt;code&gt;GDB&lt;/code&gt;调试方法有3种：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;直接调试&lt;/strong&gt;：&lt;code&gt;gdb [exec file]&lt;/code&gt;，用于直接仿真一个执行程序&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;附属调试&lt;/strong&gt;：&lt;code&gt;gdb attach pid&lt;/code&gt;，用于直接调试一个已运行的程序（&lt;code&gt;ubuntu&lt;/code&gt;注意权限问题）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心转存调试&lt;/strong&gt;：&lt;code&gt;gdb [exec file] [core-dump file]&lt;/code&gt;，用于调试&lt;code&gt;core-dump&lt;/code&gt;文件&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;：&lt;code&gt;GDB&lt;/code&gt;调试的&lt;code&gt;[exec file]&lt;/code&gt;，该文件最好编译的时候带上&lt;code&gt;-g&lt;/code&gt;选项，生成带调试信息的可执行文件。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;3gdb常用指令&#34;&gt;&#xA;  3、GDB常用指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3gdb%e5%b8%b8%e7%94%a8%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-基础指令&#34;&gt;&#xA;  3.1 基础指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%9f%ba%e7%a1%80%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;指令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;file [exec file]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;选择要调试的可执行文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;run/r&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;重新开始运行文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;暂时断点，停在第一执行语句处&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;list/l&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看源代码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;next/n&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单步调试，逐过程，函数直接执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;step/s&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单步调试，逐语句，跳入函数执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;backtrace/bt&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看函数调用的堆栈信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;finish&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;结束当前函数，返回函数调用点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;continue&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;继续执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;print/p&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;打印变量&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;break/b [filename:line_number]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;打断点, [文件名:行号]，也有多种方式&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;quit&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;退出gdb调试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;32-进阶指令&#34;&gt;&#xA;  3.2 进阶指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e8%bf%9b%e9%98%b6%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;指令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;frame&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看当前帧信息，包括参数，文件所在位置等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;该指令，可以查看到更多详细信息，如下：&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info threads&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info sharedlibrary&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看共享库信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info args&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看参数信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info breakpoints&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看断点信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info frame&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看当前帧信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;core-file [core-dump file]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;选择core-dump文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;watch [expr]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;观察某个表达式的值是否发生变化，如果有变化，马上停住程序。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;examine/x &amp;lt;n/f/u&amp;gt;&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看内存地址的值，addr为地址信息，  &lt;br&gt;n表示内存长度，f表示显示格式，u表示显示字节数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;set&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;设置变量、寄存器、内存的值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;signal [number]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;发送一个信号给该进程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;disassemble&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;反汇编，查看当前执行时的源代码的机器码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;33-多线程调试&#34;&gt;&#xA;  3.3 多线程调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#33-%e5%a4%9a%e7%ba%bf%e7%a8%8b%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;命令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info threads&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread id&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;切换到指定线程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply all bt&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程堆栈信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;set scheduler-locking off|on|step&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;off 不锁定任何线程，也就是所有线程都执行，这是默认值。  &lt;br&gt;on 只有当前被调试程序会执行。  &lt;br&gt;step 在单步的时候，除了next过一个函数的情况以外，只有当前线程会执行。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply ID1 ID2 command&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指定某个线程执行相关命令&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply all command&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指定所有线程执行相关命令&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;更多命令详细使用见参考文章&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】六、MMC块设备层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%85%ADmmc%E5%9D%97%E8%AE%BE%E5%A4%87%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:44 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%85%ADmmc%E5%9D%97%E8%AE%BE%E5%A4%87%E5%B1%82/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】六、BLE协议之传输层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%85%ADble%E5%8D%8F%E8%AE%AE%E4%B9%8B%E4%BC%A0%E8%BE%93%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:01:04 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%85%ADble%E5%8D%8F%E8%AE%AE%E4%B9%8B%E4%BC%A0%E8%BE%93%E5%B1%82/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】六、核心层详解（三）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%85%AD%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%B8%89/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:22 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%85%AD%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%B8%89/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】六、信号量</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%85%AD%E4%BF%A1%E5%8F%B7%E9%87%8F/</link>
      <pubDate>Thu, 18 Jan 2024 23:03:31 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%85%AD%E4%BF%A1%E5%8F%B7%E9%87%8F/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>六、物理内存分配——伙伴系统</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E5%85%AD%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 17 Jan 2024 21:16:10 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_memory_manage/%E5%85%AD%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%BC%99%E4%BC%B4%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;h1 id=&#34;linux内存管理--六物理内存分配伙伴系统&#34;&gt;&#xA;  Linux内存管理 | 六、物理内存分配——伙伴系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linux%e5%86%85%e5%ad%98%e7%ae%a1%e7%90%86--%e5%85%ad%e7%89%a9%e7%90%86%e5%86%85%e5%ad%98%e5%88%86%e9%85%8d%e4%bc%99%e4%bc%b4%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;上一章，我们了解了物理内存的布局以及&lt;code&gt;Linux&lt;/code&gt;内核对其的管理方式，页&lt;code&gt;（page）&lt;/code&gt;也是物理内存的最小单元，&lt;code&gt;Linux&lt;/code&gt;内核对物理内存的分配主要分为两种：一种是整页的分配，采用的是伙伴系统，另一种是小内存块的分配，采用的是&lt;code&gt;slab&lt;/code&gt;技术。&lt;/p&gt;&#xA;&lt;p&gt;下面我们先来看看什么是伙伴系统！&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1伙伴系统buddy-system&#34;&gt;&#xA;  1、伙伴系统（Buddy System）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bc%99%e4%bc%b4%e7%b3%bb%e7%bb%9fbuddy-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;系统中，对物理内存进行分配的核心是&lt;strong&gt;建立在页面级的伙伴系统之上&lt;/strong&gt;。&lt;code&gt;Linux&lt;/code&gt;内存管理的页大小为&lt;code&gt;4KB&lt;/code&gt;，把所有的空闲页分组为11个页块链表，每个链表分别包含很多个大小的页块，有 1、2、4、8、16、32、64、128、256、512 和 1024 个连续页的页块，最大可以申请 1024 个连续页，对应 &lt;code&gt;4MB&lt;/code&gt; 大小的连续内存。每个页块的第一个页的物理地址是该页块大小的整数倍。&lt;/p&gt;&#xA;&lt;p&gt;如下图所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231021143420253.png&#34; alt=&#34;image-20231021143420253&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;第 i 个页块链表中，页块中页的数目为 2^i。——仔细理解这个页块的含义。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;struct zone&lt;/code&gt;结构体中，有下面定义&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; free_area&#x9;free_area[MAX_ORDER];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define MAX_ORDER 11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;free_area&lt;/code&gt;：存放不同大小的页块&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;MAX_ORDER&lt;/code&gt;：就是指数&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;当向内核请求分配 (2^(i-1)，2^i] 数目的页块时，按照 2^i 页块请求处理。如果对应的页块链表中没有空闲页块，那我们就在更大的页块链表中去找。当分配的页块中有多余的页时，伙伴系统会根据多余的页块大小插入到对应的空闲页块链表中。&lt;/p&gt;&#xA;&lt;p&gt;举个例子：&lt;/p&gt;&#xA;&lt;p&gt;例如，要请求一个 128 个页的页块时，先检查 128 个页的页块链表是否有空闲块。如果没有，则查 256 个页的页块链表；如果有空闲块的话，则将 256 个页的页块分成两份，一份使用，一份插入 128 个页的页块链表中。如果还是没有，就查 512 个页的页块链表；如果有的话，就分裂为 128、128、256 三个页块，一个 128 的使用，剩余两个插入对应页块链表。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;上面的这套机制就是伙伴系统所做的事情，它主要负责对物理内存页面进行跟踪，记录哪些是被内核使用的页面，哪些是空闲页面。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2页面分配器page-allocator&#34;&gt;&#xA;  2、页面分配器（Page Allocator）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e9%a1%b5%e9%9d%a2%e5%88%86%e9%85%8d%e5%99%a8page-allocator&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;由上一章我们知道，物理内存被分为了几个区域：&lt;code&gt;ZONE_DMA&lt;/code&gt;、&lt;code&gt;ZONE_NORMAL&lt;/code&gt;、&lt;code&gt;ZONE_HIGHMEM&lt;/code&gt;，其中前两个区域的物理页面与虚拟地址空间是线性映射的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux远程调试工具——gdbserver</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdbserver/</link>
      <pubDate>Sat, 20 Jan 2024 10:34:18 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdbserver/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux远程调试工具gdbserver&#34;&gt;&#xA;  【一文秒懂】Linux远程调试工具——gdbserver&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e8%bf%9c%e7%a8%8b%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7gdbserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;712&#34; height=&#34;193&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/7d4df75ef808461785ff957c8a8da235.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;对于开发者来说，调试必不可少。&lt;/p&gt;&#xA;&lt;p&gt;对于开发PC软件，通常系统已经继承了调试工具（比如Linux系统的GDB），或者IDE直接支持对程序的调试。&lt;/p&gt;&#xA;&lt;p&gt;而对于开发嵌入式软件来说调试的手段比较有限，很多开发者仅有的调试手段依然是最原始的打印（我也是其中之一）。&lt;/p&gt;&#xA;&lt;p&gt;当然除了打印调试之外还有通过&lt;code&gt;gdb+gdbserver&lt;/code&gt;来调试，&lt;code&gt;gdbserver&lt;/code&gt;在目标系统中运行，&lt;code&gt;gdb&lt;/code&gt;则在宿主机上运行。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;gdbserver&lt;/code&gt; 是一个程序，它允许宿主机可以通过网络，远程调试目标板。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用&#34;&gt;&#xA;  2、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-编译器准备&#34;&gt;&#xA;  2.1 编译器准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%bc%96%e8%af%91%e5%99%a8%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;这里就不再详细讲解编译器的安装什么的了，网上一大把！&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#直接安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install gcc-arm-linux-gnueabihf&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#源码安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar zxvf gdb-7.12.tar.gz &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; gdb-7.12/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure --target&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm-linux --prefix&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$PWD&lt;/span&gt;/__install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;编译完成后，最终会生成&lt;code&gt;gdbserver&lt;/code&gt; 的可执行程序，这个就是我们要使用的工具。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;22-目标机准备&#34;&gt;&#xA;  2.2 目标机准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e7%9b%ae%e6%a0%87%e6%9c%ba%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;我们将&lt;code&gt;gdb_server&lt;/code&gt;可执行程序放置目标板上。&lt;/li&gt;&#xA;&lt;li&gt;再将我们要调试的程序放置目标板上，如&lt;code&gt;helloworld&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;gdb_server&lt;/code&gt;进行调试，使用方法如下：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/1498371-deedb3829b54d646.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gdbserver 192.168.xx.xx:1234 ./helloworld&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;192.168.xx.xx&lt;/code&gt;：IP地址信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;1234&lt;/code&gt;：自定义端口号&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;./helloworld&lt;/code&gt;：运行要仿真的程序&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;此时gdbserver监听端口号1234，并等待客户端连接。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;23-宿主机准备&#34;&gt;&#xA;  2.3 宿主机准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e5%ae%bf%e4%b8%bb%e6%9c%ba%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在宿主机(Ubuntu)上，使用&lt;code&gt;gdb&lt;/code&gt;调试&lt;/li&gt;&#xA;&lt;li&gt;远程连接目标机&lt;/li&gt;&#xA;&lt;li&gt;运行程序&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $ gdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; target remote 192.168.xx.xx:1234&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Remote debugging using :1234&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; c&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#运行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;target remote&lt;/code&gt;：远程连接到指定IP的端口&lt;/p&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】七、BLE协议之L2CAP</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%B8%83ble%E5%8D%8F%E8%AE%AE%E4%B9%8Bl2cap/</link>
      <pubDate>Fri, 19 Jan 2024 21:01:12 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%B8%83ble%E5%8D%8F%E8%AE%AE%E4%B9%8Bl2cap/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】七、触发器实现</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%83%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:29 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%83%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】七、互斥体</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%83%E4%BA%92%E6%96%A5%E4%BD%93/</link>
      <pubDate>Thu, 18 Jan 2024 23:03:38 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%83%E4%BA%92%E6%96%A5%E4%BD%93/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核死锁检测</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sat, 20 Jan 2024 10:36:40 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核死锁检测&#34;&gt;&#xA;  【一文秒懂】Linux内核死锁检测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e6%ad%bb%e9%94%81%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;最近遇到了一个驱动上面的&lt;code&gt;BUG&lt;/code&gt;，导致终端敲命令都无响应，最终导致内核触发了&lt;code&gt;hung_task_timeout&lt;/code&gt;…&lt;/p&gt;&#xA;&lt;p&gt;为什么会出现这种情况？该如何排查？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/Screenshot_20230627_222840.png&#34; alt=&#34;Screenshot_20230627_222840&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1死锁&#34;&gt;&#xA;  1、死锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e6%ad%bb%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;死锁指两个或更多进程或线程因相互等待对方释放资源而互相阻塞，从而导致系统中所有的进程或线程都无法继续运行的情况。&lt;/p&gt;&#xA;&lt;p&gt;一个典型的死锁场景包括以下几个角色：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;资源&lt;/strong&gt;：系统内的某个文件、某个设备、共享的内存区域等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;进程/线程&lt;/strong&gt;：进程或线程需要访问某个资源来完成其工作，但其当前无法取得该资源的控制权，因为该资源已被其他进程或线程占用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;饥饿&lt;/strong&gt;：由于进程无法获取其需要的资源，它不能继续前进或完成操作。如果没有正确的措施来处理和解决死锁，进程可能会一直等待，直到设备或整个系统崩溃。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2常见的死锁方式&#34;&gt;&#xA;  2、常见的死锁方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%b8%b8%e8%a7%81%e7%9a%84%e6%ad%bb%e9%94%81%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见死锁的2种方式&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AA锁：包括重复上锁和上下文切换引起的上锁，即一个线程，持有&lt;code&gt;A&lt;/code&gt;锁，还未释放，又去请求&lt;code&gt;A&lt;/code&gt;锁&lt;/li&gt;&#xA;&lt;li&gt;AB-BA死锁：一个&lt;code&gt;F1&lt;/code&gt;线程，持有&lt;code&gt;A&lt;/code&gt;锁，再去获取&lt;code&gt;B&lt;/code&gt;锁，而一个&lt;code&gt;F2&lt;/code&gt;线程持有&lt;code&gt;B&lt;/code&gt;锁，再去获取&lt;code&gt;A&lt;/code&gt;锁，这个时候处于的死锁状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见的死锁有以下4种情况&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;进程重复申请同一个锁，称为AA死锁。例如，重复申请同一个自旋锁；使用读写锁，第一次申请读锁，第二次申请写锁。&lt;/li&gt;&#xA;&lt;li&gt;进程申请自旋锁时没有禁止硬中断，进程获取自旋锁以后，硬中断抢占，申请同一个自旋锁。这种AA死锁很隐蔽，人工审查很难发现。&lt;/li&gt;&#xA;&lt;li&gt;两个进程都要获取锁L1和L2，进程1持有锁L1，再去获取锁L2，如果这个时候进程2持有锁L2并且正在尝试获取锁L1，那么进程1和进程2就会死锁，称为AB-BA死锁。&lt;/li&gt;&#xA;&lt;li&gt;在一个处理器上进程1持有锁L1，再去获取锁L2，在另一个处理器上进程2持有锁L2，硬中断抢占进程2以后获取锁L1。这种AB-BA死锁很隐蔽，人工审查很难发现。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;内核提供了&lt;code&gt;Lockdep&lt;/code&gt;来检测死锁的异常情况&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3lockdep-内核配置&#34;&gt;&#xA;  3、Lockdep 内核配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3lockdep-%e5%86%85%e6%a0%b8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_LOCKDEP&lt;/code&gt;：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_LOCK_ALLOC&lt;/code&gt;：检查内核是否错误地释放被持有的锁。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_PROVE_LOCKING&lt;/code&gt;：允许内核报告死锁问题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_LOCKDEP&lt;/code&gt; ：在死锁发生，内核报告相应的死锁&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_LOCK_STAT&lt;/code&gt;：追踪锁竞争的点，解释的更详细&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4lockdep-初探&#34;&gt;&#xA;  4、Lockdep 初探&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4lockdep-%e5%88%9d%e6%8e%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lockdep&lt;/code&gt;操作的基本单元并非单个的锁实例，而是锁类（lock-class）&lt;/strong&gt;。比如，&lt;code&gt;struct inode&lt;/code&gt;结构体中的自旋锁&lt;code&gt;i_lock&lt;/code&gt;字段就代表了这一类锁，而具体每个&lt;code&gt;inode&lt;/code&gt;节点的锁只是该类锁中的一个实例。对所有这些实例，&lt;code&gt;lockdep&lt;/code&gt;会把它们当作一个整体做处理，即把判断粒度放大，否则对可能有成千上万个的实例进行逐一判断，那处理难度可想而知，而且也没有必要.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lockdep&lt;/code&gt;跟踪每个锁类的自身状态&lt;/strong&gt;，也跟踪各个锁类之间的依赖关系，通过一系列的验证规则，以确保锁类状态和锁类之间的依赖总是正确的。另外，锁类一旦在初次使用时被注册，那么后续就会一直存在，所有它的具体实例都会关联到它。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;锁的几个状态&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ever held in STATE context –&amp;gt; 该锁曾在STATE上下文被持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head as readlock in STATE context –&amp;gt; 该锁曾在STATE上下文被以读锁形式持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head with STATE enabled –&amp;gt; 该锁曾在启用STATE的情况下被持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head as readlock with STATE enabled –&amp;gt; 该锁曾在启用STATE的情况下被以读锁形式持有过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】八、BLE协议之ATT</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%85%ABble%E5%8D%8F%E8%AE%AE%E4%B9%8Batt/</link>
      <pubDate>Fri, 19 Jan 2024 21:01:21 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%85%ABble%E5%8D%8F%E8%AE%AE%E4%B9%8Batt/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】八、小试牛刀</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%85%AB%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:38 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%85%AB%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】八、完成量</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%85%AB%E5%AE%8C%E6%88%90%E9%87%8F/</link>
      <pubDate>Thu, 18 Jan 2024 23:03:45 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%85%AB%E5%AE%8C%E6%88%90%E9%87%8F/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】如何生成core Dump文件</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90core-dump%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 20 Jan 2024 10:38:03 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90core-dump%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】九、BLE协议——GATT</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%B9%9Dble%E5%8D%8F%E8%AE%AEgatt/</link>
      <pubDate>Fri, 19 Jan 2024 21:01:29 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E4%B9%9Dble%E5%8D%8F%E8%AE%AEgatt/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】九、数据结构详解（番外篇）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B9%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3%E7%95%AA%E5%A4%96%E7%AF%87/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:46 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B9%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3%E7%95%AA%E5%A4%96%E7%AF%87/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux之Core Dump文件详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E4%B9%8Bcore-dump%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 20 Jan 2024 10:38:42 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E4%B9%8Bcore-dump%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】十、BLE蓝牙通信流程（建立连接，广播，扫描，断开连接）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%8D%81ble%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E5%B9%BF%E6%92%AD%E6%89%AB%E6%8F%8F%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Fri, 19 Jan 2024 21:01:39 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%8D%81ble%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E5%B9%BF%E6%92%AD%E6%89%AB%E6%8F%8F%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】十、详细实现流程（番外篇）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8D%81%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%E7%95%AA%E5%A4%96%E7%AF%87/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:52 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8D%81%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%E7%95%AA%E5%A4%96%E7%AF%87/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核态内存泄露检测工具</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sat, 20 Jan 2024 10:39:03 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核态内存泄露检测工具&#34;&gt;&#xA;  【一文秒懂】Linux内核态内存泄露检测工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e6%80%81%e5%86%85%e5%ad%98%e6%b3%84%e9%9c%b2%e6%a3%80%e6%b5%8b%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1kmemleak介绍&#34;&gt;&#xA;  1、Kmemleak介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1kmemleak%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核开发中，&lt;code&gt;Kmemleak&lt;/code&gt;是一种用于&lt;strong&gt;检测内核中内存泄漏的工具&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt;指的是程序中已经不再使用的内存没有被妥善地释放，导致内存的浪费。内核中的内存泄漏同样会导致系统性能下降、系统崩溃等问题。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Kmemleak&lt;/code&gt;能够检测内核中的内存泄漏，通过检测内核中未被释放但又无法找到其使用位置的内存，进一步定位、修复内存泄漏的问题。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在用户空间，我们常用&lt;code&gt;Valgrind&lt;/code&gt;来检测；&lt;/p&gt;&#xA;&lt;p&gt;在内核空间，我们常用&lt;code&gt;Kmemleak&lt;/code&gt;来检测。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用kmemleak&#34;&gt;&#xA;  2、如何使用Kmemleak&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8kmemleak&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-内核配置&#34;&gt;&#xA;  2.1 内核配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e5%86%85%e6%a0%b8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;内核打开相应配置&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK&lt;/code&gt;：&lt;code&gt;Kmemleak&lt;/code&gt;被加入到内核&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE&lt;/code&gt;设置为&lt;code&gt;16000&lt;/code&gt;：该参数为记录内存泄露信息的内存池，越大记录信息越多。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK_DEFAULT_OFF&lt;/code&gt; ：&lt;code&gt;Kmemleak&lt;/code&gt;默认开关状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;依赖的配置&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KERNEL&lt;/code&gt;：打开内核调试功能&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_FS&lt;/code&gt;：需要借助到&lt;code&gt;debugfs&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_STACKTRACE&lt;/code&gt;：记录进程的堆栈信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-用户空间配置&#34;&gt;&#xA;  2.2 用户空间配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e7%94%a8%e6%88%b7%e7%a9%ba%e9%97%b4%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;我们要想使用&lt;code&gt;Kmemleak&lt;/code&gt;，需要挂在&lt;code&gt;debugfs&lt;/code&gt;，来查看泄露的情况。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;进入文件系统后，进行挂载&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t debugfs nodev /sys/kernel/debug/&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;挂在debugfs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;设置扫描时间&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt; &amp;gt; /sys/kernel/debug/kmemleak&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;10S扫描一次&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;默认内存泄露检测时间为&lt;code&gt;10min&lt;/code&gt;，上面设置为&lt;code&gt;10s&lt;/code&gt;一次&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;查看泄露情况&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat /sys/kernel/debug/kmemleak&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;查看内存泄露情况&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;其他指令&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; scan &amp;gt; /sys/kernel/debug/kmemleak&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#触发一次扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; clear &amp;gt; /sys/kernel/debug/kmemleak     &lt;span style=&#34;color:#6272a4&#34;&gt;#清除当前 kmemleak 记录的泄露信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; off &amp;gt; /sys/kernel/debug/kmemleak       &lt;span style=&#34;color:#6272a4&#34;&gt;#关闭kmemleak（不可逆转的）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;off &amp;gt; /sys/kernel/debug/kmemleak &lt;span style=&#34;color:#6272a4&#34;&gt;#关闭任务栈扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;on &amp;gt; /sys/kernel/debug/kmemleak  &lt;span style=&#34;color:#6272a4&#34;&gt;#使能任务栈扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;on &amp;gt; /sys/kernel/debug/kmemleak   &lt;span style=&#34;color:#6272a4&#34;&gt;#启动自动内存扫描线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;off &amp;gt; /sys/kernel/debug/kmemleak  &lt;span style=&#34;color:#6272a4&#34;&gt;#停止自动内存扫描线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&amp;lt;secs&amp;gt; &amp;gt; /sys/kernel/debug/kmemleak#设置自动扫描线程扫描间隔，默认是600，设置0则是停止扫描&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dump&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&amp;lt;addr&amp;gt; &amp;gt; /sys/kernel/debug/kmemleak &lt;span style=&#34;color:#6272a4&#34;&gt;#dump某个地址的内存块信息，比如上面的echo dump=0xffffffc008efd200 &amp;gt; /sys/kernel/debug/kmemleak即可查看详细信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】十一、超详细的Bluez交叉编译</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%8D%81%E4%B8%80%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84bluez%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
      <pubDate>Fri, 19 Jan 2024 21:02:02 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%8D%81%E4%B8%80%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84bluez%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【Bluetooth蓝牙开发】十二、蓝牙调试工具【集合汇总】</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%8D%81%E4%BA%8C%E8%93%9D%E7%89%99%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88%E6%B1%87%E6%80%BB/</link>
      <pubDate>Fri, 19 Jan 2024 21:02:11 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/bluetooth/bluetooth%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91%E5%8D%81%E4%BA%8C%E8%93%9D%E7%89%99%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【10W&#43;阅读】耗时一周总结的嵌入式学习路线，超详细</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/embeded_tech/self_improve/10w&#43;%E9%98%85%E8%AF%BB%E8%80%97%E6%97%B6%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E8%B6%85%E8%AF%A6%E7%BB%86/</link>
      <pubDate>Sat, 04 Nov 2023 16:30:00 +0000</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/embeded_tech/self_improve/10w&#43;%E9%98%85%E8%AF%BB%E8%80%97%E6%97%B6%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E8%B6%85%E8%AF%A6%E7%BB%86/</guid>
      <description>&lt;h1 id=&#34;10w阅读耗时一周总结的嵌入式学习路线超详细&#34;&gt;&#xA;  【10W+阅读】耗时一周总结的嵌入式学习路线，超详细&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#10w%e9%98%85%e8%af%bb%e8%80%97%e6%97%b6%e4%b8%80%e5%91%a8%e6%80%bb%e7%bb%93%e7%9a%84%e5%b5%8c%e5%85%a5%e5%bc%8f%e5%ad%a6%e4%b9%a0%e8%b7%af%e7%ba%bf%e8%b6%85%e8%af%a6%e7%bb%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;人们常说：“人生就是一场场游戏，我们要做的，就是打怪，升级，通关”，学习嵌入式的过程也是如此。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/v2-75599ba24a4cf13c06ec719bddc7731c_720w.jpg&#34; alt=&#34;查看源图像&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;最近看到知乎上，给我推送了很多类似的回答，借此机会，也想着重新审视一下自己的学习历程，以及结合自身和大牛，分享一些学习经验，希望对大家有所启发和帮助。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;font color = &#34;blue&#34;&gt;本文主要目的是为了：&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;提供一张嵌入式学习路线地图&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;提供不同阶段的学习建议&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;推荐不同阶段的学习资料&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;3000余字，耗时1周，建议收藏；码字不易，如有帮助，慷慨三连&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;font color = &#34;blue&#34;&gt;本文将嵌入式学习路线分为几个方面：&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;嵌入式基础必备知识&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;51单片机&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;STM32单片机&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;小而美的RTOS&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ARM+LINUX&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在这个快节奏的时代，能静下心，耐住性子看看文章，实属不易。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2嵌入式基础必备知识&#34;&gt;&#xA;  2、嵌入式基础必备知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%b5%8c%e5%85%a5%e5%bc%8f%e5%9f%ba%e7%a1%80%e5%bf%85%e5%a4%87%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/R-C.7a41d73d6ddf3507857a84fdce729da0&#34; alt=&#34;查看源图像&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;老子曰：“合抱之木，生于毫末：九层之台，起于垒土；千里之行，始于足下”，根基的重要性不言而喻。&lt;/p&gt;&#xA;&lt;p&gt;那么对于嵌入式这条路线而言，如何建立一个稳固的根基？&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;21学习内容&#34;&gt;&#xA;  2.1、学习内容&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21%e5%ad%a6%e4%b9%a0%e5%86%85%e5%ae%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220618093005641.png&#34; alt=&#34;image-20220618093005641&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;C语言基础&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;该部分，主要包括几个核心知识点：&lt;strong&gt;三大语法结构&lt;/strong&gt;、&lt;strong&gt;常用的数据类型&lt;/strong&gt;、&lt;strong&gt;函数&lt;/strong&gt;、&lt;strong&gt;结构体&lt;/strong&gt;、&lt;strong&gt;指针&lt;/strong&gt;、&lt;strong&gt;文件操作&lt;/strong&gt;等。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;硬件基础知识&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;该部分，核心知识点在于：&lt;strong&gt;电路基础知识&lt;/strong&gt;、&lt;strong&gt;数电模电基础知识&lt;/strong&gt;、&lt;strong&gt;常用的电子元器件&lt;/strong&gt;等。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据结构&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;核心知识点：&lt;strong&gt;数组&lt;/strong&gt;、&lt;strong&gt;队列&lt;/strong&gt;、&lt;strong&gt;链表&lt;/strong&gt;、&lt;strong&gt;堆栈&lt;/strong&gt;、&lt;strong&gt;树&lt;/strong&gt;、&lt;strong&gt;图&lt;/strong&gt;、&lt;strong&gt;散列表&lt;/strong&gt;等。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;核心知识点：&lt;strong&gt;进程管理&lt;/strong&gt;、&lt;strong&gt;内存管理&lt;/strong&gt;、&lt;strong&gt;文件管理&lt;/strong&gt;、&lt;strong&gt;输入输出管理&lt;/strong&gt;等。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;计算机原理&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;核心知识点：&lt;strong&gt;数据表示和运算&lt;/strong&gt;、&lt;strong&gt;存储系统&lt;/strong&gt;、&lt;strong&gt;指令系统&lt;/strong&gt;、&lt;strong&gt;总线系统&lt;/strong&gt;、&lt;strong&gt;中央处理器&lt;/strong&gt;、&lt;strong&gt;输入输出系统&lt;/strong&gt;等。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22学习建议&#34;&gt;&#xA;  2.2、学习建议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22%e5%ad%a6%e4%b9%a0%e5%bb%ba%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于&lt;strong&gt;C语言基础学习&lt;/strong&gt;，一定要重点熟练掌握，根基的牢固直接决定了我们的代码质量。&lt;/li&gt;&#xA;&lt;li&gt;对于&lt;strong&gt;硬件基础学习&lt;/strong&gt;，要适当了解，要能够看懂一些简单的电路结构，认识常用的电子元器件。&lt;/li&gt;&#xA;&lt;li&gt;对于&lt;strong&gt;数据结构学习&lt;/strong&gt;，前五个是必备学习的，可能在刚开始学习的时候，可能会感觉不到作用在哪里，但是随着接触到嵌入式底层设计以及算法设计的时候，才会恍然大悟。&lt;/li&gt;&#xA;&lt;li&gt;对于&lt;strong&gt;操作系统学习&lt;/strong&gt;，重点学习其思想，对相关知识点有一个大概的了解，后续接触到继续重点学习，这些无论是RTOS，还是Linux，都有涉及到的。&lt;/li&gt;&#xA;&lt;li&gt;对于&lt;strong&gt;计算机原理学习&lt;/strong&gt;，可以将其看作是嵌入式系统的各个模块的详解，会让你对嵌入式有一个整体的了解，每一个部分都值得深究。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;23学习资料&#34;&gt;&#xA;  2.3、学习资料&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23%e5%ad%a6%e4%b9%a0%e8%b5%84%e6%96%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;C语言基础&lt;/strong&gt;：推荐经典书籍**《C语言程序设计》（第2版）谭浩强版本**。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;硬件基础&lt;/strong&gt;：大学里面的《数电模电》书籍所涉及的知识即可。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据结构&lt;/strong&gt;：推荐经典书籍**《数据结构》——严蔚敏版**。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;操作系统、计算机原理&lt;/strong&gt;：我用的是**《王道》的系列丛书**，个人感觉不错。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;计算机组成、数据结构、操作系统、数据库&lt;/strong&gt;是嵌入式或者说计算机的入门必读书籍，并且也被列入高校教材内，是真正的基础知识。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;以上，不一定是全部看完才能体验编程的乐趣，这个基础是一个循序渐进的过程，也不是一朝一夕就能完成的，可以先有一个大概，后续做项目时，哪里不懂补哪里！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;这里涉及到一个重要的学习方法：&lt;span style=&#34;color: purple;&#34;&gt;&lt;strong&gt;项目导向的学习法&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/Yocreative.github.io/about/index_zh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/about/index_zh/</guid>
      <description>&lt;h2 id=&#34;1个人介绍&#34;&gt;&#xA;  1、个人介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%b8%aa%e4%ba%ba%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;🙍🏻‍♂️  大家好，我是董哥，一名工作多年的嵌入式&lt;code&gt;Linux&lt;/code&gt;开发工程师。以下是我的基本信息介绍：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;参加全国机器人大赛&lt;code&gt;（Robocon）&lt;/code&gt;，两次获得全国一等奖&lt;/li&gt;&#xA;&lt;li&gt;毕业后斩获科沃斯，石头，格力等多家头部机器人公司的&lt;code&gt;offer&lt;/code&gt;，后入职世界五百强格力电器担任嵌入式开发工程师&lt;/li&gt;&#xA;&lt;li&gt;现今就职于独角兽芯片企业，担任嵌入式&lt;code&gt;Linux&lt;/code&gt;驱动开发工程师&lt;/li&gt;&#xA;&lt;li&gt;熟练使用&lt;code&gt;C/C++&lt;/code&gt;语言开发，熟悉各类&lt;code&gt;MCU&lt;/code&gt;开发，如&lt;code&gt;STM32&lt;/code&gt;，&lt;code&gt;ARM&lt;/code&gt;，&lt;code&gt;SOC&lt;/code&gt;等，熟悉&lt;code&gt;Ucos&lt;/code&gt;，&lt;code&gt;RT-thread&lt;/code&gt;实时操作系统等&lt;/li&gt;&#xA;&lt;li&gt;目前主要负责&lt;code&gt;Linux&lt;/code&gt;驱动，系统开发，&lt;code&gt;WiFi&amp;amp;BT&lt;/code&gt;开发等相关工作，同时跟进并参与多款百万级量产项目的研发。&lt;/li&gt;&#xA;&lt;li&gt;荣获优质嵌入式领域创作者称号，拿下2022年度博客之星嵌入式领域TOP 5，全网收获超百万读者。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2技术与分享&#34;&gt;&#xA;  2、技术与分享&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e6%8a%80%e6%9c%af%e4%b8%8e%e5%88%86%e4%ba%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;记录&lt;code&gt;Blog&lt;/code&gt;是一项值得挑战的事情，一方面是对自我技术的沉淀，另一方面也是四万万嵌入式开发者前行路上的加速剂；并且网上大多数文章七零八落，每个人对技术的理解程度不同，因此好的文章，永不过时！&lt;/p&gt;&#xA;&lt;p&gt;我的一些自媒体平台：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CSDN&lt;/code&gt;：&lt;a href=&#34;https://blog.csdn.net/dong__ge&#34;&gt;卍一十二画卍&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;知乎：&lt;a href=&#34;https://www.zhihu.com/people/Embedded_Art&#34;&gt;嵌入式艺术&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;公众号：嵌入式艺术&lt;/li&gt;&#xA;&lt;li&gt;知识星球：&lt;a href=&#34;https://t.zsxq.com/0eUcTOhdO&#34;&gt;嵌入式艺术&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3我的星球&#34;&gt;&#xA;  3、我的星球&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%88%91%e7%9a%84%e6%98%9f%e7%90%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;🚩  【嵌入式艺术】星球，目前是处于起步阶段，我们的目标是：携手共创高质量的嵌入式基地，兼收并蓄，群英荟萃，实现升职加薪创业梦！&lt;/p&gt;&#xA;&lt;p&gt;🛎️  &lt;strong&gt;我们提供的服务有&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;提供一个高级嵌入式工程师聚集地，聚焦嵌入式工程师成长与发展。&lt;/li&gt;&#xA;&lt;li&gt;高质量嵌入式项目、技术的拆解与分析&lt;/li&gt;&#xA;&lt;li&gt;高效率的嵌入式开发工具分享&lt;/li&gt;&#xA;&lt;li&gt;AIGC + 嵌入式 应用，跟上时代的脚步&lt;/li&gt;&#xA;&lt;li&gt;嵌入式的行业趋势与热点分析&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;🛎️  &lt;strong&gt;我们后续要做的事情&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;引入更多嵌入式领域大咖加入我们的星球，为大家提供更好的服务！&lt;/li&gt;&#xA;&lt;li&gt;引入更多优质公司的内推岗位，以便大家走内部推荐通道，加入头部企业！&lt;/li&gt;&#xA;&lt;li&gt;拆解更多嵌入式项目，为大家提供实战经验，以目标为导向，实现更好的学习效果！&lt;/li&gt;&#xA;&lt;li&gt;星球不定期举办激励活动，有实物激励以及现金激励两种，希望大家踊跃参加！&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/Embeded_Art_New.gif&#34; alt=&#34;Embeded_Art_New&#34; /&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
