<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux 驱动开发基础 on 悠创</title>
    <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/</link>
    <description>Recent content in Linux 驱动开发基础 on 悠创</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jan 2024 21:45:04 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【一文秒懂】Linux字符设备驱动</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Fri, 19 Jan 2024 21:40:08 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux字符设备驱动&#34;&gt;&#xA;  【一文秒懂】Linux字符设备驱动&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%ad%97%e7%ac%a6%e8%ae%be%e5%a4%87%e9%a9%b1%e5%8a%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231123091238538.png&#34; alt=&#34;image-20231123091238538&#34; /&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;众所周知，&lt;code&gt;Linux&lt;/code&gt;内核主要包括三种驱动模型，字符设备驱动，块设备驱动以及网络设备驱动。&lt;/p&gt;&#xA;&lt;p&gt;其中，&lt;code&gt;Linux&lt;/code&gt;字符设备驱动，可以说是&lt;code&gt;Linux&lt;/code&gt;驱动开发中最常见的一种驱动模型。&lt;/p&gt;&#xA;&lt;p&gt;我们该系列文章，主要为了帮助大家快速入门&lt;code&gt;Linux&lt;/code&gt;驱动开发，该篇主要来了解一些字符设备驱动的框架和机制。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;系列文章基于&lt;code&gt;Kernel 4.19&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h1 id=&#34;2关键数据结构&#34;&gt;&#xA;  2、关键数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%85%b3%e9%94%ae%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;21-cdev&#34;&gt;&#xA;  2.1 cdev&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-cdev&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; cdev {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kobject kobj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; module &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_operations &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;ops;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; list_head list;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;dev_t&lt;/span&gt; dev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; count;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} __randomize_layout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;cdev&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;文件位置&lt;/strong&gt;：&lt;code&gt;include/linux/cdev.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要作用&lt;/strong&gt;：&lt;code&gt;cdev&lt;/code&gt;可以理解为&lt;code&gt;char device&lt;/code&gt;，用来抽象一个字符设备。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;核心成员及含义&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;kobj&lt;/code&gt;：表示一个内核对象。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;owner&lt;/code&gt;：指向该模块的指针&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ops&lt;/code&gt;：指向文件操作的指针，包括&lt;code&gt;open&lt;/code&gt;、&lt;code&gt;read&lt;/code&gt;、&lt;code&gt;write&lt;/code&gt;等操作接口&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list&lt;/code&gt;：用于将该设备加入到内核模块链表中&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;dev&lt;/code&gt;：设备号，由主设备号和次设备号构成&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;count&lt;/code&gt;：表示有多少个同类型设备，也间接表示设备号的范围&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;__randomize_layout&lt;/code&gt;：一个编译器指令，用于随机化结构体的布局，以增加安全性。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;22-file_operations&#34;&gt;&#xA;  2.2 file_operations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-file_operations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_operations {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; module &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;llseek) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;read) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; __user &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;write) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; __user &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;read_iter) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kiocb &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; iov_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;write_iter) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kiocb &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; iov_iter &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;iterate) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dir_context &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;iterate_shared) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dir_context &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;__poll_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;poll) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; poll_table_struct &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;unlocked_ioctl) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;compat_ioctl) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;mmap) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; vm_area_struct &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; mmap_supported_flags;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;open) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; inode &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;flush) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;fl_owner_t&lt;/span&gt; id);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;release) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; inode &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fsync) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; datasync);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fasync) (&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;lock) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_lock &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;sendpage) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; page &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;get_unmapped_area)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;check_flags)(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;flock) (&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_lock &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;splice_write)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; pipe_inode_info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;splice_read)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; pipe_inode_info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;setlease)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_lock &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fallocate)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;file, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; mode, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; offset,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt; len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;show_fdinfo)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; seq_file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;m, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;f);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifndef CONFIG_MMU&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;mmap_capabilities)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;ssize_t&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;copy_file_range)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;size_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;clone_file_range)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u64);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dedupe_file_range)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u64);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fadvise)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;loff_t&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} __randomize_layout;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;file_operations&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux设备树详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 19 Jan 2024 21:43:13 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux设备树详解&#34;&gt;&#xA;  【一文秒懂】Linux设备树详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e8%ae%be%e5%a4%87%e6%a0%91%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1linux设备树概念&#34;&gt;&#xA;  1、Linux设备树概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1linux%e8%ae%be%e5%a4%87%e6%a0%91%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Linux内核是从V2.6开始引入设备树的概念，其起源于&lt;code&gt;OF:OpenFirmware&lt;/code&gt;， 用于&lt;strong&gt;描述一个硬件平台的硬件资源信息&lt;/strong&gt;，这些信息包括：CPU的数量和类别、内存基地址和大小、总线和桥、外设连接、中断控制器和中断使用情况、GPIO控制器和GPIO使用情况、Clock控制器和Clock使用情况等等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;官方说明&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The &amp;ldquo;Open Firmware Device Tree&amp;rdquo;, or simply Device Tree (DT), is a data structure and language for describing hardware.&lt;/p&gt;&#xA;&lt;p&gt;设备树是一种数据结构和一种用于描述硬件信息的语言。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;设备树的特点&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;实现驱动代码与设备硬件信息相分离&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;通过被&lt;code&gt;bootloader(uboot)&lt;/code&gt;和&lt;code&gt;Linux&lt;/code&gt;传递到内核， 内核可以从设备树中获取对应的硬件信息。&lt;/li&gt;&#xA;&lt;li&gt;对于同一SOC的不同主板，只需更换设备树文件即可实现不同主板的无差异支持，而无需更换内核文件，实现了&lt;strong&gt;内核和不同板级硬件数据的拆分&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://doc.embedfire.com/linux/imx6/quick_start/zh/latest/_images/device_tree001.png&#34; alt=&#34;设备树&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2设备树的由来&#34;&gt;&#xA;  2、设备树的由来&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e8%ae%be%e5%a4%87%e6%a0%91%e7%9a%84%e7%94%b1%e6%9d%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;明白了设备树的概念，不妨思考一下：&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;为什么要引入设备树？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核v2.6版本以前，&lt;code&gt;ARM&lt;/code&gt;架构用于描述不同的硬件信息的文件都存放在&lt;code&gt;arch/arm/plat-xxx&lt;/code&gt;和&lt;code&gt;arch/arm/mach-xxx&lt;/code&gt;文件夹下，如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220802090504275.png&#34; alt=&#34;image-20220802090504275&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这些文件内，都是通过手动定义不同的硬件设备，步骤非常繁琐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220802091036378.png&#34; alt=&#34;image-20220802091036378&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;这样就导致了&lt;code&gt;Linux&lt;/code&gt;内核代码中充斥着大量的垃圾代码，因为不同的板级他们的硬件信息都不相同，这些都是硬件特有的信息，对内核而言没有任何的意义，但是往往这部分代码特别的多，造成内核的冗余。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;设备树的引入就是为了解决这个问题&lt;/strong&gt;&lt;/span&gt;，通过引入设备树，我们可以直接通过它来传递给&lt;code&gt;Linux&lt;/code&gt;，而不再需要内核中大量的垃圾代码。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3设备树组成&#34;&gt;&#xA;  3、设备树组成&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e8%ae%be%e5%a4%87%e6%a0%91%e7%bb%84%e6%88%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;整个设备树牵涉面比较广，即增加了新的用于描述设备硬件信息的文本格式，又增加了编译这个文本的工具，同时还得支持&lt;code&gt;Bootloader&lt;/code&gt;解析设备树，并将信息传递给内核。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;整个设备树包含&lt;code&gt;DTC（device tree compiler）&lt;/code&gt;，&lt;code&gt;DTS（device tree source）&lt;/code&gt;和&lt;code&gt;DTB（device tree blob）&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220802091430298.png&#34; alt=&#34;image-20220802091430298&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;DTS（device tree source）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;DTS&lt;/code&gt;是一种&lt;code&gt;ASCII&lt;/code&gt;文本格式的设备树描述，在&lt;code&gt;ARM Linux&lt;/code&gt;中，一个&lt;code&gt;dts&lt;/code&gt;文件对应一个&lt;code&gt;ARM&lt;/code&gt;的设备，该文件一般放在&lt;code&gt;arch/arm/boot/dts/&lt;/code&gt;目录中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】为什么Linux内核中不经常使用typedef</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E4%B8%BA%E4%BB%80%E4%B9%88linux%E5%86%85%E6%A0%B8%E4%B8%AD%E4%B8%8D%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8typedef/</link>
      <pubDate>Fri, 19 Jan 2024 21:45:04 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_driver_develop_basic/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E4%B8%BA%E4%BB%80%E4%B9%88linux%E5%86%85%E6%A0%B8%E4%B8%AD%E4%B8%8D%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8typedef/</guid>
      <description>&lt;h1 id=&#34;为什么-linux-内核中不经常使用-typedef&#34;&gt;&#xA;  为什么 Linux 内核中不经常使用 typedef？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88-linux-%e5%86%85%e6%a0%b8%e4%b8%ad%e4%b8%8d%e7%bb%8f%e5%b8%b8%e4%bd%bf%e7%94%a8-typedef&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/%E4%B8%BA%E4%BB%80%E4%B9%88%20Linux%20%E5%86%85%E6%A0%B8%E4%B8%AD%E4%B8%8D%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%20typedef_new.png&#34; alt=&#34;为什么 Linux 内核中不经常使用 typedef_new&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;我们在进行&lt;code&gt;Linux&lt;/code&gt;驱动开发过程中，有没有出现过这样的报错？&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WARNING: &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; not add new typedefs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不允许使用&lt;code&gt;typedef&lt;/code&gt;！&lt;/p&gt;&#xA;&lt;p&gt;虽然只是一个警告，但是如果你想往开源仓库提交代码，这就是一个必优化项。&lt;/p&gt;&#xA;&lt;p&gt;那么，为什么&lt;code&gt;Linux&lt;/code&gt;内核不建议使用&lt;code&gt;typedef&lt;/code&gt;呢？&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1linus-torvalds-的态度&#34;&gt;&#xA;  1、Linus Torvalds 的态度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1linus-torvalds-%e7%9a%84%e6%80%81%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://e0.ifengimg.com/04/2019/0601/1395346C9EA500C3E71BFAE601E0940B868EF5BB_size63_w1080_h663.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&amp;gt; On Mon, 10 Jun 2002, Linus Torvalds wrote:&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt;&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt; &amp;ndash;snip/snip&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt; &amp;gt; But in the end, maintainership matters. I personally don&amp;rsquo;t want the&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt; &amp;gt; typedef culture to get the upper hand, but I don&amp;rsquo;t mind a few of them, and&lt;/em&gt;&#xA;&lt;em&gt;&amp;gt; &amp;gt; people who maintain their own code usually get the last word.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
