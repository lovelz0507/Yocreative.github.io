<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux 调试工具 on 悠创</title>
    <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/</link>
    <description>Recent content in Linux 调试工具 on 悠创</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jan 2024 10:39:03 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【一文秒懂】Linux内核调试工具——devmem</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7devmem/</link>
      <pubDate>Fri, 19 Jan 2024 21:23:10 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7devmem/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核调试工具devmem&#34;&gt;&#xA;  【一文秒懂】Linux内核调试工具——devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7devmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;962&#34; height=&#34;176&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/93fe500adc7d40c6bf134e9d9af12b0f.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们在底层开发过程中，经常需要&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;在终端查看或者修改设备寄存器的值&lt;/strong&gt;&lt;/span&gt;，有这样一个工具&amp;mdash;-&lt;code&gt;devmem&lt;/code&gt;，可用于读取或者修改物理寄存器的值，非常方便！&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;devmem&lt;/code&gt;就是在&lt;code&gt;Linux&lt;/code&gt;命令行模式下，直接操作我们设备寄存器的值！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用&#34;&gt;&#xA;  2、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-配置devmem&#34;&gt;&#xA;  2.1 配置devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e9%85%8d%e7%bd%aedevmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220811174204310.png&#34; alt=&#34;image-20220811174204310&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;进入&lt;code&gt;menuconfig&lt;/code&gt;选项中，按下&lt;code&gt;/&lt;/code&gt;搜索关键词即可！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;22使用devmem&#34;&gt;&#xA;  2.2、使用devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22%e4%bd%bf%e7%94%a8devmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;进入&lt;code&gt;Linux&lt;/code&gt;后，输入&lt;code&gt;devmem -h&lt;/code&gt;查看帮助信息即可！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: devmem ADDRESS &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;WIDTH &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;VALUE&lt;span style=&#34;color:#ff79c6&#34;&gt;]]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Read/write from physical address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ADDRESS Address to act upon&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WIDTH   Width &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;8/16/...&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VALUE   Data to be written&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;内部为可选内容，比较简单，这里直接上使用代码！&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;读物理内存&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#读指定的物理内存值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 16&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#读16bit物理内存的值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写物理内存&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt; 0x00000000&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#以32bit写入给定的值到指定物理内存&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt; 0x010&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#以8bit写入给定的值到指定物理内存&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Ftrace系统调试工具使用终极指南</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82ftrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 13 Dec 2023 21:56:32 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82ftrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h1 id=&#34;一文秒懂ftrace系统调试工具使用终极指南&#34;&gt;&#xA;  【一文秒懂】Ftrace系统调试工具使用终极指南&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82ftrace%e7%b3%bb%e7%bb%9f%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7%e4%bd%bf%e7%94%a8%e7%bb%88%e6%9e%81%e6%8c%87%e5%8d%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1ftrace是什么&#34;&gt;&#xA;  1、Ftrace是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1ftrace%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;是&lt;code&gt;Function Trace&lt;/code&gt;的简写，由 &lt;code&gt;Steven Rostedt&lt;/code&gt; 开发的，从 2008 年发布的内核 2.6.27 中开始就内置了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;是一个系统内部提供的追踪工具，旨在帮助内核设计和开发人员去追踪系统内部的函数调用流程。&lt;/p&gt;&#xA;&lt;p&gt;随着&lt;code&gt;Ftrace&lt;/code&gt;的不断完善，除了追踪函数调用流程外，还可以用来调试和分析系统的延迟和性能问题，并发展成为一个追踪类调试工具的框架。&lt;/p&gt;&#xA;&lt;p&gt;除了&lt;code&gt;Ftrace&lt;/code&gt;外，追踪类调试工具还包括：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://tinylab.org/wp-content/uploads/2016/10//tracing.jpg&#34; alt=&#34;Tracing overview&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2ftrace的实现原理&#34;&gt;&#xA;  2、Ftrace的实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2ftrace%e7%9a%84%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;为了帮助我们更好的使用&lt;code&gt;Ftrace&lt;/code&gt;，我们有必要简单了解&lt;code&gt;Ftrace&lt;/code&gt;的实现原理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-ftrace框架图&#34;&gt;&#xA;  2.1 Ftrace框架图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-ftrace%e6%a1%86%e6%9e%b6%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;的框架图如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/eb77832145c246c99848330e16448451.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;由框架图我们可以知道：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ftrace&lt;/code&gt;包括多种类型的&lt;code&gt;tracers&lt;/code&gt;，每个&lt;code&gt;tracer&lt;/code&gt;完成不同的功能&lt;/li&gt;&#xA;&lt;li&gt;将这些不同类型的&lt;code&gt;tracers&lt;/code&gt;注册进入&lt;code&gt;ftrace framework&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;各类&lt;code&gt;tracers&lt;/code&gt;收集不同的信息，并放入到&lt;code&gt;Ring buffer&lt;/code&gt;缓冲区以供调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-ftrace是如何记录信息的&#34;&gt;&#xA;  2.2 Ftrace是如何记录信息的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-ftrace%e6%98%af%e5%a6%82%e4%bd%95%e8%ae%b0%e5%bd%95%e4%bf%a1%e6%81%af%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;采用了静态插桩和动态插桩两种方式来实现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;静态插桩&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;我们在&lt;code&gt;Kernel&lt;/code&gt;中打开了&lt;code&gt;CONFIG_FUNCTION_TRACER&lt;/code&gt;功能后，会增加一个&lt;code&gt;-pg&lt;/code&gt;的一个编译选项，这个编译选项的作用就是为每个函数入口处，都会插入&lt;code&gt;bl mcount&lt;/code&gt;跳转指令，使得每个函数运行时都会进入&lt;code&gt;mcount&lt;/code&gt;函数。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;一旦使能，对&lt;code&gt;kernel&lt;/code&gt;中所有的函数插桩，这带来的性能开销是惊人的，有可能导致人们弃用&lt;code&gt;Ftrace&lt;/code&gt;功能。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;为了解决这个问题，开发者推出了&lt;code&gt;Dynamic ftrace&lt;/code&gt;，以此来优化整体的性能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;动态插桩&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里的动态，是指的动态修改函数指令。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;编译时，记录所有被添加跳转指令的函数，这里表示所有支持追踪的函数。&lt;/li&gt;&#xA;&lt;li&gt;内核将所有跳转指令替换为&lt;code&gt;nop&lt;/code&gt;指令，以实现非调试状态性能零损失。&lt;/li&gt;&#xA;&lt;li&gt;根据 &lt;code&gt;function tracer&lt;/code&gt; 设置，动态将被调试函数的&lt;code&gt;nop&lt;/code&gt;指令，替换为跳转指令，以实现追踪。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;总而言之，&lt;code&gt;Ftrace&lt;/code&gt;记录数据可以总结为以下几个步骤&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;打开编译选项&lt;code&gt;-pg&lt;/code&gt;，为每个函数都增加跳转指令&lt;/li&gt;&#xA;&lt;li&gt;记录这些可追踪的函数，并为了减少性能消耗，将跳转函数替换为&lt;code&gt;nop&lt;/code&gt;指令&lt;/li&gt;&#xA;&lt;li&gt;通过&lt;code&gt;flag&lt;/code&gt;标志位来动态管理，将需要追踪的函数预留的&lt;code&gt;nop&lt;/code&gt;指令替换回追踪指令，记录调试信息。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3如何使用ftrace&#34;&gt;&#xA;  3、如何使用Ftrace&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8ftrace&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-配置详解&#34;&gt;&#xA;  3.1 配置详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e9%85%8d%e7%bd%ae%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用了 Ftrace&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用函数级别的追踪器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FUNCTION_GRAPH_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持图形显示&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_GRAPH_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 以图形的方式显示函数追踪过程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_STACK_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用堆栈追踪器，用于跟踪内核函数调用的堆栈信息。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_DYNAMIC_FTRACE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用动态 Ftrace，允许在运行时启用和禁用 Ftrace 功能。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FTRACE_NMI_ENTER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持非屏蔽中断（NMI）时进入 Ftrace 的功能&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FTRACE_MCOUNT_RECORD&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持通过 mcount 记录函数调用关系。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_NMI_ENTER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y                   &lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持通过 mcount 记录函数调用关系。   &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_SYSCALLS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 系统调用的追踪&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_MCOUNT_RECORD&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用 mcount 记录函数调用关系。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_SCHED_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 支持调度追踪&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_PROFILER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用函数分析器，主要用于记录函数的执行时间和调用次数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_DEBUG_FS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用 Debug 文件系统支持&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;上面只是介绍了部分配置，更多详细配置可自行了解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】TOP命令详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 17 Jan 2024 21:37:13 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;一文秒懂top命令详解&#34;&gt;&#xA;  【一文秒懂】TOP命令详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82top%e5%91%bd%e4%bb%a4%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1top命令介绍&#34;&gt;&#xA;  1、Top命令介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1top%e5%91%bd%e4%bb%a4%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;系统中，&lt;code&gt;Top&lt;/code&gt;命令主要用于&lt;strong&gt;实时运行系统的监控&lt;/strong&gt;，包括&lt;code&gt;Linux&lt;/code&gt;内核管理的进程或者线程的资源占用情况。&lt;/p&gt;&#xA;&lt;p&gt;这个命令对所有正在运行的进程和系统负荷提供不断更新的概览信息，包括系统负载、CPU利用分布情况、内存使用、每个进程的内容使用情况等信息。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2top命令使用&#34;&gt;&#xA;  2、Top命令使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2top%e5%91%bd%e4%bb%a4%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Top&lt;/code&gt;的命令介绍如下&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -hv|-bcHiOSs -d secs -n max -u|U user -p pid -o fld -w &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;cols&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;常用的&lt;code&gt;Top&lt;/code&gt;指令有&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top：启动top命令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -c：显示完整的命令行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -b：以批处理模式显示程序信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -S：以累积模式显示程序信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -n 2：表示更新两次后终止更新显示&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -d 3：设置信息更新周期为3秒&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -p 139：显示进程号为139的进程信息，CPU、内存占用率等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -n 10：显示更新十次后退出&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除此之外，在&lt;code&gt;top&lt;/code&gt;进程运行过程中，两个最重要的功能是查看帮助（&lt;code&gt;h&lt;/code&gt; 或 &lt;code&gt;？&lt;/code&gt;）和退出（&lt;code&gt;q&lt;/code&gt; 或 &lt;code&gt;Ctrl+C&lt;/code&gt;）。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3top信息详解&#34;&gt;&#xA;  3、Top信息详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3top%e4%bf%a1%e6%81%af%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;top&lt;/code&gt;展示界面由从上到下3部分组成&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;概览区域&lt;/li&gt;&#xA;&lt;li&gt;表头&lt;/li&gt;&#xA;&lt;li&gt;任务区域&lt;/li&gt;&#xA;&lt;li&gt;还有一个输入/消息行，位于概览区域和表头之间。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230811143742616.png&#34; alt=&#34;image-20230811143742616&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;31-概览区详解&#34;&gt;&#xA;  3.1 概览区详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e6%a6%82%e8%a7%88%e5%8c%ba%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top - 14:46:08 up  5:46,  &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; user,  load average: 0.00, 0.00, 0.00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;程序或者窗口的名称：&lt;code&gt;top&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;当前时间和系统的启动时间：&lt;code&gt;14:46:08 up 5:46&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;总共的用户数量：&lt;code&gt;1 user&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;过去1、5和15分钟的系统平均负载：&lt;code&gt;load average: 0.00, 0.00, 0.00&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Tasks: &lt;span style=&#34;color:#bd93f9&#34;&gt;290&lt;/span&gt; total,   &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; running, &lt;span style=&#34;color:#bd93f9&#34;&gt;212&lt;/span&gt; sleeping,   &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; stopped,   &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; zombie&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%Cpu&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;:  0.0 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两行显示了任务数量和&lt;code&gt;CPU&lt;/code&gt;状态&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核调试工具——Debugfs</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7debugfs/</link>
      <pubDate>Fri, 19 Jan 2024 21:23:44 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7debugfs/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核调试工具debugfs&#34;&gt;&#xA;  【一文秒懂】Linux内核调试工具——Debugfs&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7debugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;962&#34; height=&#34;176&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/93fe500adc7d40c6bf134e9d9af12b0f.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Debugfs&lt;/code&gt;其存在的主要意义是&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;为了内核开发者向用户空间传递更多有用的信息&lt;/strong&gt;&lt;/span&gt;，与&lt;code&gt;proc&lt;/code&gt;不同，&lt;code&gt;proc&lt;/code&gt;只提供进程相关的信息；同时也与&lt;code&gt;sysfs&lt;/code&gt;不同，&lt;code&gt;sysfs&lt;/code&gt;对每个文件都要求一定的规则，而&lt;code&gt;Debugfs&lt;/code&gt;没有任何的规则。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;Debugfs&lt;/code&gt;是一种用于内核调试的虚拟文件系统。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何调试&#34;&gt;&#xA;  2、如何调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-配置debugfs&#34;&gt;&#xA;  2.1 配置&lt;code&gt;Debugfs&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e9%85%8d%e7%bd%aedebugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220813152331070.png&#34; alt=&#34;image-20220813152331070&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;进去&lt;code&gt;menuconfig&lt;/code&gt;选项中，按下&lt;code&gt;/&lt;/code&gt;搜索&lt;code&gt;CONFIG_DEBUG_FS&lt;/code&gt;关键词即可！&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;当然，可以看&lt;code&gt;Location&lt;/code&gt;在内核中的位置。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;22-挂载debugfs&#34;&gt;&#xA;  2.2 挂载&lt;code&gt;Debugfs&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e6%8c%82%e8%bd%bddebugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t debugfs none /sys/kernel/debug&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#挂载&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#查看挂载情况&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;___&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;none on /sys/kernel/debug &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; debugfs &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;rw,relatime&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;23-gpio调试&#34;&gt;&#xA;  2.3 GPIO调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-gpio%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat gpio&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; gpio-43  &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;                    |wakeup              &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; in  lo IRQ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; gpio-64  &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;                    |&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt;                  &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; in  lo IRQ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;上述只是简单的调试&lt;code&gt;GPIO&lt;/code&gt;的方法，而&lt;code&gt;Debugfs&lt;/code&gt;功能远不止于此，其提供了一些API接口，方便我们在内核中&lt;code&gt;Debug&lt;/code&gt;使用。&lt;/p&gt;&#xA;&lt;p&gt;而我们要做的，就是在我们想要进行&lt;code&gt;Debug&lt;/code&gt;的地方，注册&lt;code&gt;debugfs&lt;/code&gt;接口，然后查看我们要调试的信息。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;24-gpio的实现&#34;&gt;&#xA;  2.4 GPIO的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-gpio%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;文件&lt;code&gt;kernel\drivers\gpio\gpiolib.c&lt;/code&gt;中&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;`&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_operations gpiolib_operations &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .owner&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; THIS_MODULE,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .open&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gpiolib_open,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .read&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_read,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .llseek&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_lseek,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .release&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_release,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; __init &lt;span style=&#34;color:#50fa7b&#34;&gt;gpiolib_debugfs_init&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/* /sys/kernel/debug/gpio */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;) &lt;span style=&#34;color:#50fa7b&#34;&gt;debugfs_create_file&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gpio&amp;#34;&lt;/span&gt;, S_IFREG &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; S_IRUGO,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;gpiolib_operations);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;subsys_initcall&lt;/span&gt;(gpiolib_debugfs_init);` &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3如何使用&#34;&gt;&#xA;  3、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-使用步骤&#34;&gt;&#xA;  3.1 使用步骤&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e4%bd%bf%e7%94%a8%e6%ad%a5%e9%aa%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;想要使用&lt;code&gt;Debugfs&lt;/code&gt;功能，首先要做的就是要包含 &lt;code&gt;&amp;lt;linux/debugfs.h&amp;gt;&lt;/code&gt;头文件&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;debugfs_create_dir&lt;/code&gt;接口，创建一个文件夹，用于保存&lt;code&gt;debugfs&lt;/code&gt;所操作的文件&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;debugfs_create_file&lt;/code&gt;接口，创建多个文件进行操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;32-接口介绍&#34;&gt;&#xA;  3.2 接口介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e6%8e%a5%e5%8f%a3%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;debugfs_create_dir&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dentry &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;debugfs_create_dir&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;name, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dentry &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;parent);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;name&lt;/code&gt;：文件夹名称&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux网络性能测试工具——Iperf</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7iperf/</link>
      <pubDate>Sat, 20 Jan 2024 09:47:12 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7iperf/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux网络性能测试工具iperf&#34;&gt;&#xA;  【一文秒懂】Linux网络性能测试工具——Iperf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e7%bd%91%e7%bb%9c%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95%e5%b7%a5%e5%85%b7iperf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Iperf&lt;/strong&gt;是一个网络性能测试工具，可以测试最大&lt;code&gt;TCP&lt;/code&gt;和&lt;code&gt;UDP&lt;/code&gt;带宽性能，具有多种参数和UDP特性，可以根据需要调整，可以报告带宽、延迟抖动和数据包丢失。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Iperf3&lt;/strong&gt;在&lt;code&gt;NLNR/DAST&lt;/code&gt;开的的原始版本进行重新设计，其目标是更小、更简单的代码库，并且还提供&lt;code&gt;Iperf&lt;/code&gt;所不具备的新功能，如：&lt;code&gt;nuttcp&lt;/code&gt; 和&lt;code&gt;netperf&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;iperf&lt;/code&gt;有&lt;code&gt;Linux,Windows,android,Mac&lt;/code&gt;等版本，下面结合实际网络场景进行&lt;code&gt;iperf&lt;/code&gt;工具使用的介绍&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/ac6eddc451da81cbc6990e99775d2d110924312e.jpeg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;确保使用&lt;code&gt;Iperf&lt;/code&gt;测试的服务端和客户端都处于同一局域网内！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1iperf环境准备&#34;&gt;&#xA;  1、Iperf环境准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1iperf%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Iperf&lt;/code&gt;下载链接&lt;/strong&gt;：&lt;a href=&#34;https://iperf.fr/iperf-download.php#source&#34;&gt;推荐下载源码路径&lt;/a&gt;，&lt;a href=&#34;https://iperf.fr/iperf-download.php&#34;&gt;官网下载&lt;/a&gt;、&lt;a href=&#34;https://github.com/esnet/iperf/releases/tag/&#34;&gt;Github下载&lt;/a&gt;或者&lt;a href=&#34;https://downloads.es.net/pub/iperf/&#34;&gt;其他地址2&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-linux源码安装iperf&#34;&gt;&#xA;  1.1 Linux源码安装Iperf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-linux%e6%ba%90%e7%a0%81%e5%ae%89%e8%a3%85iperf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;以&lt;code&gt;Ubuntu20.04&lt;/code&gt;为例，下载压缩包&lt;code&gt;iperf-3.1.3.tar.gz&lt;/code&gt;，解压并进入目录。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -zxvf iperf-3.1.3.tar.gz&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#解压&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; iperf-3.1.3/&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#进入解压目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir linux_install_dir&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#创建安装目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure&#x9;--prefix&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/home/dong/WorkSpace/Program/iperf-3.1.3/linux_install_dir&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#--prefix设置安装目录，即iperf3生成路径，绝对路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make clean&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#清除掉之前编译的文件，确保不影响&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#编译&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入&lt;code&gt;linux_install_dir/bin&lt;/code&gt;安装目录，可以看到&lt;code&gt;iperf3&lt;/code&gt;可执行文件。我们可以通过&lt;code&gt;readelf -h iperf3 | grep Machine&lt;/code&gt;可以查看运行平台。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Machine:                           Advanced Micro Devices X86-64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;12-arm交叉编译iperf&#34;&gt;&#xA;  1.2 Arm交叉编译Iperf&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#12-arm%e4%ba%a4%e5%8f%89%e7%bc%96%e8%af%91iperf&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;以&lt;code&gt;Arm&lt;/code&gt;平台为例，解压&lt;code&gt;iperf-3.11.tar.gz&lt;/code&gt;，并进入目录。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -zxvf iperf-3.1.3.tar.gz&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#解压&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; iperf-3.1.3/&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#进入解压目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir arm_install_dir&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#创建安装目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./configure --host&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm-linux-gnueabihf --prefix&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;/home/dong/WorkSpace/Program/iperf-3.1.3/arm_install_dir/ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CFLAGS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;-static# --host设置使用的编译器；&#x9;--prefix 安装目录； CFLAGS静态编译&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make clean&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#清除掉之前编译的文件，确保不影响&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#编译&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入&lt;code&gt;arm_install_dir/bin&lt;/code&gt;安装目录，可以看到&lt;code&gt;iperf3&lt;/code&gt;可执行文件。我们可以通过&lt;code&gt;readelf -h iperf3 | grep Machine&lt;/code&gt;可以查看运行平台。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux调试工具——GDB介绍</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdb%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Jan 2024 10:32:28 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdb%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux调试工具gdb介绍&#34;&gt;&#xA;  【一文秒懂】Linux调试工具——GDB介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7gdb%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://c.biancheng.net/uploads/allimg/200212/1-2002122135363V.gif&#34; alt=&#34;GDB的吉祥物：弓箭鱼&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1gdb是什么&#34;&gt;&#xA;  1、GDB是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1gdb%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB：GNU Project Debugger&lt;/code&gt;是&lt;code&gt;GNU&lt;/code&gt;工程仿真器，允许开发者能够去看程序内部发生的情况，或者发生&lt;code&gt;crash&lt;/code&gt;时候， 知道程序正在做什么！它诞生于 GNU 计划（同时诞生的还有 GCC、Emacs 等），是 Linux 下常用的程序调试器。发展至今，GDB 已经迭代了诸多个版本，当下的 GDB 支持调试多种编程语言编写的程序，包括 C、C++、Go、Objective-C、OpenCL、Ada 等。实际场景中，GDB 更常用来调试 C 和 C++ 程序。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB&lt;/code&gt;主要功能有四个方面：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启动程序：指定任何可以影响其运行行为的动作&lt;/li&gt;&#xA;&lt;li&gt;停止程序：使程序在指定条件下停止&lt;/li&gt;&#xA;&lt;li&gt;检查错误：当程序停止时，检查发生了什么&lt;/li&gt;&#xA;&lt;li&gt;纠正错误：更改程序中的内容，纠正错误&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB&lt;/code&gt;可以在本地、远程、仿真器上执行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20221101152802333.png&#34; alt=&#34;image-20221101152802333&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2gdb如何使用&#34;&gt;&#xA;  2、GDB如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2gdb%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如何使用GDB？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;要想回答这个问题，从正统角度来分析，有两种方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;GDB官方手册&lt;/strong&gt;：https://sourceware.org/gdb/&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;GDB帮助信息&lt;/strong&gt;：&lt;code&gt;help all&lt;/code&gt;（命令行输入）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20221101153218534.png&#34; alt=&#34;image-20221101153218534&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;简单来说，&lt;code&gt;GDB&lt;/code&gt;调试方法有3种：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;直接调试&lt;/strong&gt;：&lt;code&gt;gdb [exec file]&lt;/code&gt;，用于直接仿真一个执行程序&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;附属调试&lt;/strong&gt;：&lt;code&gt;gdb attach pid&lt;/code&gt;，用于直接调试一个已运行的程序（&lt;code&gt;ubuntu&lt;/code&gt;注意权限问题）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心转存调试&lt;/strong&gt;：&lt;code&gt;gdb [exec file] [core-dump file]&lt;/code&gt;，用于调试&lt;code&gt;core-dump&lt;/code&gt;文件&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;：&lt;code&gt;GDB&lt;/code&gt;调试的&lt;code&gt;[exec file]&lt;/code&gt;，该文件最好编译的时候带上&lt;code&gt;-g&lt;/code&gt;选项，生成带调试信息的可执行文件。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;3gdb常用指令&#34;&gt;&#xA;  3、GDB常用指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3gdb%e5%b8%b8%e7%94%a8%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-基础指令&#34;&gt;&#xA;  3.1 基础指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%9f%ba%e7%a1%80%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;指令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;file [exec file]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;选择要调试的可执行文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;run/r&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;重新开始运行文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;暂时断点，停在第一执行语句处&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;list/l&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看源代码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;next/n&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单步调试，逐过程，函数直接执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;step/s&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单步调试，逐语句，跳入函数执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;backtrace/bt&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看函数调用的堆栈信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;finish&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;结束当前函数，返回函数调用点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;continue&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;继续执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;print/p&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;打印变量&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;break/b [filename:line_number]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;打断点, [文件名:行号]，也有多种方式&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;quit&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;退出gdb调试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;32-进阶指令&#34;&gt;&#xA;  3.2 进阶指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e8%bf%9b%e9%98%b6%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;指令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;frame&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看当前帧信息，包括参数，文件所在位置等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;该指令，可以查看到更多详细信息，如下：&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info threads&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info sharedlibrary&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看共享库信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info args&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看参数信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info breakpoints&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看断点信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info frame&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看当前帧信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;core-file [core-dump file]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;选择core-dump文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;watch [expr]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;观察某个表达式的值是否发生变化，如果有变化，马上停住程序。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;examine/x &amp;lt;n/f/u&amp;gt;&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看内存地址的值，addr为地址信息，  &lt;br&gt;n表示内存长度，f表示显示格式，u表示显示字节数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;set&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;设置变量、寄存器、内存的值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;signal [number]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;发送一个信号给该进程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;disassemble&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;反汇编，查看当前执行时的源代码的机器码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;33-多线程调试&#34;&gt;&#xA;  3.3 多线程调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#33-%e5%a4%9a%e7%ba%bf%e7%a8%8b%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;命令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info threads&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread id&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;切换到指定线程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply all bt&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程堆栈信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;set scheduler-locking off|on|step&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;off 不锁定任何线程，也就是所有线程都执行，这是默认值。  &lt;br&gt;on 只有当前被调试程序会执行。  &lt;br&gt;step 在单步的时候，除了next过一个函数的情况以外，只有当前线程会执行。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply ID1 ID2 command&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指定某个线程执行相关命令&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply all command&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指定所有线程执行相关命令&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;更多命令详细使用见参考文章&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux远程调试工具——gdbserver</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdbserver/</link>
      <pubDate>Sat, 20 Jan 2024 10:34:18 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdbserver/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux远程调试工具gdbserver&#34;&gt;&#xA;  【一文秒懂】Linux远程调试工具——gdbserver&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e8%bf%9c%e7%a8%8b%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7gdbserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;712&#34; height=&#34;193&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/7d4df75ef808461785ff957c8a8da235.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;对于开发者来说，调试必不可少。&lt;/p&gt;&#xA;&lt;p&gt;对于开发PC软件，通常系统已经继承了调试工具（比如Linux系统的GDB），或者IDE直接支持对程序的调试。&lt;/p&gt;&#xA;&lt;p&gt;而对于开发嵌入式软件来说调试的手段比较有限，很多开发者仅有的调试手段依然是最原始的打印（我也是其中之一）。&lt;/p&gt;&#xA;&lt;p&gt;当然除了打印调试之外还有通过&lt;code&gt;gdb+gdbserver&lt;/code&gt;来调试，&lt;code&gt;gdbserver&lt;/code&gt;在目标系统中运行，&lt;code&gt;gdb&lt;/code&gt;则在宿主机上运行。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;gdbserver&lt;/code&gt; 是一个程序，它允许宿主机可以通过网络，远程调试目标板。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用&#34;&gt;&#xA;  2、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-编译器准备&#34;&gt;&#xA;  2.1 编译器准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%bc%96%e8%af%91%e5%99%a8%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;这里就不再详细讲解编译器的安装什么的了，网上一大把！&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#直接安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install gcc-arm-linux-gnueabihf&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#源码安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar zxvf gdb-7.12.tar.gz &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; gdb-7.12/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure --target&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm-linux --prefix&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$PWD&lt;/span&gt;/__install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;编译完成后，最终会生成&lt;code&gt;gdbserver&lt;/code&gt; 的可执行程序，这个就是我们要使用的工具。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;22-目标机准备&#34;&gt;&#xA;  2.2 目标机准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e7%9b%ae%e6%a0%87%e6%9c%ba%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;我们将&lt;code&gt;gdb_server&lt;/code&gt;可执行程序放置目标板上。&lt;/li&gt;&#xA;&lt;li&gt;再将我们要调试的程序放置目标板上，如&lt;code&gt;helloworld&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;gdb_server&lt;/code&gt;进行调试，使用方法如下：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/1498371-deedb3829b54d646.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gdbserver 192.168.xx.xx:1234 ./helloworld&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;192.168.xx.xx&lt;/code&gt;：IP地址信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;1234&lt;/code&gt;：自定义端口号&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;./helloworld&lt;/code&gt;：运行要仿真的程序&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;此时gdbserver监听端口号1234，并等待客户端连接。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;23-宿主机准备&#34;&gt;&#xA;  2.3 宿主机准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e5%ae%bf%e4%b8%bb%e6%9c%ba%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在宿主机(Ubuntu)上，使用&lt;code&gt;gdb&lt;/code&gt;调试&lt;/li&gt;&#xA;&lt;li&gt;远程连接目标机&lt;/li&gt;&#xA;&lt;li&gt;运行程序&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $ gdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; target remote 192.168.xx.xx:1234&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Remote debugging using :1234&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; c&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#运行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;target remote&lt;/code&gt;：远程连接到指定IP的端口&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核死锁检测</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sat, 20 Jan 2024 10:36:40 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核死锁检测&#34;&gt;&#xA;  【一文秒懂】Linux内核死锁检测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e6%ad%bb%e9%94%81%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;最近遇到了一个驱动上面的&lt;code&gt;BUG&lt;/code&gt;，导致终端敲命令都无响应，最终导致内核触发了&lt;code&gt;hung_task_timeout&lt;/code&gt;…&lt;/p&gt;&#xA;&lt;p&gt;为什么会出现这种情况？该如何排查？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/Screenshot_20230627_222840.png&#34; alt=&#34;Screenshot_20230627_222840&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1死锁&#34;&gt;&#xA;  1、死锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e6%ad%bb%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;死锁指两个或更多进程或线程因相互等待对方释放资源而互相阻塞，从而导致系统中所有的进程或线程都无法继续运行的情况。&lt;/p&gt;&#xA;&lt;p&gt;一个典型的死锁场景包括以下几个角色：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;资源&lt;/strong&gt;：系统内的某个文件、某个设备、共享的内存区域等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;进程/线程&lt;/strong&gt;：进程或线程需要访问某个资源来完成其工作，但其当前无法取得该资源的控制权，因为该资源已被其他进程或线程占用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;饥饿&lt;/strong&gt;：由于进程无法获取其需要的资源，它不能继续前进或完成操作。如果没有正确的措施来处理和解决死锁，进程可能会一直等待，直到设备或整个系统崩溃。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2常见的死锁方式&#34;&gt;&#xA;  2、常见的死锁方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%b8%b8%e8%a7%81%e7%9a%84%e6%ad%bb%e9%94%81%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见死锁的2种方式&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AA锁：包括重复上锁和上下文切换引起的上锁，即一个线程，持有&lt;code&gt;A&lt;/code&gt;锁，还未释放，又去请求&lt;code&gt;A&lt;/code&gt;锁&lt;/li&gt;&#xA;&lt;li&gt;AB-BA死锁：一个&lt;code&gt;F1&lt;/code&gt;线程，持有&lt;code&gt;A&lt;/code&gt;锁，再去获取&lt;code&gt;B&lt;/code&gt;锁，而一个&lt;code&gt;F2&lt;/code&gt;线程持有&lt;code&gt;B&lt;/code&gt;锁，再去获取&lt;code&gt;A&lt;/code&gt;锁，这个时候处于的死锁状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见的死锁有以下4种情况&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;进程重复申请同一个锁，称为AA死锁。例如，重复申请同一个自旋锁；使用读写锁，第一次申请读锁，第二次申请写锁。&lt;/li&gt;&#xA;&lt;li&gt;进程申请自旋锁时没有禁止硬中断，进程获取自旋锁以后，硬中断抢占，申请同一个自旋锁。这种AA死锁很隐蔽，人工审查很难发现。&lt;/li&gt;&#xA;&lt;li&gt;两个进程都要获取锁L1和L2，进程1持有锁L1，再去获取锁L2，如果这个时候进程2持有锁L2并且正在尝试获取锁L1，那么进程1和进程2就会死锁，称为AB-BA死锁。&lt;/li&gt;&#xA;&lt;li&gt;在一个处理器上进程1持有锁L1，再去获取锁L2，在另一个处理器上进程2持有锁L2，硬中断抢占进程2以后获取锁L1。这种AB-BA死锁很隐蔽，人工审查很难发现。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;内核提供了&lt;code&gt;Lockdep&lt;/code&gt;来检测死锁的异常情况&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3lockdep-内核配置&#34;&gt;&#xA;  3、Lockdep 内核配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3lockdep-%e5%86%85%e6%a0%b8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_LOCKDEP&lt;/code&gt;：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_LOCK_ALLOC&lt;/code&gt;：检查内核是否错误地释放被持有的锁。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_PROVE_LOCKING&lt;/code&gt;：允许内核报告死锁问题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_LOCKDEP&lt;/code&gt; ：在死锁发生，内核报告相应的死锁&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_LOCK_STAT&lt;/code&gt;：追踪锁竞争的点，解释的更详细&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4lockdep-初探&#34;&gt;&#xA;  4、Lockdep 初探&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4lockdep-%e5%88%9d%e6%8e%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lockdep&lt;/code&gt;操作的基本单元并非单个的锁实例，而是锁类（lock-class）&lt;/strong&gt;。比如，&lt;code&gt;struct inode&lt;/code&gt;结构体中的自旋锁&lt;code&gt;i_lock&lt;/code&gt;字段就代表了这一类锁，而具体每个&lt;code&gt;inode&lt;/code&gt;节点的锁只是该类锁中的一个实例。对所有这些实例，&lt;code&gt;lockdep&lt;/code&gt;会把它们当作一个整体做处理，即把判断粒度放大，否则对可能有成千上万个的实例进行逐一判断，那处理难度可想而知，而且也没有必要.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lockdep&lt;/code&gt;跟踪每个锁类的自身状态&lt;/strong&gt;，也跟踪各个锁类之间的依赖关系，通过一系列的验证规则，以确保锁类状态和锁类之间的依赖总是正确的。另外，锁类一旦在初次使用时被注册，那么后续就会一直存在，所有它的具体实例都会关联到它。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;锁的几个状态&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ever held in STATE context –&amp;gt; 该锁曾在STATE上下文被持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head as readlock in STATE context –&amp;gt; 该锁曾在STATE上下文被以读锁形式持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head with STATE enabled –&amp;gt; 该锁曾在启用STATE的情况下被持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head as readlock with STATE enabled –&amp;gt; 该锁曾在启用STATE的情况下被以读锁形式持有过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】如何生成core Dump文件</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90core-dump%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 20 Jan 2024 10:38:03 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90core-dump%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux之Core Dump文件详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E4%B9%8Bcore-dump%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 20 Jan 2024 10:38:42 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E4%B9%8Bcore-dump%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核态内存泄露检测工具</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sat, 20 Jan 2024 10:39:03 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核态内存泄露检测工具&#34;&gt;&#xA;  【一文秒懂】Linux内核态内存泄露检测工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e6%80%81%e5%86%85%e5%ad%98%e6%b3%84%e9%9c%b2%e6%a3%80%e6%b5%8b%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1kmemleak介绍&#34;&gt;&#xA;  1、Kmemleak介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1kmemleak%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核开发中，&lt;code&gt;Kmemleak&lt;/code&gt;是一种用于&lt;strong&gt;检测内核中内存泄漏的工具&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt;指的是程序中已经不再使用的内存没有被妥善地释放，导致内存的浪费。内核中的内存泄漏同样会导致系统性能下降、系统崩溃等问题。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Kmemleak&lt;/code&gt;能够检测内核中的内存泄漏，通过检测内核中未被释放但又无法找到其使用位置的内存，进一步定位、修复内存泄漏的问题。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在用户空间，我们常用&lt;code&gt;Valgrind&lt;/code&gt;来检测；&lt;/p&gt;&#xA;&lt;p&gt;在内核空间，我们常用&lt;code&gt;Kmemleak&lt;/code&gt;来检测。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用kmemleak&#34;&gt;&#xA;  2、如何使用Kmemleak&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8kmemleak&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-内核配置&#34;&gt;&#xA;  2.1 内核配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e5%86%85%e6%a0%b8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;内核打开相应配置&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK&lt;/code&gt;：&lt;code&gt;Kmemleak&lt;/code&gt;被加入到内核&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE&lt;/code&gt;设置为&lt;code&gt;16000&lt;/code&gt;：该参数为记录内存泄露信息的内存池，越大记录信息越多。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK_DEFAULT_OFF&lt;/code&gt; ：&lt;code&gt;Kmemleak&lt;/code&gt;默认开关状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;依赖的配置&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KERNEL&lt;/code&gt;：打开内核调试功能&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_FS&lt;/code&gt;：需要借助到&lt;code&gt;debugfs&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_STACKTRACE&lt;/code&gt;：记录进程的堆栈信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-用户空间配置&#34;&gt;&#xA;  2.2 用户空间配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e7%94%a8%e6%88%b7%e7%a9%ba%e9%97%b4%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;我们要想使用&lt;code&gt;Kmemleak&lt;/code&gt;，需要挂在&lt;code&gt;debugfs&lt;/code&gt;，来查看泄露的情况。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;进入文件系统后，进行挂载&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t debugfs nodev /sys/kernel/debug/&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;挂在debugfs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;设置扫描时间&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt; &amp;gt; /sys/kernel/debug/kmemleak&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;10S扫描一次&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;默认内存泄露检测时间为&lt;code&gt;10min&lt;/code&gt;，上面设置为&lt;code&gt;10s&lt;/code&gt;一次&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;查看泄露情况&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat /sys/kernel/debug/kmemleak&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;查看内存泄露情况&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;其他指令&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; scan &amp;gt; /sys/kernel/debug/kmemleak&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#触发一次扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; clear &amp;gt; /sys/kernel/debug/kmemleak     &lt;span style=&#34;color:#6272a4&#34;&gt;#清除当前 kmemleak 记录的泄露信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; off &amp;gt; /sys/kernel/debug/kmemleak       &lt;span style=&#34;color:#6272a4&#34;&gt;#关闭kmemleak（不可逆转的）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;off &amp;gt; /sys/kernel/debug/kmemleak &lt;span style=&#34;color:#6272a4&#34;&gt;#关闭任务栈扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;on &amp;gt; /sys/kernel/debug/kmemleak  &lt;span style=&#34;color:#6272a4&#34;&gt;#使能任务栈扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;on &amp;gt; /sys/kernel/debug/kmemleak   &lt;span style=&#34;color:#6272a4&#34;&gt;#启动自动内存扫描线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;off &amp;gt; /sys/kernel/debug/kmemleak  &lt;span style=&#34;color:#6272a4&#34;&gt;#停止自动内存扫描线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&amp;lt;secs&amp;gt; &amp;gt; /sys/kernel/debug/kmemleak#设置自动扫描线程扫描间隔，默认是600，设置0则是停止扫描&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dump&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&amp;lt;addr&amp;gt; &amp;gt; /sys/kernel/debug/kmemleak &lt;span style=&#34;color:#6272a4&#34;&gt;#dump某个地址的内存块信息，比如上面的echo dump=0xffffffc008efd200 &amp;gt; /sys/kernel/debug/kmemleak即可查看详细信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
