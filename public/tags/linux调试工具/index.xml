<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux调试工具 on 悠创</title>
    <link>http://localhost:1313/Yocreative.github.io/tags/linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in Linux调试工具 on 悠创</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jan 2024 21:23:44 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Yocreative.github.io/tags/linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【一文秒懂】Linux内核调试工具——devmem</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7devmem/</link>
      <pubDate>Fri, 19 Jan 2024 21:23:10 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7devmem/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核调试工具devmem&#34;&gt;&#xA;  【一文秒懂】Linux内核调试工具——devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7devmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;962&#34; height=&#34;176&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/93fe500adc7d40c6bf134e9d9af12b0f.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们在底层开发过程中，经常需要&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;在终端查看或者修改设备寄存器的值&lt;/strong&gt;&lt;/span&gt;，有这样一个工具&amp;mdash;-&lt;code&gt;devmem&lt;/code&gt;，可用于读取或者修改物理寄存器的值，非常方便！&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;devmem&lt;/code&gt;就是在&lt;code&gt;Linux&lt;/code&gt;命令行模式下，直接操作我们设备寄存器的值！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用&#34;&gt;&#xA;  2、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-配置devmem&#34;&gt;&#xA;  2.1 配置devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e9%85%8d%e7%bd%aedevmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220811174204310.png&#34; alt=&#34;image-20220811174204310&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;进入&lt;code&gt;menuconfig&lt;/code&gt;选项中，按下&lt;code&gt;/&lt;/code&gt;搜索关键词即可！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;22使用devmem&#34;&gt;&#xA;  2.2、使用devmem&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22%e4%bd%bf%e7%94%a8devmem&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;进入&lt;code&gt;Linux&lt;/code&gt;后，输入&lt;code&gt;devmem -h&lt;/code&gt;查看帮助信息即可！&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: devmem ADDRESS &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;WIDTH &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;VALUE&lt;span style=&#34;color:#ff79c6&#34;&gt;]]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Read/write from physical address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ADDRESS Address to act upon&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        WIDTH   Width &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;8/16/...&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        VALUE   Data to be written&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;内部为可选内容，比较简单，这里直接上使用代码！&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;读物理内存&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#读指定的物理内存值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 16&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#读16bit物理内存的值&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;写物理内存&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt; 0x00000000&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#以32bit写入给定的值到指定物理内存&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devmem 0x10000000 &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt; 0x010&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#以8bit写入给定的值到指定物理内存&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Ftrace系统调试工具使用终极指南</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82ftrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 13 Dec 2023 21:56:32 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82ftrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h1 id=&#34;一文秒懂ftrace系统调试工具使用终极指南&#34;&gt;&#xA;  【一文秒懂】Ftrace系统调试工具使用终极指南&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82ftrace%e7%b3%bb%e7%bb%9f%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7%e4%bd%bf%e7%94%a8%e7%bb%88%e6%9e%81%e6%8c%87%e5%8d%97&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1ftrace是什么&#34;&gt;&#xA;  1、Ftrace是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1ftrace%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;是&lt;code&gt;Function Trace&lt;/code&gt;的简写，由 &lt;code&gt;Steven Rostedt&lt;/code&gt; 开发的，从 2008 年发布的内核 2.6.27 中开始就内置了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;是一个系统内部提供的追踪工具，旨在帮助内核设计和开发人员去追踪系统内部的函数调用流程。&lt;/p&gt;&#xA;&lt;p&gt;随着&lt;code&gt;Ftrace&lt;/code&gt;的不断完善，除了追踪函数调用流程外，还可以用来调试和分析系统的延迟和性能问题，并发展成为一个追踪类调试工具的框架。&lt;/p&gt;&#xA;&lt;p&gt;除了&lt;code&gt;Ftrace&lt;/code&gt;外，追踪类调试工具还包括：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://tinylab.org/wp-content/uploads/2016/10//tracing.jpg&#34; alt=&#34;Tracing overview&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2ftrace的实现原理&#34;&gt;&#xA;  2、Ftrace的实现原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2ftrace%e7%9a%84%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;为了帮助我们更好的使用&lt;code&gt;Ftrace&lt;/code&gt;，我们有必要简单了解&lt;code&gt;Ftrace&lt;/code&gt;的实现原理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-ftrace框架图&#34;&gt;&#xA;  2.1 Ftrace框架图&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-ftrace%e6%a1%86%e6%9e%b6%e5%9b%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;的框架图如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/eb77832145c246c99848330e16448451.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;由框架图我们可以知道：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ftrace&lt;/code&gt;包括多种类型的&lt;code&gt;tracers&lt;/code&gt;，每个&lt;code&gt;tracer&lt;/code&gt;完成不同的功能&lt;/li&gt;&#xA;&lt;li&gt;将这些不同类型的&lt;code&gt;tracers&lt;/code&gt;注册进入&lt;code&gt;ftrace framework&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;各类&lt;code&gt;tracers&lt;/code&gt;收集不同的信息，并放入到&lt;code&gt;Ring buffer&lt;/code&gt;缓冲区以供调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-ftrace是如何记录信息的&#34;&gt;&#xA;  2.2 Ftrace是如何记录信息的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-ftrace%e6%98%af%e5%a6%82%e4%bd%95%e8%ae%b0%e5%bd%95%e4%bf%a1%e6%81%af%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;采用了静态插桩和动态插桩两种方式来实现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;静态插桩&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;我们在&lt;code&gt;Kernel&lt;/code&gt;中打开了&lt;code&gt;CONFIG_FUNCTION_TRACER&lt;/code&gt;功能后，会增加一个&lt;code&gt;-pg&lt;/code&gt;的一个编译选项，这个编译选项的作用就是为每个函数入口处，都会插入&lt;code&gt;bl mcount&lt;/code&gt;跳转指令，使得每个函数运行时都会进入&lt;code&gt;mcount&lt;/code&gt;函数。&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;&lt;code&gt;Ftrace&lt;/code&gt;一旦使能，对&lt;code&gt;kernel&lt;/code&gt;中所有的函数插桩，这带来的性能开销是惊人的，有可能导致人们弃用&lt;code&gt;Ftrace&lt;/code&gt;功能。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;为了解决这个问题，开发者推出了&lt;code&gt;Dynamic ftrace&lt;/code&gt;，以此来优化整体的性能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;动态插桩&lt;/strong&gt;：&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;这里的动态，是指的动态修改函数指令。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;ol&gt;&#xA;&lt;li&gt;编译时，记录所有被添加跳转指令的函数，这里表示所有支持追踪的函数。&lt;/li&gt;&#xA;&lt;li&gt;内核将所有跳转指令替换为&lt;code&gt;nop&lt;/code&gt;指令，以实现非调试状态性能零损失。&lt;/li&gt;&#xA;&lt;li&gt;根据 &lt;code&gt;function tracer&lt;/code&gt; 设置，动态将被调试函数的&lt;code&gt;nop&lt;/code&gt;指令，替换为跳转指令，以实现追踪。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;总而言之，&lt;code&gt;Ftrace&lt;/code&gt;记录数据可以总结为以下几个步骤&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;打开编译选项&lt;code&gt;-pg&lt;/code&gt;，为每个函数都增加跳转指令&lt;/li&gt;&#xA;&lt;li&gt;记录这些可追踪的函数，并为了减少性能消耗，将跳转函数替换为&lt;code&gt;nop&lt;/code&gt;指令&lt;/li&gt;&#xA;&lt;li&gt;通过&lt;code&gt;flag&lt;/code&gt;标志位来动态管理，将需要追踪的函数预留的&lt;code&gt;nop&lt;/code&gt;指令替换回追踪指令，记录调试信息。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3如何使用ftrace&#34;&gt;&#xA;  3、如何使用Ftrace&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8ftrace&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-配置详解&#34;&gt;&#xA;  3.1 配置详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e9%85%8d%e7%bd%ae%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用了 Ftrace&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用函数级别的追踪器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FUNCTION_GRAPH_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持图形显示&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_GRAPH_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 以图形的方式显示函数追踪过程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_STACK_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用堆栈追踪器，用于跟踪内核函数调用的堆栈信息。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_DYNAMIC_FTRACE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用动态 Ftrace，允许在运行时启用和禁用 Ftrace 功能。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FTRACE_NMI_ENTER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持非屏蔽中断（NMI）时进入 Ftrace 的功能&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_HAVE_FTRACE_MCOUNT_RECORD&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持通过 mcount 记录函数调用关系。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_NMI_ENTER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y                   &lt;span style=&#34;color:#6272a4&#34;&gt;# 表示内核支持通过 mcount 记录函数调用关系。   &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_SYSCALLS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 系统调用的追踪&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FTRACE_MCOUNT_RECORD&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用 mcount 记录函数调用关系。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_SCHED_TRACER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 支持调度追踪&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_FUNCTION_PROFILER&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用函数分析器，主要用于记录函数的执行时间和调用次数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CONFIG_DEBUG_FS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;y&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;# 启用 Debug 文件系统支持&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;上面只是介绍了部分配置，更多详细配置可自行了解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】TOP命令详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 17 Jan 2024 21:37:13 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;一文秒懂top命令详解&#34;&gt;&#xA;  【一文秒懂】TOP命令详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82top%e5%91%bd%e4%bb%a4%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1top命令介绍&#34;&gt;&#xA;  1、Top命令介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1top%e5%91%bd%e4%bb%a4%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;系统中，&lt;code&gt;Top&lt;/code&gt;命令主要用于&lt;strong&gt;实时运行系统的监控&lt;/strong&gt;，包括&lt;code&gt;Linux&lt;/code&gt;内核管理的进程或者线程的资源占用情况。&lt;/p&gt;&#xA;&lt;p&gt;这个命令对所有正在运行的进程和系统负荷提供不断更新的概览信息，包括系统负载、CPU利用分布情况、内存使用、每个进程的内容使用情况等信息。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2top命令使用&#34;&gt;&#xA;  2、Top命令使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2top%e5%91%bd%e4%bb%a4%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Top&lt;/code&gt;的命令介绍如下&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -hv|-bcHiOSs -d secs -n max -u|U user -p pid -o fld -w &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;cols&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;常用的&lt;code&gt;Top&lt;/code&gt;指令有&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top：启动top命令&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -c：显示完整的命令行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -b：以批处理模式显示程序信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -S：以累积模式显示程序信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -n 2：表示更新两次后终止更新显示&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -d 3：设置信息更新周期为3秒&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -p 139：显示进程号为139的进程信息，CPU、内存占用率等&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -n 10：显示更新十次后退出&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除此之外，在&lt;code&gt;top&lt;/code&gt;进程运行过程中，两个最重要的功能是查看帮助（&lt;code&gt;h&lt;/code&gt; 或 &lt;code&gt;？&lt;/code&gt;）和退出（&lt;code&gt;q&lt;/code&gt; 或 &lt;code&gt;Ctrl+C&lt;/code&gt;）。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3top信息详解&#34;&gt;&#xA;  3、Top信息详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3top%e4%bf%a1%e6%81%af%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;top&lt;/code&gt;展示界面由从上到下3部分组成&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;概览区域&lt;/li&gt;&#xA;&lt;li&gt;表头&lt;/li&gt;&#xA;&lt;li&gt;任务区域&lt;/li&gt;&#xA;&lt;li&gt;还有一个输入/消息行，位于概览区域和表头之间。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230811143742616.png&#34; alt=&#34;image-20230811143742616&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;31-概览区详解&#34;&gt;&#xA;  3.1 概览区详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e6%a6%82%e8%a7%88%e5%8c%ba%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top - 14:46:08 up  5:46,  &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; user,  load average: 0.00, 0.00, 0.00&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;程序或者窗口的名称：&lt;code&gt;top&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;当前时间和系统的启动时间：&lt;code&gt;14:46:08 up 5:46&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;总共的用户数量：&lt;code&gt;1 user&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;过去1、5和15分钟的系统平均负载：&lt;code&gt;load average: 0.00, 0.00, 0.00&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Tasks: &lt;span style=&#34;color:#bd93f9&#34;&gt;290&lt;/span&gt; total,   &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; running, &lt;span style=&#34;color:#bd93f9&#34;&gt;212&lt;/span&gt; sleeping,   &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; stopped,   &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; zombie&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%Cpu&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;:  0.0 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两行显示了任务数量和&lt;code&gt;CPU&lt;/code&gt;状态&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核调试工具——Debugfs</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7debugfs/</link>
      <pubDate>Fri, 19 Jan 2024 21:23:44 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7debugfs/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核调试工具debugfs&#34;&gt;&#xA;  【一文秒懂】Linux内核调试工具——Debugfs&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7debugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;962&#34; height=&#34;176&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/93fe500adc7d40c6bf134e9d9af12b0f.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Debugfs&lt;/code&gt;其存在的主要意义是&lt;span style=&#34;color: blue;&#34;&gt;&lt;strong&gt;为了内核开发者向用户空间传递更多有用的信息&lt;/strong&gt;&lt;/span&gt;，与&lt;code&gt;proc&lt;/code&gt;不同，&lt;code&gt;proc&lt;/code&gt;只提供进程相关的信息；同时也与&lt;code&gt;sysfs&lt;/code&gt;不同，&lt;code&gt;sysfs&lt;/code&gt;对每个文件都要求一定的规则，而&lt;code&gt;Debugfs&lt;/code&gt;没有任何的规则。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;Debugfs&lt;/code&gt;是一种用于内核调试的虚拟文件系统。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何调试&#34;&gt;&#xA;  2、如何调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-配置debugfs&#34;&gt;&#xA;  2.1 配置&lt;code&gt;Debugfs&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e9%85%8d%e7%bd%aedebugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20220813152331070.png&#34; alt=&#34;image-20220813152331070&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;进去&lt;code&gt;menuconfig&lt;/code&gt;选项中，按下&lt;code&gt;/&lt;/code&gt;搜索&lt;code&gt;CONFIG_DEBUG_FS&lt;/code&gt;关键词即可！&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;当然，可以看&lt;code&gt;Location&lt;/code&gt;在内核中的位置。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;h3 id=&#34;22-挂载debugfs&#34;&gt;&#xA;  2.2 挂载&lt;code&gt;Debugfs&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e6%8c%82%e8%bd%bddebugfs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t debugfs none /sys/kernel/debug&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#挂载&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#查看挂载情况&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;___&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;none on /sys/kernel/debug &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; debugfs &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;rw,relatime&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;23-gpio调试&#34;&gt;&#xA;  2.3 GPIO调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-gpio%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat gpio&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; gpio-43  &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;                    |wakeup              &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; in  lo IRQ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; gpio-64  &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;                    |&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt;                  &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; in  lo IRQ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;上述只是简单的调试&lt;code&gt;GPIO&lt;/code&gt;的方法，而&lt;code&gt;Debugfs&lt;/code&gt;功能远不止于此，其提供了一些API接口，方便我们在内核中&lt;code&gt;Debug&lt;/code&gt;使用。&lt;/p&gt;&#xA;&lt;p&gt;而我们要做的，就是在我们想要进行&lt;code&gt;Debug&lt;/code&gt;的地方，注册&lt;code&gt;debugfs&lt;/code&gt;接口，然后查看我们要调试的信息。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;h3 id=&#34;24-gpio的实现&#34;&gt;&#xA;  2.4 GPIO的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#24-gpio%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;文件&lt;code&gt;kernel\drivers\gpio\gpiolib.c&lt;/code&gt;中&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;`&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file_operations gpiolib_operations &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .owner&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; THIS_MODULE,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .open&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; gpiolib_open,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .read&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_read,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .llseek&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_lseek,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .release&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; seq_release,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; __init &lt;span style=&#34;color:#50fa7b&#34;&gt;gpiolib_debugfs_init&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/* /sys/kernel/debug/gpio */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;) &lt;span style=&#34;color:#50fa7b&#34;&gt;debugfs_create_file&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gpio&amp;#34;&lt;/span&gt;, S_IFREG &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; S_IRUGO,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;gpiolib_operations);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;subsys_initcall&lt;/span&gt;(gpiolib_debugfs_init);` &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3如何使用&#34;&gt;&#xA;  3、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-使用步骤&#34;&gt;&#xA;  3.1 使用步骤&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e4%bd%bf%e7%94%a8%e6%ad%a5%e9%aa%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;想要使用&lt;code&gt;Debugfs&lt;/code&gt;功能，首先要做的就是要包含 &lt;code&gt;&amp;lt;linux/debugfs.h&amp;gt;&lt;/code&gt;头文件&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;debugfs_create_dir&lt;/code&gt;接口，创建一个文件夹，用于保存&lt;code&gt;debugfs&lt;/code&gt;所操作的文件&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;debugfs_create_file&lt;/code&gt;接口，创建多个文件进行操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;32-接口介绍&#34;&gt;&#xA;  3.2 接口介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e6%8e%a5%e5%8f%a3%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;debugfs_create_dir&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dentry &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;debugfs_create_dir&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;name, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dentry &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;parent);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;name&lt;/code&gt;：文件夹名称&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
