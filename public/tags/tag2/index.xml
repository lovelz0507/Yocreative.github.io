<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tag2 on 悠创</title>
    <link>http://localhost:1313/Yocreative.github.io/tags/tag2/</link>
    <description>Recent content in Tag2 on 悠创</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jan 2024 10:39:03 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Yocreative.github.io/tags/tag2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WiFi无缝漫游详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/wifi/wifi%E6%97%A0%E7%BC%9D%E6%BC%AB%E6%B8%B8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 20 Jan 2024 10:23:36 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/wifi/wifi%E6%97%A0%E7%BC%9D%E6%BC%AB%E6%B8%B8%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;wifi无缝漫游详解&#34;&gt;&#xA;  WiFi无缝漫游详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#wifi%e6%97%a0%e7%bc%9d%e6%bc%ab%e6%b8%b8%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1wlan漫游简介&#34;&gt;&#xA;  1、WLAN漫游简介&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1wlan%e6%bc%ab%e6%b8%b8%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;百度百科&lt;/strong&gt;：：当网络环境存在多个相同SSID的AP，且它们的覆盖范围的重合时，无线用户可以在整个WLAN覆盖区内移动，无线网卡能够自动发现附近信号强度最大的AP，并通过这个AP收发数据，保持不间断的网络连接，这就称为无线漫游。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;简单来说&lt;/strong&gt;：&lt;code&gt;WLAN&lt;/code&gt;漫游是指&lt;code&gt;STA&lt;/code&gt;在不同的&lt;code&gt;AP&lt;/code&gt;覆盖范围之间移动，且保持用户业务不中断的行为。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;AP&lt;/strong&gt;：也就是无线接入点，是一个无线网络的创建者，是&lt;strong&gt;网络的中心节点&lt;/strong&gt;。一般家庭或办公室使用的无线路由器就一个AP。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;STA&lt;/strong&gt;：每一个连接到无线网络中的&lt;strong&gt;终端&lt;/strong&gt;(如笔记本电脑、PDA及其它可以联网的用户设备)都可称为一个站点。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如下图所示，&lt;code&gt;STA1&lt;/code&gt;从&lt;code&gt;AP1&lt;/code&gt;的覆盖范围移动到&lt;code&gt;AP2&lt;/code&gt;的覆盖范围时保持业务不中断。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/1161761-20190808105029933-1487137636.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2wifi漫游由来&#34;&gt;&#xA;  2、WiFi漫游由来&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2wifi%e6%bc%ab%e6%b8%b8%e7%94%b1%e6%9d%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;当家庭面积超过一定面积后，为了保证全家范围的wifi网络覆盖，我们就需要引入2个以上的WiFi接入点了。在多个WiFi接入点下，为了优化网络使用体验，免去手动切换wifi接入的麻烦，就需要引入WiFi漫游。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;伪漫游&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;一般&lt;strong&gt;最常见的伪漫游方法&lt;/strong&gt;就是将2个以上的wifi接入点的SSID名称及密码设置相同，虽然起到了一定的切换作用，不过用过的朋友都知道效果非常的不好，先不说能否自动切换的问题，就算切换成功了，也会造成IP地址的改变，游戏掉网、断连接是必须的！因此在多AP情况下就必须引入一个新的名词：&lt;strong&gt;Wifi快速漫游&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;WiFi漫游&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;上文提到的设置SSID名称及密码相同的方案是最低能的做法，稍微懂一点网络知识的朋友都不会采用的；&lt;/p&gt;&#xA;&lt;p&gt;最次的方案也是要&lt;strong&gt;保证DHCP服务器的统一，保证切换Wifi时候IP地址不变。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;更进一阶，引入AC控制器，利用AC+AP的组合形式实现wifi漫游。目前市面上主流的TPlink、爱快、Mesh等产品的方案多是如此。&lt;/p&gt;&#xA;&lt;p&gt;其根本的原理是通过AC设定AP的RSSI阈值，将信号不稳定的设备T下线，迫使终端设备重新连接信号最强的AP，实现AP的自动切换。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;实话实说这种方案对于绝大多数的用户是完全够用的，AP切换过程中网络中断时间一般在200ms-500ms左右，影响不大，确实优化了网络体验。对于网络要求不高的朋友推荐选择。不过在该方案下游戏会有一段明显的卡顿，但不会掉线。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;WiFi快速漫游&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果你是一个追求完美网络体验的朋友，而且想一次到位部署网络，不再折腾了，那么你就需要&lt;strong&gt;Wifi快速漫游&lt;/strong&gt;了。上面介绍的第二种方案，虽然效果说得过去，但仍然无法保证切换过程尽可能的少丢包及进一步缩短网络中断时间。这个时候就必须引入&lt;strong&gt;Wifi快速漫游&lt;/strong&gt;方案了，通过&lt;strong&gt;Wifi快速漫游进一步缩短网络中断时间&lt;/strong&gt;，提高网络使用体验，真正实现游戏中不卡顿&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;对于有AC控制器的Wifi网络系统中，漫游过程可以简单分为3个阶段：&lt;strong&gt;漫游触发→选择新AP→重新认证&lt;/strong&gt;。这时候就需要802.11k/v/r协议登场了。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于Wifi网络密码的存在，在重新认证阶段终端在切换AP的时候需要出示其缓存的密钥，AP检查密钥并进行四次握手，产生数据加密密钥，漫游完成。802.11r协议可以在以上基础上省略4次握手，进一步缩减了断网的时间。&lt;/li&gt;&#xA;&lt;li&gt;802.11k能告诉终端，如何快速选择漫游AP。&lt;/li&gt;&#xA;&lt;li&gt;802.11v能优化漫游触发。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;能够应用802.11k/v/r协议的Wifi漫游都可以称之为快速漫游&lt;/strong&gt;，不过这需要AP和终端都支持哦，实际上目前能够支持802.11k/v/r协议的终端并不多，苹果算是一个例外吧，新产品全都支持802.11k/v/r，所以Wifi快速漫游更适合使用苹果的土豪们&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;综上，WLAN漫游策略主要解决以下问题：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;避免漫游过程中的认证时间过长导致丢包甚至业务中断&lt;/strong&gt;：802.1x认证、Portal认证等认证过程报文交互次数和时间，大于WLAN连接过程，所以漫游需要避免重新认证授权及密钥协商过程。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;保证用户授权信息不变&lt;/strong&gt;：用户的认证和授权信息，是用户访问网络的通行证，如果需要漫游后业务不中断，必须确保用户在AC上的认证和授权信息不变&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;保证用户IP地址不变&lt;/strong&gt;：应用层协议均以IP地址和TCP/UDP Session为用户业务承载，漫游后的用户必须能够保持原IP地址不变，对应的TCP/UDP Session才能不中断，应用层数据才能够保持正常转发&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3漫游基础知识&#34;&gt;&#xA;  3、漫游基础知识&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%bc%ab%e6%b8%b8%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;WLAN漫游的网络架构&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/1161761-20190808113243125-2091597894.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;AC控制器&lt;/strong&gt;：可用来集中化控制和管理无线AP，是一个无线网络的核心，负责管理无线网络中的所有无线AP，对AP管理包括：下发配置、修改相关配置参数、射频智能管理、接入安全控制等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;漫游组&lt;/strong&gt;：在WLAN网络中，可以对不同的AC进行分组，&lt;strong&gt;STA可以在同一个组的AC间进行漫游&lt;/strong&gt;，这个组就叫漫游组。如图，AC1和AC2组成一个漫游组。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;AC间隧道&lt;/strong&gt;：为了支持AC间漫游，漫游组内的所有AC需要同步每个AC管理的STA和AP设备信息，因此在AC间建立一条隧道作为数据同步和报文转发的通道。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Master Controller&lt;/strong&gt;：STA在同一个漫游组内的AC间进行漫游，需要漫游组内的AC能够试别组内其他AC。通过选定一个AC作为Master Controller，在该AC上维护漫游组成员表，并下发到漫游组内AC，使各AC之间相互试别并建立AC间隧道，如图，选的AC1作为Master Controller.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Master Controller既可以是漫游组外的AC，也可以在漫游组内选择一个AC&lt;/li&gt;&#xA;&lt;li&gt;Master Controlle管理其他AC的同时，不能被其他Master Controlle管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;AC内漫游：如果漫游过程中关联的是同一个AC，则是AC内漫游，如图STA从AP1漫游到AP2即是AC内漫游&lt;/li&gt;&#xA;&lt;li&gt;AC间漫游：如果漫游过程中关联的不是同一个AC，则是AC间漫游，如图STA在从Ap1漫游到AP3的过程即为AC间漫游&lt;/li&gt;&#xA;&lt;li&gt;HAC （Home AC）：STA首次与漫游组内某个AC进行关联，则该AC为它的HAC&lt;/li&gt;&#xA;&lt;li&gt;HAP （Home AP）：STA首次与漫游组内某个AP进行关联，则该AP为它的HAP&lt;/li&gt;&#xA;&lt;li&gt;FAC（Foreign AC）：STA漫游后关联的AC即为它的FAC&lt;/li&gt;&#xA;&lt;li&gt;FAP（Foreign AP）：STA漫游后关联的AP即为它的FAP&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux调试工具——GDB介绍</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdb%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Jan 2024 10:32:28 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdb%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux调试工具gdb介绍&#34;&gt;&#xA;  【一文秒懂】Linux调试工具——GDB介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7gdb%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://c.biancheng.net/uploads/allimg/200212/1-2002122135363V.gif&#34; alt=&#34;GDB的吉祥物：弓箭鱼&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1gdb是什么&#34;&gt;&#xA;  1、GDB是什么&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1gdb%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB：GNU Project Debugger&lt;/code&gt;是&lt;code&gt;GNU&lt;/code&gt;工程仿真器，允许开发者能够去看程序内部发生的情况，或者发生&lt;code&gt;crash&lt;/code&gt;时候， 知道程序正在做什么！它诞生于 GNU 计划（同时诞生的还有 GCC、Emacs 等），是 Linux 下常用的程序调试器。发展至今，GDB 已经迭代了诸多个版本，当下的 GDB 支持调试多种编程语言编写的程序，包括 C、C++、Go、Objective-C、OpenCL、Ada 等。实际场景中，GDB 更常用来调试 C 和 C++ 程序。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB&lt;/code&gt;主要功能有四个方面：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启动程序：指定任何可以影响其运行行为的动作&lt;/li&gt;&#xA;&lt;li&gt;停止程序：使程序在指定条件下停止&lt;/li&gt;&#xA;&lt;li&gt;检查错误：当程序停止时，检查发生了什么&lt;/li&gt;&#xA;&lt;li&gt;纠正错误：更改程序中的内容，纠正错误&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;GDB&lt;/code&gt;可以在本地、远程、仿真器上执行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20221101152802333.png&#34; alt=&#34;image-20221101152802333&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2gdb如何使用&#34;&gt;&#xA;  2、GDB如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2gdb%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如何使用GDB？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;要想回答这个问题，从正统角度来分析，有两种方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;GDB官方手册&lt;/strong&gt;：https://sourceware.org/gdb/&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;GDB帮助信息&lt;/strong&gt;：&lt;code&gt;help all&lt;/code&gt;（命令行输入）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20221101153218534.png&#34; alt=&#34;image-20221101153218534&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;简单来说，&lt;code&gt;GDB&lt;/code&gt;调试方法有3种：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;直接调试&lt;/strong&gt;：&lt;code&gt;gdb [exec file]&lt;/code&gt;，用于直接仿真一个执行程序&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;附属调试&lt;/strong&gt;：&lt;code&gt;gdb attach pid&lt;/code&gt;，用于直接调试一个已运行的程序（&lt;code&gt;ubuntu&lt;/code&gt;注意权限问题）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心转存调试&lt;/strong&gt;：&lt;code&gt;gdb [exec file] [core-dump file]&lt;/code&gt;，用于调试&lt;code&gt;core-dump&lt;/code&gt;文件&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;：&lt;code&gt;GDB&lt;/code&gt;调试的&lt;code&gt;[exec file]&lt;/code&gt;，该文件最好编译的时候带上&lt;code&gt;-g&lt;/code&gt;选项，生成带调试信息的可执行文件。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;3gdb常用指令&#34;&gt;&#xA;  3、GDB常用指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3gdb%e5%b8%b8%e7%94%a8%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-基础指令&#34;&gt;&#xA;  3.1 基础指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%9f%ba%e7%a1%80%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;指令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;file [exec file]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;选择要调试的可执行文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;run/r&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;重新开始运行文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;暂时断点，停在第一执行语句处&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;list/l&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看源代码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;next/n&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单步调试，逐过程，函数直接执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;step/s&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单步调试，逐语句，跳入函数执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;backtrace/bt&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看函数调用的堆栈信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;finish&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;结束当前函数，返回函数调用点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;continue&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;继续执行&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;print/p&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;打印变量&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;break/b [filename:line_number]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;打断点, [文件名:行号]，也有多种方式&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;quit&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;退出gdb调试&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;32-进阶指令&#34;&gt;&#xA;  3.2 进阶指令&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e8%bf%9b%e9%98%b6%e6%8c%87%e4%bb%a4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;指令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;frame&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看当前帧信息，包括参数，文件所在位置等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;该指令，可以查看到更多详细信息，如下：&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info threads&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info sharedlibrary&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看共享库信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info args&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看参数信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info breakpoints&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看断点信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info frame&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看当前帧信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;core-file [core-dump file]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;选择core-dump文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;watch [expr]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;观察某个表达式的值是否发生变化，如果有变化，马上停住程序。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;examine/x &amp;lt;n/f/u&amp;gt;&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看内存地址的值，addr为地址信息，  &lt;br&gt;n表示内存长度，f表示显示格式，u表示显示字节数&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;set&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;设置变量、寄存器、内存的值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;signal [number]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;发送一个信号给该进程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;disassemble&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;反汇编，查看当前执行时的源代码的机器码&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;33-多线程调试&#34;&gt;&#xA;  3.3 多线程调试&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#33-%e5%a4%9a%e7%ba%bf%e7%a8%8b%e8%b0%83%e8%af%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;命令&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;info threads&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread id&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;切换到指定线程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply all bt&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;查看所有线程堆栈信息&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;set scheduler-locking off|on|step&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;off 不锁定任何线程，也就是所有线程都执行，这是默认值。  &lt;br&gt;on 只有当前被调试程序会执行。  &lt;br&gt;step 在单步的时候，除了next过一个函数的情况以外，只有当前线程会执行。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply ID1 ID2 command&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指定某个线程执行相关命令&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;thread apply all command&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;指定所有线程执行相关命令&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;更多命令详细使用见参考文章&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux远程调试工具——gdbserver</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdbserver/</link>
      <pubDate>Sat, 20 Jan 2024 10:34:18 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdbserver/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux远程调试工具gdbserver&#34;&gt;&#xA;  【一文秒懂】Linux远程调试工具——gdbserver&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e8%bf%9c%e7%a8%8b%e8%b0%83%e8%af%95%e5%b7%a5%e5%85%b7gdbserver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;img width=&#34;712&#34; height=&#34;193&#34; src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/7d4df75ef808461785ff957c8a8da235.gif&#34; class=&#34;jop-noMdConv&#34;&gt;&#xA;&lt;h2 id=&#34;1介绍&#34;&gt;&#xA;  1、介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;对于开发者来说，调试必不可少。&lt;/p&gt;&#xA;&lt;p&gt;对于开发PC软件，通常系统已经继承了调试工具（比如Linux系统的GDB），或者IDE直接支持对程序的调试。&lt;/p&gt;&#xA;&lt;p&gt;而对于开发嵌入式软件来说调试的手段比较有限，很多开发者仅有的调试手段依然是最原始的打印（我也是其中之一）。&lt;/p&gt;&#xA;&lt;p&gt;当然除了打印调试之外还有通过&lt;code&gt;gdb+gdbserver&lt;/code&gt;来调试，&lt;code&gt;gdbserver&lt;/code&gt;在目标系统中运行，&lt;code&gt;gdb&lt;/code&gt;则在宿主机上运行。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;简而言之，&lt;code&gt;gdbserver&lt;/code&gt; 是一个程序，它允许宿主机可以通过网络，远程调试目标板。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用&#34;&gt;&#xA;  2、如何使用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-编译器准备&#34;&gt;&#xA;  2.1 编译器准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%bc%96%e8%af%91%e5%99%a8%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;这里就不再详细讲解编译器的安装什么的了，网上一大把！&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#直接安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install gcc-arm-linux-gnueabihf&#x9;&#x9;&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;#源码安装&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar zxvf gdb-7.12.tar.gz &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; gdb-7.12/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure --target&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;arm-linux --prefix&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$PWD&lt;/span&gt;/__install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;编译完成后，最终会生成&lt;code&gt;gdbserver&lt;/code&gt; 的可执行程序，这个就是我们要使用的工具。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;22-目标机准备&#34;&gt;&#xA;  2.2 目标机准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e7%9b%ae%e6%a0%87%e6%9c%ba%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;我们将&lt;code&gt;gdb_server&lt;/code&gt;可执行程序放置目标板上。&lt;/li&gt;&#xA;&lt;li&gt;再将我们要调试的程序放置目标板上，如&lt;code&gt;helloworld&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;gdb_server&lt;/code&gt;进行调试，使用方法如下：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/1498371-deedb3829b54d646.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gdbserver 192.168.xx.xx:1234 ./helloworld&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;192.168.xx.xx&lt;/code&gt;：IP地址信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;1234&lt;/code&gt;：自定义端口号&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;./helloworld&lt;/code&gt;：运行要仿真的程序&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;此时gdbserver监听端口号1234，并等待客户端连接。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;23-宿主机准备&#34;&gt;&#xA;  2.3 宿主机准备&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e5%ae%bf%e4%b8%bb%e6%9c%ba%e5%87%86%e5%a4%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在宿主机(Ubuntu)上，使用&lt;code&gt;gdb&lt;/code&gt;调试&lt;/li&gt;&#xA;&lt;li&gt;远程连接目标机&lt;/li&gt;&#xA;&lt;li&gt;运行程序&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; $ gdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; target remote 192.168.xx.xx:1234&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Remote debugging using :1234&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; c&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#运行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;target remote&lt;/code&gt;：远程连接到指定IP的端口&lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核死锁检测</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sat, 20 Jan 2024 10:36:40 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核死锁检测&#34;&gt;&#xA;  【一文秒懂】Linux内核死锁检测&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e6%ad%bb%e9%94%81%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;最近遇到了一个驱动上面的&lt;code&gt;BUG&lt;/code&gt;，导致终端敲命令都无响应，最终导致内核触发了&lt;code&gt;hung_task_timeout&lt;/code&gt;…&lt;/p&gt;&#xA;&lt;p&gt;为什么会出现这种情况？该如何排查？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/Screenshot_20230627_222840.png&#34; alt=&#34;Screenshot_20230627_222840&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1死锁&#34;&gt;&#xA;  1、死锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e6%ad%bb%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;死锁指两个或更多进程或线程因相互等待对方释放资源而互相阻塞，从而导致系统中所有的进程或线程都无法继续运行的情况。&lt;/p&gt;&#xA;&lt;p&gt;一个典型的死锁场景包括以下几个角色：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;资源&lt;/strong&gt;：系统内的某个文件、某个设备、共享的内存区域等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;进程/线程&lt;/strong&gt;：进程或线程需要访问某个资源来完成其工作，但其当前无法取得该资源的控制权，因为该资源已被其他进程或线程占用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;饥饿&lt;/strong&gt;：由于进程无法获取其需要的资源，它不能继续前进或完成操作。如果没有正确的措施来处理和解决死锁，进程可能会一直等待，直到设备或整个系统崩溃。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2常见的死锁方式&#34;&gt;&#xA;  2、常见的死锁方式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%b8%b8%e8%a7%81%e7%9a%84%e6%ad%bb%e9%94%81%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见死锁的2种方式&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AA锁：包括重复上锁和上下文切换引起的上锁，即一个线程，持有&lt;code&gt;A&lt;/code&gt;锁，还未释放，又去请求&lt;code&gt;A&lt;/code&gt;锁&lt;/li&gt;&#xA;&lt;li&gt;AB-BA死锁：一个&lt;code&gt;F1&lt;/code&gt;线程，持有&lt;code&gt;A&lt;/code&gt;锁，再去获取&lt;code&gt;B&lt;/code&gt;锁，而一个&lt;code&gt;F2&lt;/code&gt;线程持有&lt;code&gt;B&lt;/code&gt;锁，再去获取&lt;code&gt;A&lt;/code&gt;锁，这个时候处于的死锁状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见的死锁有以下4种情况&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;进程重复申请同一个锁，称为AA死锁。例如，重复申请同一个自旋锁；使用读写锁，第一次申请读锁，第二次申请写锁。&lt;/li&gt;&#xA;&lt;li&gt;进程申请自旋锁时没有禁止硬中断，进程获取自旋锁以后，硬中断抢占，申请同一个自旋锁。这种AA死锁很隐蔽，人工审查很难发现。&lt;/li&gt;&#xA;&lt;li&gt;两个进程都要获取锁L1和L2，进程1持有锁L1，再去获取锁L2，如果这个时候进程2持有锁L2并且正在尝试获取锁L1，那么进程1和进程2就会死锁，称为AB-BA死锁。&lt;/li&gt;&#xA;&lt;li&gt;在一个处理器上进程1持有锁L1，再去获取锁L2，在另一个处理器上进程2持有锁L2，硬中断抢占进程2以后获取锁L1。这种AB-BA死锁很隐蔽，人工审查很难发现。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;内核提供了&lt;code&gt;Lockdep&lt;/code&gt;来检测死锁的异常情况&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3lockdep-内核配置&#34;&gt;&#xA;  3、Lockdep 内核配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3lockdep-%e5%86%85%e6%a0%b8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_LOCKDEP&lt;/code&gt;：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_LOCK_ALLOC&lt;/code&gt;：检查内核是否错误地释放被持有的锁。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_PROVE_LOCKING&lt;/code&gt;：允许内核报告死锁问题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_LOCKDEP&lt;/code&gt; ：在死锁发生，内核报告相应的死锁&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_LOCK_STAT&lt;/code&gt;：追踪锁竞争的点，解释的更详细&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4lockdep-初探&#34;&gt;&#xA;  4、Lockdep 初探&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4lockdep-%e5%88%9d%e6%8e%a2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lockdep&lt;/code&gt;操作的基本单元并非单个的锁实例，而是锁类（lock-class）&lt;/strong&gt;。比如，&lt;code&gt;struct inode&lt;/code&gt;结构体中的自旋锁&lt;code&gt;i_lock&lt;/code&gt;字段就代表了这一类锁，而具体每个&lt;code&gt;inode&lt;/code&gt;节点的锁只是该类锁中的一个实例。对所有这些实例，&lt;code&gt;lockdep&lt;/code&gt;会把它们当作一个整体做处理，即把判断粒度放大，否则对可能有成千上万个的实例进行逐一判断，那处理难度可想而知，而且也没有必要.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;lockdep&lt;/code&gt;跟踪每个锁类的自身状态&lt;/strong&gt;，也跟踪各个锁类之间的依赖关系，通过一系列的验证规则，以确保锁类状态和锁类之间的依赖总是正确的。另外，锁类一旦在初次使用时被注册，那么后续就会一直存在，所有它的具体实例都会关联到它。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;锁的几个状态&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ever held in STATE context –&amp;gt; 该锁曾在STATE上下文被持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head as readlock in STATE context –&amp;gt; 该锁曾在STATE上下文被以读锁形式持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head with STATE enabled –&amp;gt; 该锁曾在启用STATE的情况下被持有过&lt;/li&gt;&#xA;&lt;li&gt;ever head as readlock with STATE enabled –&amp;gt; 该锁曾在启用STATE的情况下被以读锁形式持有过&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】如何生成core Dump文件</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90core-dump%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 20 Jan 2024 10:38:03 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90core-dump%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux之Core Dump文件详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E4%B9%8Bcore-dump%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 20 Jan 2024 10:38:42 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E4%B9%8Bcore-dump%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【一文秒懂】Linux内核态内存泄露检测工具</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sat, 20 Jan 2024 10:39:03 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h1 id=&#34;一文秒懂linux内核态内存泄露检测工具&#34;&gt;&#xA;  【一文秒懂】Linux内核态内存泄露检测工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e6%96%87%e7%a7%92%e6%87%82linux%e5%86%85%e6%a0%b8%e6%80%81%e5%86%85%e5%ad%98%e6%b3%84%e9%9c%b2%e6%a3%80%e6%b5%8b%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1kmemleak介绍&#34;&gt;&#xA;  1、Kmemleak介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1kmemleak%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核开发中，&lt;code&gt;Kmemleak&lt;/code&gt;是一种用于&lt;strong&gt;检测内核中内存泄漏的工具&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;内存泄漏&lt;/strong&gt;指的是程序中已经不再使用的内存没有被妥善地释放，导致内存的浪费。内核中的内存泄漏同样会导致系统性能下降、系统崩溃等问题。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Kmemleak&lt;/code&gt;能够检测内核中的内存泄漏，通过检测内核中未被释放但又无法找到其使用位置的内存，进一步定位、修复内存泄漏的问题。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在用户空间，我们常用&lt;code&gt;Valgrind&lt;/code&gt;来检测；&lt;/p&gt;&#xA;&lt;p&gt;在内核空间，我们常用&lt;code&gt;Kmemleak&lt;/code&gt;来检测。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2如何使用kmemleak&#34;&gt;&#xA;  2、如何使用Kmemleak&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8kmemleak&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-内核配置&#34;&gt;&#xA;  2.1 内核配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e5%86%85%e6%a0%b8%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;内核打开相应配置&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK&lt;/code&gt;：&lt;code&gt;Kmemleak&lt;/code&gt;被加入到内核&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE&lt;/code&gt;设置为&lt;code&gt;16000&lt;/code&gt;：该参数为记录内存泄露信息的内存池，越大记录信息越多。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KMEMLEAK_DEFAULT_OFF&lt;/code&gt; ：&lt;code&gt;Kmemleak&lt;/code&gt;默认开关状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;依赖的配置&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_KERNEL&lt;/code&gt;：打开内核调试功能&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_DEBUG_FS&lt;/code&gt;：需要借助到&lt;code&gt;debugfs&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONFIG_STACKTRACE&lt;/code&gt;：记录进程的堆栈信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-用户空间配置&#34;&gt;&#xA;  2.2 用户空间配置&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e7%94%a8%e6%88%b7%e7%a9%ba%e9%97%b4%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;我们要想使用&lt;code&gt;Kmemleak&lt;/code&gt;，需要挂在&lt;code&gt;debugfs&lt;/code&gt;，来查看泄露的情况。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;进入文件系统后，进行挂载&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mount -t debugfs nodev /sys/kernel/debug/&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;挂在debugfs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;设置扫描时间&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt; &amp;gt; /sys/kernel/debug/kmemleak&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;10S扫描一次&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;默认内存泄露检测时间为&lt;code&gt;10min&lt;/code&gt;，上面设置为&lt;code&gt;10s&lt;/code&gt;一次&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;查看泄露情况&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat /sys/kernel/debug/kmemleak&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#&#x9;查看内存泄露情况&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;其他指令&lt;/strong&gt;：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; scan &amp;gt; /sys/kernel/debug/kmemleak&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;#触发一次扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; clear &amp;gt; /sys/kernel/debug/kmemleak     &lt;span style=&#34;color:#6272a4&#34;&gt;#清除当前 kmemleak 记录的泄露信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; off &amp;gt; /sys/kernel/debug/kmemleak       &lt;span style=&#34;color:#6272a4&#34;&gt;#关闭kmemleak（不可逆转的）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;off &amp;gt; /sys/kernel/debug/kmemleak &lt;span style=&#34;color:#6272a4&#34;&gt;#关闭任务栈扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;stack&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;on &amp;gt; /sys/kernel/debug/kmemleak  &lt;span style=&#34;color:#6272a4&#34;&gt;#使能任务栈扫描&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;on &amp;gt; /sys/kernel/debug/kmemleak   &lt;span style=&#34;color:#6272a4&#34;&gt;#启动自动内存扫描线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;off &amp;gt; /sys/kernel/debug/kmemleak  &lt;span style=&#34;color:#6272a4&#34;&gt;#停止自动内存扫描线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;scan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&amp;lt;secs&amp;gt; &amp;gt; /sys/kernel/debug/kmemleak#设置自动扫描线程扫描间隔，默认是600，设置0则是停止扫描&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;dump&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&amp;lt;addr&amp;gt; &amp;gt; /sys/kernel/debug/kmemleak &lt;span style=&#34;color:#6272a4&#34;&gt;#dump某个地址的内存块信息，比如上面的echo dump=0xffffffc008efd200 &amp;gt; /sys/kernel/debug/kmemleak即可查看详细信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
