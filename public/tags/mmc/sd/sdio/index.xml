<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MMC/SD/SDIO on 悠创</title>
    <link>http://localhost:1313/Yocreative.github.io/tags/mmc/sd/sdio/</link>
    <description>Recent content in MMC/SD/SDIO on 悠创</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jan 2024 21:16:36 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Yocreative.github.io/tags/mmc/sd/sdio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【MMC子系统】一、MMC_SD_SDIO介绍</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%80mmc_sd_sdio%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 19 Jan 2024 21:16:36 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%80mmc_sd_sdio%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;mmc子系统-一mmcsdsdio介绍&#34;&gt;&#xA;  【MMC子系统】 一、MMC/SD/SDIO介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f-%e4%b8%80mmcsdsdio%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该节学习&lt;code&gt;Linux Kernel&lt;/code&gt;的&lt;code&gt;MMC&lt;/code&gt;子系统，也称为块设备驱动，正如其名，与字符驱动相比，&lt;code&gt;MMC&lt;/code&gt;子系统以块为单位进行操作。&lt;/p&gt;&#xA;&lt;p&gt;同时，由于&lt;code&gt;MMC Card&lt;/code&gt;、&lt;code&gt;SD Card&lt;/code&gt;、&lt;code&gt;SDIO Card&lt;/code&gt;等设备协议基本大同小异，所以在&lt;code&gt;Linux Kernel&lt;/code&gt;中使用&lt;code&gt;MMC&lt;/code&gt;子系统来统一管理！&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2mmcsdsdio介绍&#34;&gt;&#xA;  2、MMC/SD/SDIO介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2mmcsdsdio%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;上面我们了解到，&lt;code&gt;Linux Kernel&lt;/code&gt;使用统一的子系统模型来管理&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;等设备，那么为什么要这样设计呢？&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;答案当然是：三者协议有一定的共通性。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC（MultiMediaCard）&lt;/code&gt;多媒体卡设备，从本质上看，&lt;strong&gt;它是一种用于固态非易失性存储的内存卡（memory card）规范，定义了诸如卡的形态、尺寸、容量、电气信号、和主机之间的通信协议等方方面面的内容。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;1997年，&lt;code&gt;MMC&lt;/code&gt;规范正式发布，至今已经进化出了&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;MicroSD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;、&lt;code&gt;EMMC&lt;/code&gt;等多种不同的规范，虽然眼花缭乱，但是追其根源，都源于&lt;code&gt;MMC&lt;/code&gt;规范，所以&lt;code&gt;Linux Kernel&lt;/code&gt;可以将其统一管理！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/95d6d6a51a757c21cdc3108e12d16d0320161225135202.gif&#34; alt=&#34;mmc_sd_sdio_history&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;：强调的是多媒体存储（MM：MultiMedia）&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SD&lt;/code&gt;：强调的是安全数据（SD：Secure Digital）&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SDIO&lt;/code&gt;：强调的是IO接口(IO：Input/Output)&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;更多干货可见：&lt;a href=&#34;https://t.zsxq.com/0eUcTOhdO&#34;&gt;高级工程师聚集地&lt;/a&gt;，助力大家更上一层楼！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3总线接口&#34;&gt;&#xA;  3、总线接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%80%bb%e7%ba%bf%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;其物理接口也十分相似，我们以&lt;code&gt;MMC&lt;/code&gt;为例进行分析。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/4ca87abb20c96c2362ed22855c0fb89a20161225135205.gif&#34; alt=&#34;Card Concept(eMMC)&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们的&lt;code&gt;MMC&lt;/code&gt;卡如上图所示，内部我们不展开分析，直接将其作为一个完整的设备来分析。&lt;/p&gt;&#xA;&lt;p&gt;其通过&lt;code&gt;CLK&lt;/code&gt;、&lt;code&gt;CMD&lt;/code&gt;、&lt;code&gt;DATA&lt;/code&gt;等管脚与我们的&lt;code&gt;SOC&lt;/code&gt;通信，两者之间当然少不了&lt;code&gt;Controller&lt;/code&gt;了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/fbcc70f4593e41a6f96a28c4667a9c3420161225135203.gif&#34; alt=&#34;mmc_sd_sdio_hw_block&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;把通信总线部分，拿出来看&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20240103073934443.png&#34; alt=&#34;image-20240103073934443&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;CLK&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的通信时钟，常用的通信频率为&lt;code&gt;400KHz&lt;/code&gt;（识卡）、&lt;code&gt;25MHz&lt;/code&gt;，&lt;code&gt;50MHz&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的通信命令，标识不同的命令编号，类型多达50多种。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DATA&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的数据通信，其通信总线有8根，可自定义设置，一般默认的是1-bit (默认)模式、4-bit模式和8-bit模式。当然数据线越多，传输越快嘛，但是处理起来也稍微繁琐。&lt;/p&gt;&#xA;&lt;p&gt;除了上面的一些管脚，当然还少不了&lt;code&gt;VCC&lt;/code&gt;、&lt;code&gt;GND&lt;/code&gt;等管脚喽，与其它外设不同的是，&lt;code&gt;MMC&lt;/code&gt;类的设备，还会有一个检测引脚&lt;code&gt;DET&lt;/code&gt;，用于检测是否存在卡设备（热插拔）。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;好啦，上面我们对&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;进行简单了解，也知道了通信的常用方式与物理接口，当然其最核心在于通信的协议啦！由于协议过于复杂，我们放到后面了解。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4参考文章&#34;&gt;&#xA;  4、参考文章&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[1]：&lt;a href=&#34;http://www.wowotech.net/basic_tech/mmc_sd_sdio_intro.html&#34;&gt;http://www.wowotech.net/basic_tech/mmc_sd_sdio_intro.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】二、EMMC协议</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%8Cemmc%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 19 Jan 2024 21:14:30 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%8Cemmc%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h1 id=&#34;mmc子系统-二emmc协议&#34;&gt;&#xA;  【MMC子系统】 二、EMMC协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f-%e4%ba%8cemmc%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在上一节，我们知道&lt;code&gt;EMMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;三种规范都是在&lt;code&gt;MMC&lt;/code&gt;规范之上发展而来，协议相差不大，所以&lt;code&gt;Linux Kernel&lt;/code&gt;才能使用&lt;code&gt;MMC&lt;/code&gt;子系统来统一管理！&lt;/p&gt;&#xA;&lt;p&gt;下面，我们以&lt;code&gt;MMC&lt;/code&gt;协议为例，来了解一下相关协议!&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2emmc基本了解&#34;&gt;&#xA;  2、EMMC基本了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2emmc%e5%9f%ba%e6%9c%ac%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-物理线路&#34;&gt;&#xA;  2.1 物理线路&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%89%a9%e7%90%86%e7%ba%bf%e8%b7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202210312033341.gif&#34; alt=&#34;Card Concept(eMMC)&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231025163714473.png&#34; alt=&#34;image-20231025163714473&#34; /&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;物理接口&lt;/th&gt;&#xA;          &lt;th&gt;接口含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CLK&lt;/td&gt;&#xA;          &lt;td&gt;时钟线，此信号的每一周期控制&lt;strong&gt;命令线&lt;/strong&gt;上的 1 bit 传输，以及所有&lt;strong&gt;数据线&lt;/strong&gt;上 1 bit（1x） 或 2 bit（2x）传输。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CMD&lt;/td&gt;&#xA;          &lt;td&gt;命令线，此信号是双向命令通道，用于设备初始化和命令传输。CMD信号有两种工 作模式：用于初始化模式&lt;strong&gt;开漏模式&lt;/strong&gt;和快速命令传输&lt;strong&gt;推拉模式&lt;/strong&gt;。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DAT0-7&lt;/td&gt;&#xA;          &lt;td&gt;这些是双向的数据通道。DAT 信号以&lt;strong&gt;推拉模式&lt;/strong&gt;工作。缺省状态，只有DAT0处于推拉模式，DAT1-7处于上拉（内含上拉），进入4bit后，DAT0-3处于推拉&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-emmc相关寄存器了解&#34;&gt;&#xA;  2.2 EMMC相关寄存器了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-emmc%e7%9b%b8%e5%85%b3%e5%af%84%e5%ad%98%e5%99%a8%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202210312033046.png&#34; alt=&#34;image-20220215111031546&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;23-其他特性了解&#34;&gt;&#xA;  2.3 其他特性了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e5%85%b6%e4%bb%96%e7%89%b9%e6%80%a7%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;读写模式&lt;/strong&gt;：单块读写，多块读写&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;寻址方式&lt;/strong&gt;：字节寻址和扇区寻址，字节寻址允许最大2GB，容量超过2GB的，使用扇区（512B）寻址&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;电压模式&lt;/strong&gt;：支持高电压和双电压模式&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;支持增强分区模式等&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3总线协议&#34;&gt;&#xA;  3、总线协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%80%bb%e7%ba%bf%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-基础了解&#34;&gt;&#xA;  3.1 基础了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%9f%ba%e7%a1%80%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;命令&lt;/strong&gt;：启动一种操作的Token，命令从主机发往设备，在CMD线路上串行传输。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应答&lt;/strong&gt;：从设备发往主机作为对上一命令的回答的Token，在CMD线路上串行传输。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt;：在主从机之间双向传输，总线宽度可以是1-bit（缺省）、4-bit 和 8-bit&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;32-命令格式&#34;&gt;&#xA;  3.2 命令格式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%91%bd%e4%bb%a4%e6%a0%bc%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/e4f540b09494fc3b1f185ab8d34d09a1.png&#34; alt=&#34;image-20220215112109330&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】三、MMC子系统框架</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%89mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Fri, 19 Jan 2024 21:14:38 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%89mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h1 id=&#34;mmc子系统三mmc子系统框架&#34;&gt;&#xA;  【MMC子系统】三、MMC子系统框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e4%b8%89mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;上章，我们简单了解了&lt;code&gt;EMMC&lt;/code&gt;协议，感兴趣的可以查阅一下&lt;code&gt;SD&lt;/code&gt;和&lt;code&gt;SDIO&lt;/code&gt;的协议，之所以&lt;code&gt;Linux&lt;/code&gt;内核能够对&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;、&lt;code&gt;EMMC&lt;/code&gt;进行统一管理，根本原因就是三者协议上的相似性，我们该系列文章均以&lt;code&gt;EMMC&lt;/code&gt;为剑，一层层划开包裹着的盔甲。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;本系列文章，均以&lt;code&gt;Linux 4.19&lt;/code&gt;为参考&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1mmc子系统框架&#34;&gt;&#xA;  1、MMC子系统框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://hughesxu.github.io/assets/img/sample/mmc_subsystem.svg&#34; alt=&#34;MMC Subsystem&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;如上图所示，&lt;code&gt;MMC&lt;/code&gt;子系统的整体框架包括：&lt;code&gt;MMC Host&lt;/code&gt;、&lt;code&gt;MMC Core&lt;/code&gt;、&lt;code&gt;MMC Block&lt;/code&gt;。我们从下网上看：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC HOST&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;控制器驱动层，正如其名，该层主要是为了实现&lt;code&gt;MMC&lt;/code&gt;控制器的初始化，以及&lt;code&gt;MMC&lt;/code&gt;底层的数据收发操作，其直接控制的是底层寄存器，用以产生相应的通信时序。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC CORE&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;核心层，该层主要起到了承上启下的作用。对下，主要体现在注册&lt;code&gt;MMC&lt;/code&gt;总线，实现对&lt;code&gt;MMC device&lt;/code&gt;和&lt;code&gt;MMC driver&lt;/code&gt;的统一管理；对上，体现在实现&lt;code&gt;MMC&lt;/code&gt;通信协议，并向上提供相应的读写操作接口。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC BLOCK&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;块设备驱动层，其主要作用是屏蔽底层的实现逻辑，将底层抽象为卡设备，并且与虚拟文件系统关联，负责块设备请求的处理以及请求队列的管理，又称为&lt;code&gt;card&lt;/code&gt;卡驱动。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;哈哈，简单吧，我们刚开始对&lt;code&gt;MMC&lt;/code&gt;子系统框架就先了解这么多，不着急，慢慢来。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2mmc子系统文件结构&#34;&gt;&#xA;  2、MMC子系统文件结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;了解完&lt;code&gt;MMC&lt;/code&gt;子系统后，我们看一下&lt;code&gt;MMC&lt;/code&gt;驱动在&lt;code&gt;Linux&lt;/code&gt;下的目录结构，我们进入到&lt;code&gt;drivers/mmc&lt;/code&gt;目录&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drivers/mmc/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;├── core&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── block.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── bus.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── core.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── mmc.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── mmc_ops.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── ......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;├── host&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── sunxi-mmc.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── ......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;这里介绍一个方法&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果刚接触的朋友，不知道文件之间的关系是怎么样的，可以通过&lt;code&gt;Makefile&lt;/code&gt;和&lt;code&gt;Kconfig&lt;/code&gt;文件来大致看一下。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;obj-$(CONFIG_MMC)&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; mmc_core.o&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;mmc_core-y&lt;/span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; core.o bus.o host.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   mmc.o mmc_ops.o sd.o sd_ops.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   sdio.o sdio_ops.o sdio_bus.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   sdio_cis.o sdio_io.o sdio_irq.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   slot-gpio.o&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由上面可知，&lt;code&gt;MMC CORE&lt;/code&gt;核心层，包括的文件有：&lt;code&gt;core.c&lt;/code&gt;、&lt;code&gt;bus.c&lt;/code&gt;等等，&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】四、MMC控制器驱动层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%9B%9Bmmc%E6%8E%A7%E5%88%B6%E5%99%A8%E9%A9%B1%E5%8A%A8%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:18 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%9B%9Bmmc%E6%8E%A7%E5%88%B6%E5%99%A8%E9%A9%B1%E5%8A%A8%E5%B1%82/</guid>
      <description>&lt;h1 id=&#34;mmc子系统四mmc控制器驱动层&#34;&gt;&#xA;  【MMC子系统】四、MMC控制器驱动层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e5%9b%9bmmc%e6%8e%a7%e5%88%b6%e5%99%a8%e9%a9%b1%e5%8a%a8%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;控制器驱动层一般为&lt;code&gt;chip manufacturer&lt;/code&gt;做的事，不同的芯片实现方式不尽相同。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;内核源码，相当大的一部分都是由&lt;code&gt;Device Drivers&lt;/code&gt;程序代码组成，其次另一大部分就是那些你从来都没有听说过的&lt;code&gt;Filesystem Format&lt;/code&gt;组成，真正核心的代码非常短小精悍的。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;当然，设备驱动程序也有一套既定的框架，按照框架来编写，实现对应的接口就可以了，在这里，我们主要分析一下&lt;code&gt;MMC&lt;/code&gt;控制器驱动的实现框架，不拘泥于细节。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;下文以&lt;code&gt;sunxi-mmc.c&lt;/code&gt;为例来分析，基于&lt;code&gt;Linux4.19&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;41-通用驱动框架&#34;&gt;&#xA;  4.1 通用驱动框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e9%80%9a%e7%94%a8%e9%a9%b1%e5%8a%a8%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sunxi_mmc_probe&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; platform_device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pdev) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; of_device_id sunxi_mmc_of_match[] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun4i-a10-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun4i_a10_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun5i-a13-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun5i_a13_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun7i-a20-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun7i_a20_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun8i-a83t-emmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun8i_a83t_emmc_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun9i-a80-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun9i_a80_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun50i-a64-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun50i_a64_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun50i-a64-emmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun50i_a64_emmc_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#6272a4&#34;&gt;/* sentinel */&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_DEVICE_TABLE&lt;/span&gt;(of, sunxi_mmc_of_match);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dev_pm_ops sunxi_mmc_pm_ops &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;SET_RUNTIME_PM_OPS&lt;/span&gt;(sunxi_mmc_runtime_suspend,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               sunxi_mmc_runtime_resume,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; platform_driver sunxi_mmc_driver &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .driver &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .name&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sunxi-mmc&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .of_match_table &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;of_match_ptr&lt;/span&gt;(sunxi_mmc_of_match),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .pm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sunxi_mmc_pm_ops,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .probe&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sunxi_mmc_probe,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .remove&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sunxi_mmc_remove,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;module_platform_driver&lt;/span&gt;(sunxi_mmc_driver);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_DESCRIPTION&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Allwinner&amp;#39;s SD/MMC Card Controller Driver&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_LICENSE&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GPL v2&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_AUTHOR&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;David Lanzendörfer &amp;lt;david.lanzendoerfer@o2s.ch&amp;gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_ALIAS&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;platform:sunxi-mmc&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这套基本的框架，老生常谈，其主要功能就是：按照&lt;code&gt;of_match_table&lt;/code&gt;匹配表，来实现&lt;code&gt;platform_device&lt;/code&gt;和&lt;code&gt;platform_driver&lt;/code&gt;的匹配，然后执行&lt;code&gt;probe&lt;/code&gt;函数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】五、MMC核心层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%94mmc%E6%A0%B8%E5%BF%83%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:35 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%94mmc%E6%A0%B8%E5%BF%83%E5%B1%82/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】六、MMC块设备层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%85%ADmmc%E5%9D%97%E8%AE%BE%E5%A4%87%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:44 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%85%ADmmc%E5%9D%97%E8%AE%BE%E5%A4%87%E5%B1%82/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
