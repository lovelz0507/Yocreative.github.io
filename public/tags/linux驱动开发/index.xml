<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux驱动开发 on 悠创</title>
    <link>http://localhost:1313/Yocreative.github.io/tags/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in Linux驱动开发 on 悠创</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jan 2024 21:16:36 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Yocreative.github.io/tags/linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【MMC子系统】一、MMC_SD_SDIO介绍</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%80mmc_sd_sdio%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 19 Jan 2024 21:16:36 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%80mmc_sd_sdio%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h1 id=&#34;mmc子系统-一mmcsdsdio介绍&#34;&gt;&#xA;  【MMC子系统】 一、MMC/SD/SDIO介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f-%e4%b8%80mmcsdsdio%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;该节学习&lt;code&gt;Linux Kernel&lt;/code&gt;的&lt;code&gt;MMC&lt;/code&gt;子系统，也称为块设备驱动，正如其名，与字符驱动相比，&lt;code&gt;MMC&lt;/code&gt;子系统以块为单位进行操作。&lt;/p&gt;&#xA;&lt;p&gt;同时，由于&lt;code&gt;MMC Card&lt;/code&gt;、&lt;code&gt;SD Card&lt;/code&gt;、&lt;code&gt;SDIO Card&lt;/code&gt;等设备协议基本大同小异，所以在&lt;code&gt;Linux Kernel&lt;/code&gt;中使用&lt;code&gt;MMC&lt;/code&gt;子系统来统一管理！&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2mmcsdsdio介绍&#34;&gt;&#xA;  2、MMC/SD/SDIO介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2mmcsdsdio%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;上面我们了解到，&lt;code&gt;Linux Kernel&lt;/code&gt;使用统一的子系统模型来管理&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;等设备，那么为什么要这样设计呢？&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;答案当然是：三者协议有一定的共通性。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC（MultiMediaCard）&lt;/code&gt;多媒体卡设备，从本质上看，&lt;strong&gt;它是一种用于固态非易失性存储的内存卡（memory card）规范，定义了诸如卡的形态、尺寸、容量、电气信号、和主机之间的通信协议等方方面面的内容。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;1997年，&lt;code&gt;MMC&lt;/code&gt;规范正式发布，至今已经进化出了&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;MicroSD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;、&lt;code&gt;EMMC&lt;/code&gt;等多种不同的规范，虽然眼花缭乱，但是追其根源，都源于&lt;code&gt;MMC&lt;/code&gt;规范，所以&lt;code&gt;Linux Kernel&lt;/code&gt;可以将其统一管理！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/95d6d6a51a757c21cdc3108e12d16d0320161225135202.gif&#34; alt=&#34;mmc_sd_sdio_history&#34; /&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;：强调的是多媒体存储（MM：MultiMedia）&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SD&lt;/code&gt;：强调的是安全数据（SD：Secure Digital）&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;SDIO&lt;/code&gt;：强调的是IO接口(IO：Input/Output)&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt; &lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;更多干货可见：&lt;a href=&#34;https://t.zsxq.com/0eUcTOhdO&#34;&gt;高级工程师聚集地&lt;/a&gt;，助力大家更上一层楼！&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3总线接口&#34;&gt;&#xA;  3、总线接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%80%bb%e7%ba%bf%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;其物理接口也十分相似，我们以&lt;code&gt;MMC&lt;/code&gt;为例进行分析。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/4ca87abb20c96c2362ed22855c0fb89a20161225135205.gif&#34; alt=&#34;Card Concept(eMMC)&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们的&lt;code&gt;MMC&lt;/code&gt;卡如上图所示，内部我们不展开分析，直接将其作为一个完整的设备来分析。&lt;/p&gt;&#xA;&lt;p&gt;其通过&lt;code&gt;CLK&lt;/code&gt;、&lt;code&gt;CMD&lt;/code&gt;、&lt;code&gt;DATA&lt;/code&gt;等管脚与我们的&lt;code&gt;SOC&lt;/code&gt;通信，两者之间当然少不了&lt;code&gt;Controller&lt;/code&gt;了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/fbcc70f4593e41a6f96a28c4667a9c3420161225135203.gif&#34; alt=&#34;mmc_sd_sdio_hw_block&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;把通信总线部分，拿出来看&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20240103073934443.png&#34; alt=&#34;image-20240103073934443&#34; /&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;&lt;code&gt;CLK&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的通信时钟，常用的通信频率为&lt;code&gt;400KHz&lt;/code&gt;（识卡）、&lt;code&gt;25MHz&lt;/code&gt;，&lt;code&gt;50MHz&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的通信命令，标识不同的命令编号，类型多达50多种。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;DATA&lt;/code&gt;：提供&lt;code&gt;SOC&lt;/code&gt;和设备之间的数据通信，其通信总线有8根，可自定义设置，一般默认的是1-bit (默认)模式、4-bit模式和8-bit模式。当然数据线越多，传输越快嘛，但是处理起来也稍微繁琐。&lt;/p&gt;&#xA;&lt;p&gt;除了上面的一些管脚，当然还少不了&lt;code&gt;VCC&lt;/code&gt;、&lt;code&gt;GND&lt;/code&gt;等管脚喽，与其它外设不同的是，&lt;code&gt;MMC&lt;/code&gt;类的设备，还会有一个检测引脚&lt;code&gt;DET&lt;/code&gt;，用于检测是否存在卡设备（热插拔）。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;好啦，上面我们对&lt;code&gt;MMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;进行简单了解，也知道了通信的常用方式与物理接口，当然其最核心在于通信的协议啦！由于协议过于复杂，我们放到后面了解。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;4参考文章&#34;&gt;&#xA;  4、参考文章&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e5%8f%82%e8%80%83%e6%96%87%e7%ab%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;[1]：&lt;a href=&#34;http://www.wowotech.net/basic_tech/mmc_sd_sdio_intro.html&#34;&gt;http://www.wowotech.net/basic_tech/mmc_sd_sdio_intro.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】一、开篇词|Linux驱动开发新手必读</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%80linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%96%B0%E6%89%8B%E5%BF%85%E8%AF%BB/</link>
      <pubDate>Fri, 19 Jan 2024 20:26:20 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%80linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E6%96%B0%E6%89%8B%E5%BF%85%E8%AF%BB/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析一开篇词linux驱动开发新手必读&#34;&gt;&#xA;  【LED子系统深度剖析】一、开篇词|Linux驱动开发新手必读&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e4%b8%80%e5%bc%80%e7%af%87%e8%af%8dlinux%e9%a9%b1%e5%8a%a8%e5%bc%80%e5%8f%91%e6%96%b0%e6%89%8b%e5%bf%85%e8%af%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;大家好，我是董哥！&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;俗话说：“万丈高楼平地起”，对于我们刚学习&lt;code&gt;Linux驱动开发&lt;/code&gt;的小伙伴，&lt;code&gt;Linux驱动开发&lt;/code&gt;的基础至关重要，无论我们是学习&lt;code&gt;51单片机&lt;/code&gt;、&lt;code&gt;STM32&lt;/code&gt;还是&lt;code&gt;ARM&lt;/code&gt;，点灯的地位还是毋庸置疑的&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;驱动开发的学习过程中，点灯对于大多数人来说，对着教程照葫芦画瓢，还是能快速点亮一颗&lt;code&gt;LED&lt;/code&gt;灯的，但是你真的明白，一颗小小&lt;code&gt;LED&lt;/code&gt;灯的背后，到底执行了哪些动作吗，&lt;code&gt;Linux&lt;/code&gt;内核是如何管理的呢？&lt;/p&gt;&#xA;&lt;p&gt;今天，作为在芯片原厂工作的我，有义务带着大家，深入扒一扒&lt;code&gt;LED子系统&lt;/code&gt;的工作原理！&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;总结系列文章，花费时间较长，希望大家尊重原创！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;h2 id=&#34;2led子系统开发详细介绍&#34;&gt;&#xA;  2、LED子系统开发详细介绍&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2led%e5%ad%90%e7%b3%bb%e7%bb%9f%e5%bc%80%e5%8f%91%e8%af%a6%e7%bb%86%e4%bb%8b%e7%bb%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;该系列文章整体预览如下&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230510203433338.png&#34; alt=&#34;image-20230510203433338&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3led子系统开发文章汇总&#34;&gt;&#xA;  3、LED子系统开发文章汇总&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3led%e5%ad%90%e7%b3%bb%e7%bb%9f%e5%bc%80%e5%8f%91%e6%96%87%e7%ab%a0%e6%b1%87%e6%80%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;为了方便大家快速找到文章，这里按照学习流程进行汇总，点击即可访问！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;章节&lt;/th&gt;&#xA;          &lt;th&gt;内容&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1、开篇词&lt;/td&gt;&#xA;          &lt;td&gt;1. 文章总览&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/129829082&#34;&gt;2、LED子系统框架分析&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.1 裸机处理&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.2 LED子系统框架&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;2.3 目录结构及核心文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130313894&#34;&gt;3、硬件驱动层详解&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.1 gpio_led_probe分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.2 gpio_leds_create分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.3 create_gpio_led分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;3.4 数据结构之间的关系，以及实现流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130614003&#34;&gt;4、核心层——led-class.c详解&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.1 leds_init分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.2 leds_class_dev_pm_ops分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.3 led_groups分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4.4 led class的注册注销分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130676685&#34;&gt;5、核心层——led-core.c详解&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.1 led_init_core分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.2 led_timer_function分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.3 set_brightness_delayed分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5.4 代码实现流程分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130758864&#34;&gt;6、核心层——led-triggers.c详解&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.1 触发器设置相关函数分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.2 触发器注册注销函数分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.3 闪烁功能相关函数分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6.4 调用流程分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130819157&#34;&gt;7、触发器的实现&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.1 触发器介绍&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.2 heartbeat触发器的注册注销流程&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7.3 heartbeat触发器相关定义和实现&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130895232&#34;&gt;8、LED子系统——小试牛刀&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.1 硬件管脚确定&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.2 设备树配置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.3 子系统配置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.4 编译烧录&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8.5 验证&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130920920&#34;&gt;9、数据结构详解（番外篇）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9.1 核心数据结构图&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://donger.blog.csdn.net/article/details/130942729&#34;&gt;10、详细实现流程汇总（番外篇）&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;10.1 LED驱动匹配&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;10.2 读写流程详解&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;4结语&#34;&gt;&#xA;  4、结语&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4%e7%bb%93%e8%af%ad&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;以上，为&lt;code&gt;LED&lt;/code&gt;子系统深入探究的所有文章，每一篇都是精心打磨的文章，以此奉给那些刚开始学习&lt;code&gt;Linux&lt;/code&gt;驱动开发的入门者，同时也期待大家多多关注，支持！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】二、EMMC协议</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%8Cemmc%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 19 Jan 2024 21:14:30 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%8Cemmc%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h1 id=&#34;mmc子系统-二emmc协议&#34;&gt;&#xA;  【MMC子系统】 二、EMMC协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f-%e4%ba%8cemmc%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在上一节，我们知道&lt;code&gt;EMMC&lt;/code&gt;、&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;三种规范都是在&lt;code&gt;MMC&lt;/code&gt;规范之上发展而来，协议相差不大，所以&lt;code&gt;Linux Kernel&lt;/code&gt;才能使用&lt;code&gt;MMC&lt;/code&gt;子系统来统一管理！&lt;/p&gt;&#xA;&lt;p&gt;下面，我们以&lt;code&gt;MMC&lt;/code&gt;协议为例，来了解一下相关协议!&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2emmc基本了解&#34;&gt;&#xA;  2、EMMC基本了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2emmc%e5%9f%ba%e6%9c%ac%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-物理线路&#34;&gt;&#xA;  2.1 物理线路&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%89%a9%e7%90%86%e7%ba%bf%e8%b7%af&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202210312033341.gif&#34; alt=&#34;Card Concept(eMMC)&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20231025163714473.png&#34; alt=&#34;image-20231025163714473&#34; /&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;物理接口&lt;/th&gt;&#xA;          &lt;th&gt;接口含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CLK&lt;/td&gt;&#xA;          &lt;td&gt;时钟线，此信号的每一周期控制&lt;strong&gt;命令线&lt;/strong&gt;上的 1 bit 传输，以及所有&lt;strong&gt;数据线&lt;/strong&gt;上 1 bit（1x） 或 2 bit（2x）传输。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CMD&lt;/td&gt;&#xA;          &lt;td&gt;命令线，此信号是双向命令通道，用于设备初始化和命令传输。CMD信号有两种工 作模式：用于初始化模式&lt;strong&gt;开漏模式&lt;/strong&gt;和快速命令传输&lt;strong&gt;推拉模式&lt;/strong&gt;。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DAT0-7&lt;/td&gt;&#xA;          &lt;td&gt;这些是双向的数据通道。DAT 信号以&lt;strong&gt;推拉模式&lt;/strong&gt;工作。缺省状态，只有DAT0处于推拉模式，DAT1-7处于上拉（内含上拉），进入4bit后，DAT0-3处于推拉&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-emmc相关寄存器了解&#34;&gt;&#xA;  2.2 EMMC相关寄存器了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-emmc%e7%9b%b8%e5%85%b3%e5%af%84%e5%ad%98%e5%99%a8%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202210312033046.png&#34; alt=&#34;image-20220215111031546&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;23-其他特性了解&#34;&gt;&#xA;  2.3 其他特性了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e5%85%b6%e4%bb%96%e7%89%b9%e6%80%a7%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;读写模式&lt;/strong&gt;：单块读写，多块读写&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;寻址方式&lt;/strong&gt;：字节寻址和扇区寻址，字节寻址允许最大2GB，容量超过2GB的，使用扇区（512B）寻址&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;电压模式&lt;/strong&gt;：支持高电压和双电压模式&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;支持增强分区模式等&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3总线协议&#34;&gt;&#xA;  3、总线协议&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%80%bb%e7%ba%bf%e5%8d%8f%e8%ae%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-基础了解&#34;&gt;&#xA;  3.1 基础了解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e5%9f%ba%e7%a1%80%e4%ba%86%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;命令&lt;/strong&gt;：启动一种操作的Token，命令从主机发往设备，在CMD线路上串行传输。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应答&lt;/strong&gt;：从设备发往主机作为对上一命令的回答的Token，在CMD线路上串行传输。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt;：在主从机之间双向传输，总线宽度可以是1-bit（缺省）、4-bit 和 8-bit&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;32-命令格式&#34;&gt;&#xA;  3.2 命令格式&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-%e5%91%bd%e4%bb%a4%e6%a0%bc%e5%bc%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/e4f540b09494fc3b1f185ab8d34d09a1.png&#34; alt=&#34;image-20220215112109330&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】二、LED子系统框架分析</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%BA%8Cled%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 19 Jan 2024 20:27:15 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%BA%8Cled%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析二led子系统框架分析&#34;&gt;&#xA;  【LED子系统深度剖析】二、LED子系统框架分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e4%ba%8cled%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们学习嵌入式，无论是&lt;code&gt;C51&lt;/code&gt;、&lt;code&gt;STM32&lt;/code&gt;或者是&lt;code&gt;ARM&lt;/code&gt;，都是从点灯开始的，点灯在嵌入式中的地位等同于&lt;code&gt;Hello World&lt;/code&gt;在各大语言中的地位！&lt;/p&gt;&#xA;&lt;p&gt;虽然&lt;code&gt;LED&lt;/code&gt;功能简单，但是其&lt;strong&gt;麻雀虽小，五脏俱全&lt;/strong&gt;，在学习&lt;code&gt;Linux驱动开发&lt;/code&gt;的过程中，学习&lt;code&gt;LED&lt;/code&gt;子系统，往往也能够起到&lt;strong&gt;牵一发而动全身&lt;/strong&gt;的作用，也更有益于大家熟悉驱动开发的框架！&lt;/p&gt;&#xA;&lt;h2 id=&#34;2led裸机处理&#34;&gt;&#xA;  2、LED裸机处理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2led%e8%a3%b8%e6%9c%ba%e5%a4%84%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;我们在学习&lt;code&gt;Linux驱动框架&lt;/code&gt;的时候，第一步要做的就是去掉子系统的面纱，先弄明白裸机处理的流程！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230328063034205.png&#34; alt=&#34;image-20230328063034205&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;有嵌入式经验的朋友，对&lt;code&gt;LED&lt;/code&gt;的裸机在清楚不过了，上面是&lt;code&gt;LED&lt;/code&gt;的硬件电路，通常一端接到&lt;code&gt;VCC&lt;/code&gt;，一端接到&lt;code&gt;GPIO&lt;/code&gt;，当&lt;code&gt;GPIO&lt;/code&gt;拉低时，&lt;code&gt;LED&lt;/code&gt;亮；当&lt;code&gt;GPIO&lt;/code&gt;拉高时，&lt;code&gt;LED&lt;/code&gt;灭。&lt;/p&gt;&#xA;&lt;p&gt;在这里裸机我们不过多了解了，目的在于窥探&lt;code&gt;LED子系统&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3led子系统框架&#34;&gt;&#xA;  3、LED子系统框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;框架是什么？&lt;/p&gt;&#xA;&lt;p&gt;框架是一个规范，为我们开发者增加限制的同时，也是为了更好的开发新的程序，新的功能，其目的主要是：&lt;strong&gt;将不变的成分剥离开来，固化进框架，让开发者做最少的事情!&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230417084033734.png&#34; alt=&#34;image-20230417084033734&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;框架所处的位置，正如上图所示，由下往上看：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hardware&lt;/strong&gt;：我们的硬件设备，指的是&lt;code&gt;LED&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;硬件驱动层&lt;/strong&gt;：是直接操作硬件的实现，用于驱动硬件，实现相应的功能，并且将硬件设备注册进框架之中。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心层&lt;/strong&gt;：将&lt;code&gt;LED&lt;/code&gt;进行统一管理，提供注册，注销，管理&lt;code&gt;LED&lt;/code&gt;等相关接口，起到呈上启下的作用，方便上层调用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;用户层&lt;/strong&gt;：用户通过&lt;code&gt;sysfs&lt;/code&gt;文件系统中对应的文件节点，能够直接控制&lt;code&gt;LED&lt;/code&gt;的亮灭。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4led子系统目录结构及核心文件&#34;&gt;&#xA;  4、LED子系统目录结构及核心文件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4led%e5%ad%90%e7%b3%bb%e7%bb%9f%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84%e5%8f%8a%e6%a0%b8%e5%bf%83%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;了解完&lt;code&gt;LED&lt;/code&gt;子系统框架之后，我们来分析一下其相关的目录结构！&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ketnel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── driver&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── leds&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;Makefile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;led-core.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;led-gpio.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;led-class.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;led-triggers.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   ├──&#x9;......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   └── trigger&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   │   ├── ledtrig-cpu.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   │   ├── ledtrig-heartbeat.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   │   │   ├── .......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面即为&lt;code&gt;LED&lt;/code&gt;子系统的目录结构，其主要核心文件有：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】三、MMC子系统框架</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%89mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Fri, 19 Jan 2024 21:14:38 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%89mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h1 id=&#34;mmc子系统三mmc子系统框架&#34;&gt;&#xA;  【MMC子系统】三、MMC子系统框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e4%b8%89mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;上章，我们简单了解了&lt;code&gt;EMMC&lt;/code&gt;协议，感兴趣的可以查阅一下&lt;code&gt;SD&lt;/code&gt;和&lt;code&gt;SDIO&lt;/code&gt;的协议，之所以&lt;code&gt;Linux&lt;/code&gt;内核能够对&lt;code&gt;SD&lt;/code&gt;、&lt;code&gt;SDIO&lt;/code&gt;、&lt;code&gt;EMMC&lt;/code&gt;进行统一管理，根本原因就是三者协议上的相似性，我们该系列文章均以&lt;code&gt;EMMC&lt;/code&gt;为剑，一层层划开包裹着的盔甲。&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;本系列文章，均以&lt;code&gt;Linux 4.19&lt;/code&gt;为参考&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1mmc子系统框架&#34;&gt;&#xA;  1、MMC子系统框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://hughesxu.github.io/assets/img/sample/mmc_subsystem.svg&#34; alt=&#34;MMC Subsystem&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;如上图所示，&lt;code&gt;MMC&lt;/code&gt;子系统的整体框架包括：&lt;code&gt;MMC Host&lt;/code&gt;、&lt;code&gt;MMC Core&lt;/code&gt;、&lt;code&gt;MMC Block&lt;/code&gt;。我们从下网上看：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC HOST&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;控制器驱动层，正如其名，该层主要是为了实现&lt;code&gt;MMC&lt;/code&gt;控制器的初始化，以及&lt;code&gt;MMC&lt;/code&gt;底层的数据收发操作，其直接控制的是底层寄存器，用以产生相应的通信时序。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC CORE&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;核心层，该层主要起到了承上启下的作用。对下，主要体现在注册&lt;code&gt;MMC&lt;/code&gt;总线，实现对&lt;code&gt;MMC device&lt;/code&gt;和&lt;code&gt;MMC driver&lt;/code&gt;的统一管理；对上，体现在实现&lt;code&gt;MMC&lt;/code&gt;通信协议，并向上提供相应的读写操作接口。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MMC BLOCK&lt;/code&gt;：即&lt;code&gt;MMC&lt;/code&gt;块设备驱动层，其主要作用是屏蔽底层的实现逻辑，将底层抽象为卡设备，并且与虚拟文件系统关联，负责块设备请求的处理以及请求队列的管理，又称为&lt;code&gt;card&lt;/code&gt;卡驱动。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;哈哈，简单吧，我们刚开始对&lt;code&gt;MMC&lt;/code&gt;子系统框架就先了解这么多，不着急，慢慢来。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2mmc子系统文件结构&#34;&gt;&#xA;  2、MMC子系统文件结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;了解完&lt;code&gt;MMC&lt;/code&gt;子系统后，我们看一下&lt;code&gt;MMC&lt;/code&gt;驱动在&lt;code&gt;Linux&lt;/code&gt;下的目录结构，我们进入到&lt;code&gt;drivers/mmc&lt;/code&gt;目录&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drivers/mmc/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;├── core&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── block.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── bus.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── core.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── mmc.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── mmc_ops.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── ......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;├── host&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── sunxi-mmc.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;├── ......&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;&lt;strong&gt;这里介绍一个方法&lt;/strong&gt;&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;如果刚接触的朋友，不知道文件之间的关系是怎么样的，可以通过&lt;code&gt;Makefile&lt;/code&gt;和&lt;code&gt;Kconfig&lt;/code&gt;文件来大致看一下。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;obj-$(CONFIG_MMC)&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; mmc_core.o&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;mmc_core-y&lt;/span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; core.o bus.o host.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   mmc.o mmc_ops.o sd.o sd_ops.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   sdio.o sdio_ops.o sdio_bus.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   sdio_cis.o sdio_io.o sdio_irq.o &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;   slot-gpio.o&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由上面可知，&lt;code&gt;MMC CORE&lt;/code&gt;核心层，包括的文件有：&lt;code&gt;core.c&lt;/code&gt;、&lt;code&gt;bus.c&lt;/code&gt;等等，&lt;/p&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】三、硬件驱动层详解</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%89%E7%A1%AC%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 19 Jan 2024 20:27:37 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%89%E7%A1%AC%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%B1%82%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析三硬件驱动层详解&#34;&gt;&#xA;  【LED子系统深度剖析】三、硬件驱动层详解&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e4%b8%89%e7%a1%ac%e4%bb%b6%e9%a9%b1%e5%8a%a8%e5%b1%82%e8%af%a6%e8%a7%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;上篇文章我们了解了子系统的框架，下面我们来分析驱动框架中每层的实现以及作用。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230417084033734.png&#34; alt=&#34;image-20230417084033734&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;LED&lt;/code&gt;子系统中，硬件驱动层相关文件在包括：&lt;code&gt;kernel/drivers/leds/&lt;/code&gt; 目录下，其主要的函数有：&lt;code&gt;led-gpio.c&lt;/code&gt;、&lt;code&gt;led-xxx.c&lt;/code&gt;，其中&lt;code&gt;led-gpio.c&lt;/code&gt;为通用的平台驱动程序，&lt;code&gt;led-xxx.c&lt;/code&gt;为不同厂家提供的平台驱动程序。&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;我们在这里主要分析&lt;code&gt;led-gpio.c&lt;/code&gt;&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;h2 id=&#34;1gpio_led_probe分析&#34;&gt;&#xA;  1、gpio_led_probe分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1gpio_led_probe%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;打开该文件，直接找到加载驱动的入口函数&lt;code&gt;gpio_led_probe&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-相关数据结构&#34;&gt;&#xA;  1.1 相关数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#11-%e7%9b%b8%e5%85%b3%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;111-gpio_led_platform_data&#34;&gt;&#xA;  1.1.1 gpio_led_platform_data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#111-gpio_led_platform_data&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; gpio_led_platform_data {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &#x9;&#x9;num_leds;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; gpio_led &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;leds;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define GPIO_LED_NO_BLINK_LOW&#x9;0&#x9;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* No blink GPIO state low */&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define GPIO_LED_NO_BLINK_HIGH&#x9;1&#x9;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* No blink GPIO state high */&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define GPIO_LED_BLINK&#x9;&#x9;2&#x9;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Please, blink */&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;gpio_blink_set_t&lt;/span&gt;&#x9;gpio_blink_set;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;gpio_led_platform_data&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;文件位置&lt;/strong&gt;：&lt;code&gt;include/linux/leds.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要作用&lt;/strong&gt;：&lt;code&gt;LED&lt;/code&gt;的平台数据，用于对&lt;code&gt;LED&lt;/code&gt;硬件设备的统一管理&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;这个结构体用于父节点向子节点传递的数据时使用&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;h4 id=&#34;112-gpio_leds_priv&#34;&gt;&#xA;  1.1.2 gpio_leds_priv&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#112-gpio_leds_priv&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; gpio_leds_priv {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; num_leds;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; gpio_led_data leds[];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;gpio_leds_priv&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】四、MMC控制器驱动层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%9B%9Bmmc%E6%8E%A7%E5%88%B6%E5%99%A8%E9%A9%B1%E5%8A%A8%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:18 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%9B%9Bmmc%E6%8E%A7%E5%88%B6%E5%99%A8%E9%A9%B1%E5%8A%A8%E5%B1%82/</guid>
      <description>&lt;h1 id=&#34;mmc子系统四mmc控制器驱动层&#34;&gt;&#xA;  【MMC子系统】四、MMC控制器驱动层&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mmc%e5%ad%90%e7%b3%bb%e7%bb%9f%e5%9b%9bmmc%e6%8e%a7%e5%88%b6%e5%99%a8%e9%a9%b1%e5%8a%a8%e5%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;MMC&lt;/code&gt;控制器驱动层一般为&lt;code&gt;chip manufacturer&lt;/code&gt;做的事，不同的芯片实现方式不尽相同。&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;内核源码，相当大的一部分都是由&lt;code&gt;Device Drivers&lt;/code&gt;程序代码组成，其次另一大部分就是那些你从来都没有听说过的&lt;code&gt;Filesystem Format&lt;/code&gt;组成，真正核心的代码非常短小精悍的。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;当然，设备驱动程序也有一套既定的框架，按照框架来编写，实现对应的接口就可以了，在这里，我们主要分析一下&lt;code&gt;MMC&lt;/code&gt;控制器驱动的实现框架，不拘泥于细节。&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;下文以&lt;code&gt;sunxi-mmc.c&lt;/code&gt;为例来分析，基于&lt;code&gt;Linux4.19&lt;/code&gt;&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;41-通用驱动框架&#34;&gt;&#xA;  4.1 通用驱动框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#41-%e9%80%9a%e7%94%a8%e9%a9%b1%e5%8a%a8%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sunxi_mmc_probe&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; platform_device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pdev) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; of_device_id sunxi_mmc_of_match[] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun4i-a10-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun4i_a10_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun5i-a13-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun5i_a13_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun7i-a20-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun7i_a20_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun8i-a83t-emmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun8i_a83t_emmc_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun9i-a80-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun9i_a80_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun50i-a64-mmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun50i_a64_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { .compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;allwinner,sun50i-a64-emmc&amp;#34;&lt;/span&gt;, .data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sun50i_a64_emmc_cfg },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#6272a4&#34;&gt;/* sentinel */&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_DEVICE_TABLE&lt;/span&gt;(of, sunxi_mmc_of_match);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dev_pm_ops sunxi_mmc_pm_ops &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;SET_RUNTIME_PM_OPS&lt;/span&gt;(sunxi_mmc_runtime_suspend,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               sunxi_mmc_runtime_resume,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;NULL&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; platform_driver sunxi_mmc_driver &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .driver &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .name&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sunxi-mmc&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .of_match_table &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;of_match_ptr&lt;/span&gt;(sunxi_mmc_of_match),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .pm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sunxi_mmc_pm_ops,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .probe&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sunxi_mmc_probe,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .remove&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sunxi_mmc_remove,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;module_platform_driver&lt;/span&gt;(sunxi_mmc_driver);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_DESCRIPTION&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Allwinner&amp;#39;s SD/MMC Card Controller Driver&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_LICENSE&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GPL v2&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_AUTHOR&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;David Lanzendörfer &amp;lt;david.lanzendoerfer@o2s.ch&amp;gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;MODULE_ALIAS&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;platform:sunxi-mmc&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这套基本的框架，老生常谈，其主要功能就是：按照&lt;code&gt;of_match_table&lt;/code&gt;匹配表，来实现&lt;code&gt;platform_device&lt;/code&gt;和&lt;code&gt;platform_driver&lt;/code&gt;的匹配，然后执行&lt;code&gt;probe&lt;/code&gt;函数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】四、核心层详解（一）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%9B%9B%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%B8%80/</link>
      <pubDate>Fri, 19 Jan 2024 20:29:24 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%9B%9B%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析四核心层详解一&#34;&gt;&#xA;  【LED子系统深度剖析】四、核心层详解（一）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e5%9b%9b%e6%a0%b8%e5%bf%83%e5%b1%82%e8%af%a6%e8%a7%a3%e4%b8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;上篇文章我们了解了子系统的硬件驱动层，下面我们来分析驱动框架中核心层的实现以及作用。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230417084033734.png&#34; alt=&#34;image-20230417084033734&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;LED&lt;/code&gt;子系统框架中，核心层包括几个部分：核心层的实现部分（&lt;code&gt;led-core.c&lt;/code&gt;）、&lt;code&gt;sysfs&lt;/code&gt;文件节点创建（&lt;code&gt;led-class.c&lt;/code&gt;）、触发功能实现(&lt;code&gt;led-triggers.c&lt;/code&gt;、&lt;code&gt;driver/leds/triggers/led-xxx.c&lt;/code&gt;)&lt;/p&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;其中，触发功能部分较为独立，我们暂且先不去分析。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;我们先从&lt;code&gt;led-class.c&lt;/code&gt;文件开始分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2leds_init分析&#34;&gt;&#xA;  2、leds_init分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2leds_init%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;该函数其主要是为了创建&lt;code&gt;LED&lt;/code&gt;设备文件节点，方便用户通过节点直接访问。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;该文件，我们直接拉下底部，我们直接看入口函数：&lt;code&gt;leds_init&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-相关数据结构&#34;&gt;&#xA;  2.1 相关数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%9b%b8%e5%85%b3%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;211-class&#34;&gt;&#xA;  2.1.1 class&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#211-class&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * struct class - device classes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @name:&#x9;Name of the class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @owner:&#x9;The module owner.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @class_groups: Default attributes of this class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @dev_groups:&#x9;Default attributes of the devices that belong to the class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @dev_kobj:&#x9;The kobject that represents this class and links it into the hierarchy.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @dev_uevent:&#x9;Called when a device is added, removed from this class, or a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;few other things that generate uevents to add the environment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;variables.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @devnode:&#x9;Callback to provide the devtmpfs.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @class_release: Called to release this class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @dev_release: Called to release the device.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @shutdown_pre: Called at shut-down time before driver shutdown.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @ns_type:&#x9;Callbacks so sysfs can detemine namespaces.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @namespace:&#x9;Namespace of the device belongs to this class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @get_ownership: Allows class to specify uid/gid of the sysfs directories&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;for the devices belonging to the class. Usually tied to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;device&amp;#39;s namespace.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @pm:&#x9;&#x9;The default device power management operations of this class.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * @p:&#x9;&#x9;The private data of the driver core, no one other than the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#x9;&#x9;driver core can touch this.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * A class is a higher-level view of a device that abstracts out low-level&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * implementation details. Drivers may see a SCSI disk or an ATA disk, but,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * at the class level, they are all simply disks. Classes allow user space&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * to work with devices based on what they do, rather than how they are&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * connected or how they work.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; class {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; module&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; attribute_group&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;class_groups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; attribute_group&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;dev_groups;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kobject&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev_kobj;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev_uevent)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kobj_uevent_env &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;env);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;devnode)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#8be9fd&#34;&gt;umode_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;mode);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;class_release)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; class &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;class);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev_release)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;shutdown_pre)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; kobj_ns_type_operations &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;ns_type;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;namespace)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;get_ownership)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; device &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;dev, &lt;span style=&#34;color:#8be9fd&#34;&gt;kuid_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;uid, &lt;span style=&#34;color:#8be9fd&#34;&gt;kgid_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;gid);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; dev_pm_ops &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;pm;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; subsys_private &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;p;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;class&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】五、MMC核心层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%94mmc%E6%A0%B8%E5%BF%83%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:35 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BA%94mmc%E6%A0%B8%E5%BF%83%E5%B1%82/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】五、核心层详解（二）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%BA%94%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%BA%8C/</link>
      <pubDate>Fri, 19 Jan 2024 20:29:33 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%BA%94%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%BA%8C/</guid>
      <description>&lt;h1 id=&#34;led子系统深度剖析五核心层详解二&#34;&gt;&#xA;  【LED子系统深度剖析】五、核心层详解（二）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#led%e5%ad%90%e7%b3%bb%e7%bb%9f%e6%b7%b1%e5%ba%a6%e5%89%96%e6%9e%90%e4%ba%94%e6%a0%b8%e5%bf%83%e5%b1%82%e8%af%a6%e8%a7%a3%e4%ba%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;1前言&#34;&gt;&#xA;  1、前言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%89%8d%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;上篇文章我们了解了子系统的核心层&lt;code&gt;led-class.c&lt;/code&gt;，下面我们来分析驱动框架中核心层的&lt;code&gt;led-core.c&lt;/code&gt;实现以及作用。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230417084033734.png&#34; alt=&#34;image-20230417084033734&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;我们接着从&lt;code&gt;led-core.c&lt;/code&gt;文件开始分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2led_init_core分析&#34;&gt;&#xA;  2、led_init_core分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2led_init_core%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&#xD;&#xA;&lt;blockquote class=&#39;book-hint &#39;&gt;&#xD;&#xA;  &lt;p&gt;上一篇文章，我们知道在将&lt;code&gt;leds_classdev&lt;/code&gt;注册进入子系统后，会调用&lt;code&gt;led_init_core&lt;/code&gt;函数，初始化核心层，下面我们以&lt;code&gt;led_init_core&lt;/code&gt;该函数为突破口分析。&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&lt;h3 id=&#34;21-相关数据结构&#34;&gt;&#xA;  2.1 相关数据结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e7%9b%b8%e5%85%b3%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;211-work_struct&#34;&gt;&#xA;  2.1.1 work_struct&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#211-work_struct&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; work_struct {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_long_t&lt;/span&gt; data;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; list_head entry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;work_func_t&lt;/span&gt; func;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_LOCKDEP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; lockdep_map lockdep_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;work_struct&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;文件位置&lt;/strong&gt;：&lt;code&gt;include/linux/workqueue.h.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;主要作用&lt;/strong&gt;：定义一个工作队列，包括了工作项的状态和数据，以及处理工作项的函数指针，用于实现&lt;strong&gt;异步执行任务的功能&lt;/strong&gt;。在工作队列中，每个工作项都是一个&lt;code&gt;work_struct&lt;/code&gt;结构体的实例，通过将工作项添加到工作队列中，可以实现后台执行任务的功能。&lt;/p&gt;&#xA;&lt;h4 id=&#34;212-timer_list&#34;&gt;&#xA;  2.1.2 timer_list&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#212-timer_list&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; timer_list {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * All fields that change during normal runtime grouped to the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * same cacheline&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; hlist_node&#x9;entry;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt;&#x9;&#x9;expires;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;&#x9;&#x9;&#x9;(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;function)(&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; timer_list &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    u32&#x9;&#x9;&#x9;flags;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_LOCKDEP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; lockdep_map&#x9;lockdep_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;work_struct&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【MMC子系统】六、MMC块设备层</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%85%ADmmc%E5%9D%97%E8%AE%BE%E5%A4%87%E5%B1%82/</link>
      <pubDate>Fri, 19 Jan 2024 21:15:44 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_mmc_subsystem/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%85%ADmmc%E5%9D%97%E8%AE%BE%E5%A4%87%E5%B1%82/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】六、核心层详解（三）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%85%AD%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%B8%89/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:22 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%85%AD%E6%A0%B8%E5%BF%83%E5%B1%82%E8%AF%A6%E8%A7%A3%E4%B8%89/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】七、触发器实现</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%83%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:29 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B8%83%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】八、小试牛刀</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%85%AB%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:38 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%85%AB%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】九、数据结构详解（番外篇）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B9%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3%E7%95%AA%E5%A4%96%E7%AF%87/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:46 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E4%B9%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3%E7%95%AA%E5%A4%96%E7%AF%87/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【LED子系统深度剖析】十、详细实现流程（番外篇）</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8D%81%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%E7%95%AA%E5%A4%96%E7%AF%87/</link>
      <pubDate>Fri, 19 Jan 2024 20:43:52 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_led_subsystem/led%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%E5%8D%81%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B%E7%95%AA%E5%A4%96%E7%AF%87/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
