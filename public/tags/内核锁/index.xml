<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>内核锁 on 悠创</title>
    <link>http://localhost:1313/Yocreative.github.io/tags/%E5%86%85%E6%A0%B8%E9%94%81/</link>
    <description>Recent content in 内核锁 on 悠创</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jan 2024 23:03:45 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/Yocreative.github.io/tags/%E5%86%85%E6%A0%B8%E9%94%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【深入理解Linux锁机制】一、内核锁的由来</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%80%E5%86%85%E6%A0%B8%E9%94%81%E7%9A%84%E7%94%B1%E6%9D%A5/</link>
      <pubDate>Thu, 18 Jan 2024 23:01:55 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%80%E5%86%85%E6%A0%B8%E9%94%81%E7%9A%84%E7%94%B1%E6%9D%A5/</guid>
      <description>&lt;h1 id=&#34;深入理解linux锁机制一内核锁的由来&#34;&gt;&#xA;  【深入理解Linux锁机制】一、内核锁的由来&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3linux%e9%94%81%e6%9c%ba%e5%88%b6%e4%b8%80%e5%86%85%e6%a0%b8%e9%94%81%e7%9a%84%e7%94%b1%e6%9d%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/11385343fbf2b2115357580754c47b340dd78ecb.jpeg@f_auto&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;设备驱动中，我们必须要解决的一个问题是：&lt;strong&gt;多个进程对共享资源的并发访问，并发的访问会导致竞态。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1并发和竞态&#34;&gt;&#xA;  1、并发和竞态&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%b9%b6%e5%8f%91%e5%92%8c%e7%ab%9e%e6%80%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;并发&lt;code&gt;（Concurrency）&lt;/code&gt;：指的是多个执行单元同时、并行的被执行。&lt;/p&gt;&#xA;&lt;p&gt;竞态&lt;code&gt;（RaceConditions）&lt;/code&gt;：并发执行的单元对共享资源的访问，容易导致竞态。&lt;/p&gt;&#xA;&lt;p&gt;共享资源：硬件资源和软件上的全局变量、静态变量等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;解决竞态的途径是：保证对共享资源的互斥访问。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;互斥访问：一个执行单元在访问共享资源的时候，其他执行单元被禁止访问。&lt;/p&gt;&#xA;&lt;p&gt;临界区&lt;code&gt;（Critical Sections）&lt;/code&gt;：访问共享资源的代码区域成为临界区。临界区需要以某种互斥机制加以保护。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见的互斥机制包括&lt;/strong&gt;：中断屏蔽，原子操作，自旋锁，信号量，互斥体等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230718074758776.png&#34; alt=&#34;image-20230718074758776&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2竞态发生的场合&#34;&gt;&#xA;  2、竞态发生的场合&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e7%ab%9e%e6%80%81%e5%8f%91%e7%94%9f%e7%9a%84%e5%9c%ba%e5%90%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230721075844712.png&#34; alt=&#34;image-20230721075844712&#34; /&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;21-多对称处理器smp的多个cpu之间&#34;&gt;&#xA;  2.1 多对称处理器（SMP）的多个CPU之间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-%e5%a4%9a%e5%af%b9%e7%a7%b0%e5%a4%84%e7%90%86%e5%99%a8smp%e7%9a%84%e5%a4%9a%e4%b8%aacpu%e4%b9%8b%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;多个CPU使用共同的系统总线，可以访问共同的外设和存储器。在&lt;code&gt;SMP&lt;/code&gt;的情况下，多核&lt;code&gt;（CPU0、CPU1）&lt;/code&gt;的竞态可能发生于：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;CPU0&lt;/code&gt;的进程和&lt;code&gt;CPU1&lt;/code&gt;的进程之间&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CPU0&lt;/code&gt;的进程和&lt;code&gt;CPU1&lt;/code&gt;的中断之间&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CPU0&lt;/code&gt;的中断和&lt;code&gt;CPU1&lt;/code&gt;的中断之间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-单cpu内该进程与抢占它的进程之间&#34;&gt;&#xA;  2.2 单CPU内，该进程与抢占它的进程之间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-%e5%8d%95cpu%e5%86%85%e8%af%a5%e8%bf%9b%e7%a8%8b%e4%b8%8e%e6%8a%a2%e5%8d%a0%e5%ae%83%e7%9a%84%e8%bf%9b%e7%a8%8b%e4%b9%8b%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在单CPU内，多个进程并发执行，当一个进程执行的时间片耗尽，也有可能被另一个高优先级进程打断，会发生竞态，即所谓的调度引发竞态。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;23-中断软中断硬中断tasklet底半部与进程之间&#34;&gt;&#xA;  2.3 中断（软中断、硬中断、Tasklet、底半部）与进程之间&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#23-%e4%b8%ad%e6%96%ad%e8%bd%af%e4%b8%ad%e6%96%ad%e7%a1%ac%e4%b8%ad%e6%96%adtasklet%e5%ba%95%e5%8d%8a%e9%83%a8%e4%b8%8e%e8%bf%9b%e7%a8%8b%e4%b9%8b%e9%97%b4&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;当一个进程正在执行，一个外部/内部中断（软中断、硬中断、Tasklet等）将其打断，会导致竞态发生。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;3编译乱序和执行乱序&#34;&gt;&#xA;  3、编译乱序和执行乱序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e7%bc%96%e8%af%91%e4%b9%b1%e5%ba%8f%e5%92%8c%e6%89%a7%e8%a1%8c%e4%b9%b1%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;除了并发访问导致的竞态外，还需要了解编译器和处理器的一些特点所引发的一些问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;31-编译乱序&#34;&gt;&#xA;  3.1 编译乱序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-%e7%bc%96%e8%af%91%e4%b9%b1%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;现代的高性能编译器，为了提高Cache命中率以及CPU的Load/Store工作效率，会对目标代码进行乱序优化，减少逻辑上不必要的访存！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;因此，在打开编译器优化后，生成的汇编码并没有严格按照代码的逻辑顺序执行，这是正常的。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;为了解决编译乱序的问题，可以加入&lt;code&gt;barrier()&lt;/code&gt;编译屏障&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;顾名思义，编译屏障，也就是为了阻挡编译器的编译优化，加入&lt;code&gt;barrier()&lt;/code&gt;编译屏障，即可保证正确的执行顺序。&lt;/p&gt;&#xA;&lt;p&gt;编译屏障代码实现如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define barrier() __asm__ __volatile__(&amp;#34;&amp;#34;: : :&amp;#34;memory&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里详细解释一下&lt;code&gt;barrier&lt;/code&gt;的汇编实现：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;__asm__&lt;/code&gt;：向编译器说明在此插入汇编代码&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;__volatile__&lt;/code&gt;：用于告诉编译器，严禁将此处的汇编语句与其它的语句重组合优化。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;(&amp;quot;&amp;quot;: : :&amp;quot;memory&amp;quot;)&lt;/code&gt;：一条汇编语句，第一个&lt;code&gt;:&lt;/code&gt;前为汇编指令，这里是空操作；第二个&lt;code&gt;:&lt;/code&gt;前表示输出操作数，为空；第三个冒号前为输入操作数，也是要修改的寄存器；最后&lt;code&gt;memory&lt;/code&gt;表示该指令对内存进行访问，该指令确保了命令之前的内存操作需要完全执行，不被优化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;使用案例&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】二、中断屏蔽</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%B1%8F%E8%94%BD/</link>
      <pubDate>Thu, 18 Jan 2024 23:02:05 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%BA%8C%E4%B8%AD%E6%96%AD%E5%B1%8F%E8%94%BD/</guid>
      <description>&lt;h1 id=&#34;深入理解linux内核锁二中断屏蔽&#34;&gt;&#xA;  【深入理解Linux内核锁】二、中断屏蔽&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3linux%e5%86%85%e6%a0%b8%e9%94%81%e4%ba%8c%e4%b8%ad%e6%96%ad%e5%b1%8f%e8%94%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上一篇了解了内核锁的由来，本篇文章主要来讲一下中断屏蔽的底层实现以及原理。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://d00.paixin.com/thumbs/1152339/17466927/staff_1024.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;1中断屏蔽思想&#34;&gt;&#xA;  1、中断屏蔽思想&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%b8%ad%e6%96%ad%e5%b1%8f%e8%94%bd%e6%80%9d%e6%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;中断屏蔽，正如其名，屏蔽掉&lt;code&gt;CPU&lt;/code&gt;的中断响应功能，解决并发引起的竞态问题。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在进入临界区前屏蔽中断，这么做有什么好处，以及有什么弊端？&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;好处在于&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决了进程与中断之间的并发&lt;/strong&gt;：保证在执行临界区代码时，不被中断所打断。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决了进程与进程之间调度的并发&lt;/strong&gt;：系统的进程调度与中断息息相关，同时也限制了系统进程的并发，解决了系统进程并发带来的竞态问题。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;弊端在于&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;各类中断类型较多，一棒子打死影响大&lt;/strong&gt;：&lt;code&gt;Linux&lt;/code&gt;内核中，除了系统进程调度依赖中断，还有一些异步&lt;code&gt;I/O&lt;/code&gt;等众多操作都依赖中断，因此长时间屏蔽中断是很危险的，会对系统造成严重影响，因此也要求临界区代码要简短。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;解决的不够完善&lt;/strong&gt;：关闭中断能够解决进程调度、中断引发的竞态，但是这些都是单&lt;code&gt;CPU&lt;/code&gt;内部的，对于&lt;code&gt;SMP&lt;/code&gt;对称多处理器，仍然不可避免的会收到其他&lt;code&gt;CPU&lt;/code&gt;的中断。因此，并不能解决&lt;code&gt;SMP&lt;/code&gt;多&lt;code&gt;CPU&lt;/code&gt;引发的竞态。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;因此，单独使用中断屏蔽通常不是一种值得推荐的避免竞态的方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;2linux内核中断屏蔽的实现&#34;&gt;&#xA;  2、Linux内核中断屏蔽的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2linux%e5%86%85%e6%a0%b8%e4%b8%ad%e6%96%ad%e5%b1%8f%e8%94%bd%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-linux内核提供的api接口&#34;&gt;&#xA;  2.1 Linux内核提供的API接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-linux%e5%86%85%e6%a0%b8%e6%8f%90%e4%be%9b%e7%9a%84api%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;关于中断屏蔽，&lt;code&gt;Linux&lt;/code&gt;内核所提供的接口如下：&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_enable&lt;/span&gt;()&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;使能本CPU的中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_disable&lt;/span&gt;()&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;禁止本CPU的中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_save&lt;/span&gt;(flags)&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;禁止本CPU的中断，并保存CPU中断位的信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_restore&lt;/span&gt;(flags)&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;使能本CPU的中断，并恢复CPU中断位的信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_bh_disable&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;禁止本CPU底半部中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;local_bh_enable&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)    &#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;使能本CPU底半部中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件位置：&lt;code&gt;kernel/include/linux/irqflags.h&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;local_irq_enable&lt;/code&gt;与&lt;code&gt;local_irq_disable&lt;/code&gt;：直接打开/关闭本&lt;code&gt;CPU&lt;/code&gt;内的中断，包括了顶半部和底半部中断的打开和关闭。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;local_irq_save&lt;/code&gt;与&lt;code&gt;local_irq_restore&lt;/code&gt;：直接打开/关闭本&lt;code&gt;CPU&lt;/code&gt;中断，并且保存中断屏蔽前的状态，便于后续恢复&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;local_bh_enable&lt;/code&gt;与&lt;code&gt;local_bh_disable&lt;/code&gt;：直接打开/关闭本&lt;code&gt;CPU&lt;/code&gt;内的底半部中断&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h3 id=&#34;22-api接口实现分析&#34;&gt;&#xA;  2.2 API接口实现分析&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-api%e6%8e%a5%e5%8f%a3%e5%ae%9e%e7%8e%b0%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;因为中断屏蔽与底层芯片架构有关，不同架构处理方式不同，我们以&lt;code&gt;ARM&lt;/code&gt;为例&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;221-local_irq_enable&#34;&gt;&#xA;  2.2.1 local_irq_enable&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#221-local_irq_enable&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define local_irq_enable()&#x9;do { raw_local_irq_enable(); } while (0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define raw_local_irq_enable()&#x9;&#x9;arch_local_irq_enable()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#define arch_local_irq_enable arch_local_irq_enable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;arch_local_irq_enable&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;asm&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;volatile&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&#x9;cpsie i&#x9;&#x9;&#x9;@ arch_local_irq_enable&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;memory&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cc&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;函数介绍&lt;/strong&gt;：&lt;code&gt;local_irq_enable&lt;/code&gt;函数用于将&lt;code&gt;CPSR&lt;/code&gt;寄存器中的中断使能位设为1，从而使得&lt;code&gt;CPU&lt;/code&gt;能够响应中断。&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】三、原子操作</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%89%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 18 Jan 2024 23:02:13 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%89%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;h1 id=&#34;深入理解linux内核锁三原子操作&#34;&gt;&#xA;  【深入理解Linux内核锁】三、原子操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3linux%e5%86%85%e6%a0%b8%e9%94%81%e4%b8%89%e5%8e%9f%e5%ad%90%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pics6.baidu.com/feed/a044ad345982b2b73288e884305a63e977099b5d.jpeg?token=534118da5c3201a68dadb33ea815373b&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1原子操作思想&#34;&gt;&#xA;  1、原子操作思想&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%8e%9f%e5%ad%90%e6%93%8d%e4%bd%9c%e6%80%9d%e6%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;原子操作&lt;code&gt;（atomic operation）&lt;/code&gt;，不可分割的操作。其通过原子变量来实现，以保证单个&lt;code&gt;CPU&lt;/code&gt;周期内，读写该变量不能被打断，进而判断该变量的值，来解决并发引起的互斥。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Atomic&lt;/code&gt;类型的变量可以在执行期间禁止中断，并保证在访问变量时的原子性。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;简单来说，我们可以把原子变量看作为一个标志位，然后再来检测该标志位的值。&lt;/p&gt;&#xA;&lt;p&gt;其原子性表现在：操作该标志位的值，不可被打断。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;在&lt;code&gt;Linux&lt;/code&gt;内核中，提供了两类原子操作的接口，分别是针对&lt;strong&gt;位&lt;/strong&gt;和&lt;strong&gt;整型变量&lt;/strong&gt;的原子操作。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230730171728090.png&#34; alt=&#34;image-20230730171728090&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2整型变量原子操作&#34;&gt;&#xA;  2、整型变量原子操作&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e6%95%b4%e5%9e%8b%e5%8f%98%e9%87%8f%e5%8e%9f%e5%ad%90%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-api接口&#34;&gt;&#xA;  2.1 API接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#21-api%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;对于整形变量的原子操作，内核提供了一系列的 &lt;code&gt;API&lt;/code&gt;接口&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*设置原子变量的值*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ATOMIC_INIT&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);            &lt;span style=&#34;color:#6272a4&#34;&gt;/* 定义原子变量v并初始化为0 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_set&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v, &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i);    &lt;span style=&#34;color:#6272a4&#34;&gt;/* 设置原子变量的值为i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*获取原子变量的值*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_read&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);        &#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 返回原子变量的值*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*原子变量的加减*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_add&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);      &lt;span style=&#34;color:#6272a4&#34;&gt;/* 原子变量增加i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_sub&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);      &lt;span style=&#34;color:#6272a4&#34;&gt;/* 原子变量减少i */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*原子变量的自增，自减*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_inc&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 原子变量增加1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_dec&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);     &#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/* 原子变量减少1 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*原子变量的操作并测试*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_inc_and_test&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/*进行对应操作后，测试原子变量值是否为0*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_dec_and_test&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_sub_and_test&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*原子变量的操作并返回*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_add_return&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;/*进行对应操作后，返回新的值*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_sub_return&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i, &lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_inc_return&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;atomic_dec_return&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;atomic_t&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;v);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;22-api实现&#34;&gt;&#xA;  2.2 API实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#22-api%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我们下面就介绍几个稍微有代表性的接口实现&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】四、自旋锁</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%9B%9B%E8%87%AA%E6%97%8B%E9%94%81/</link>
      <pubDate>Thu, 18 Jan 2024 23:02:41 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%9B%9B%E8%87%AA%E6%97%8B%E9%94%81/</guid>
      <description>&lt;h1 id=&#34;深入理解linux内核锁四自旋锁&#34;&gt;&#xA;  【深入理解Linux内核锁】四、自旋锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3linux%e5%86%85%e6%a0%b8%e9%94%81%e5%9b%9b%e8%87%aa%e6%97%8b%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img1.baidu.com/it/u=2292345982,2860777693&amp;amp;fm=253&amp;amp;fmt=auto&amp;amp;app=138&amp;amp;f=JPEG?w=640&amp;amp;h=427&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;上两节主要讲解了中断屏蔽和原子操作，这两个作为最底层的操作，几乎在&lt;code&gt;Linux&lt;/code&gt;内核中都不单独使用，下面我们来带大家了解一下常用的自旋锁！&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;1什么是自旋锁&#34;&gt;&#xA;  1、什么是自旋锁？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e4%bb%80%e4%b9%88%e6%98%af%e8%87%aa%e6%97%8b%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;自旋锁是一种典型的对临界资源进行互斥访问的手段。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;它的底层实现逻辑是：原子变量+判断检测。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;原子变量我们可以理解为一把锁，通过操作原子变量（锁）的状态，并对其进行判断，如果锁未被锁定，我们就继续往下执行；如果锁已经被锁定，我们就原地自旋，直到等到锁被打开。&lt;/p&gt;&#xA;&lt;p&gt;在&lt;code&gt;ARM&lt;/code&gt;平台下，自旋锁的实现使用了&lt;code&gt;ldrex&lt;/code&gt;、&lt;code&gt;strex&lt;/code&gt;、以及内存屏障指令&lt;code&gt;dmb&lt;/code&gt;、&lt;code&gt;dsb&lt;/code&gt;、&lt;code&gt;wfe&lt;/code&gt;、&lt;code&gt;sev&lt;/code&gt;等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2自旋锁思想&#34;&gt;&#xA;  2、自旋锁思想&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e8%87%aa%e6%97%8b%e9%94%81%e6%80%9d%e6%83%b3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;自旋锁主要针对于&lt;code&gt;SMP&lt;/code&gt;或者单&lt;code&gt;CPU&lt;/code&gt;但内核可抢占的情况&lt;/strong&gt;&lt;/span&gt;，对于单&lt;code&gt;CPU&lt;/code&gt;内核不可抢占的情况时，自旋锁退化为空操作。&lt;/li&gt;&#xA;&lt;li&gt;自旋锁实际为忙等锁，当锁不可用时，&lt;code&gt;CPU&lt;/code&gt;一直处于等待状态，直到该锁被释放。&lt;/li&gt;&#xA;&lt;li&gt;自旋锁可能会导致内核死锁，当递归使用自旋锁时，则将该&lt;code&gt;CPU&lt;/code&gt;锁死。&lt;/li&gt;&#xA;&lt;li&gt;在多核&lt;code&gt;SMP&lt;/code&gt;的情况下，任何一个核拿到了自旋锁，该核上的抢占调度也暂时禁止了，但是没有禁止另外一个核的抢占调度。&lt;/li&gt;&#xA;&lt;li&gt;&lt;span style=&#34;color: red;&#34;&gt;&lt;strong&gt;在自旋锁锁定期间，不能调用引起进程调度的函数&lt;/strong&gt;&lt;/span&gt;，如&lt;code&gt;copy_from_user()&lt;/code&gt;、&lt;code&gt;copy_to_user()&lt;/code&gt;、&lt;code&gt;kmalloc()&lt;/code&gt;和&lt;code&gt;msleep()&lt;/code&gt;，否则会导致内核崩溃&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3自旋锁的定义及实现&#34;&gt;&#xA;  3、自旋锁的定义及实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e8%87%aa%e6%97%8b%e9%94%81%e7%9a%84%e5%ae%9a%e4%b9%89%e5%8f%8a%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-api接口&#34;&gt;&#xA;  3.1 API接口&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#31-api%e6%8e%a5%e5%8f%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;定义自旋锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;spinlock_t&lt;/span&gt; lock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;初始化自旋锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock_init&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;lock)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获得自旋锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;lock)&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获取自旋锁，如果立即获得锁，则直接返回，否则，自旋等待，直到锁被释放&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_trylock&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;lock)&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;尝试获取自旋锁，如果立即获得锁，返回true，否则直接返回false，不原地等待&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;释放自旋锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;lock)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自旋锁保证了不受其他&lt;code&gt;CPU&lt;/code&gt;或者单&lt;code&gt;CPU&lt;/code&gt;内的抢占进程的干扰，但是对于临界区代码，仍然有可能会受到中断和底半部的影响。&lt;/p&gt;&#xA;&lt;p&gt;为了解决这种问题，我们就要使用自旋锁的衍生。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock_irq&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_disable&lt;/span&gt;()&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获取自旋锁并关中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock_irq&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_enable&lt;/span&gt;()&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;释放自旋锁并开中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock_irqsave&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_save&lt;/span&gt;()&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获取自旋锁并关中断，保存中断状态&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock_irqrestore&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_irq_restore&lt;/span&gt;()&lt;span style=&#34;color:#6272a4&#34;&gt;//释放自旋锁，开中断并恢复中断状态&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock_bh&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_lock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_bh_disable&lt;/span&gt;()&#x9;&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;获取自旋锁并关底半部中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock_bh&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spin_unlock&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;local_bh_enable&lt;/span&gt;()&#x9;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;//&#x9;释放自旋锁并发开底半部中断&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当我们的临界区代码，有可能被进程或者中断访问时，就需要在进程上下文中，调用&lt;code&gt;spin_lock_irqsave()&lt;/code&gt;、&lt;code&gt;spin_unlock_irqrestore()&lt;/code&gt;，在中断上下文中调用&lt;code&gt;spin_lock()&lt;/code&gt;、&lt;code&gt;spin_unlock()&lt;/code&gt;，如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/image-20230605140910971.png&#34; alt=&#34;image-20230605140910971&#34; /&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;TODO：替换图片&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;32-api实现&#34;&gt;&#xA;  3.2 API实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#32-api%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;321-结构体spinlock_traw_spinlockarch_spinlock_t&#34;&gt;&#xA;  3.2.1 结构体spinlock_t、raw_spinlock、arch_spinlock_t&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#321-%e7%bb%93%e6%9e%84%e4%bd%93spinlock_traw_spinlockarch_spinlock_t&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; spinlock {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;union&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; raw_spinlock rlock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_DEBUG_LOCK_ALLOC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;# define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u6 __padding[LOCK_PADSIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; lockdep_map dep_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8be9fd&#34;&gt;spinlock_t&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; raw_spinlock {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;arch_spinlock_t&lt;/span&gt; raw_lock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_DEBUG_SPINLOCK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; magic, owner_cpu;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef CONFIG_DEBUG_LOCK_ALLOC&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; lockdep_map dep_map;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#8be9fd&#34;&gt;raw_spinlock_t&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;union&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        u32 slock;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; __raw_tickets {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#ifdef __ARMEB__&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;            u16 next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u16 owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;            u16 owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            u16 next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;        } tickets;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8be9fd&#34;&gt;arch_spinlock_t&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;结构体名称&lt;/strong&gt;：&lt;code&gt;spinlock_t&lt;/code&gt;、&lt;code&gt;raw_spinlock&lt;/code&gt;、&lt;code&gt;arch_spinlock_t&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】五、衍生自旋锁</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%BA%94%E8%A1%8D%E7%94%9F%E8%87%AA%E6%97%8B%E9%94%81/</link>
      <pubDate>Thu, 18 Jan 2024 23:03:11 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%BA%94%E8%A1%8D%E7%94%9F%E8%87%AA%E6%97%8B%E9%94%81/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】六、信号量</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%85%AD%E4%BF%A1%E5%8F%B7%E9%87%8F/</link>
      <pubDate>Thu, 18 Jan 2024 23:03:31 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%85%AD%E4%BF%A1%E5%8F%B7%E9%87%8F/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】七、互斥体</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%83%E4%BA%92%E6%96%A5%E4%BD%93/</link>
      <pubDate>Thu, 18 Jan 2024 23:03:38 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E4%B8%83%E4%BA%92%E6%96%A5%E4%BD%93/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>【深入理解Linux锁机制】八、完成量</title>
      <link>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%85%AB%E5%AE%8C%E6%88%90%E9%87%8F/</link>
      <pubDate>Thu, 18 Jan 2024 23:03:45 +0800</pubDate>
      <guid>http://localhost:1313/Yocreative.github.io/docs/linux/linux_kernel_lock/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E9%94%81%E6%9C%BA%E5%88%B6%E5%85%AB%E5%AE%8C%E6%88%90%E9%87%8F/</guid>
      <description>&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/202206141400958.jpeg&#34; alt=&#34;0c70cff6aab3f2894c2bfd2c973e9620&#34; alt=&#34;img&#34;  width = 15% height =15%/&gt;&lt;/div&gt;&#xA;&lt;center&gt;&lt;font color =&#34;grey&#34;&gt;我的圈子：&lt;a href=&#34;https://t.zsxq.com/14hPUwE8z&#34;&gt;&#xA;高级工程师聚集地&lt;/a&gt;&lt;/font&gt;&lt;/center&gt;&#xA;&lt;center&gt;&lt;b&gt; 创作理念：专注分享高质量嵌入式文章，让大家读有所得！&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://bdn.135editor.com/files/images/editor_styles/d1c723e7e296ca791c2fb3b39ebee0f3.jpg&#34; alt=&#34;img&#34; width = 70% height =10%/&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&#xA;&lt;br&gt;&#xA;&amp;nbsp;&#xA;亲爱的读者，你好：&#xA;&lt;p&gt;  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;center&gt;&lt;b&gt; &lt;font color =&#34;blue&#34;&gt;欢迎关注【嵌入式艺术】，董哥原创！&lt;/font&gt;&lt;/b&gt;&lt;/center&gt;&#xA;&lt;div align=center&gt;&lt;img src=&#34;https://image-1305421143.cos.ap-nanjing.myqcloud.com/image/blog.png&#34; alt=&#34;img&#34; width = &#34;60%&#34; height =&#34;10%&#34;/&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
